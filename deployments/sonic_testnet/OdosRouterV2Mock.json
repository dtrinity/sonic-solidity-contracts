{
  "address": "0x11c76A082C61417449F9a3fbb900370569f8fc8F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "slippage",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "referralCode",
          "type": "uint32"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amountsOut",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensOut",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "referralCode",
          "type": "uint32"
        }
      ],
      "name": "SwapMulti",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_WITH_FEE_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "exchangeRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "code",
          "type": "uint32"
        }
      ],
      "name": "referralLookup",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "referralFee",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "registered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "referralFee",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "registered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_referralCode",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_referralFee",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "registerReferralCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapMultiFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapMultiFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "inputAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "inputReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "outputQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outputMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputReceiver",
              "type": "address"
            }
          ],
          "internalType": "struct IOdosRouterV2.swapTokenInfo",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "pathDefinition",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "referralCode",
          "type": "uint32"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapCompact",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct IOdosRouterV2.inputTokenInfo[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "relativeValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct IOdosRouterV2.outputTokenInfo[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "swapMulti",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapMultiCompact",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapMultiFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IOdosRouterV2.permit2Info",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct IOdosRouterV2.inputTokenInfo[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "relativeValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct IOdosRouterV2.outputTokenInfo[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "swapMultiPermit2",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IOdosRouterV2.permit2Info",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "inputAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "inputReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "outputQuote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outputMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "outputReceiver",
              "type": "address"
            }
          ],
          "internalType": "struct IOdosRouterV2.swapTokenInfo",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "swapPermit2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct IOdosRouterV2.inputTokenInfo[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "relativeValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct IOdosRouterV2.outputTokenInfo[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swapRouterFunds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "transferRouterFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "name": "writeAddressList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdbe70043156e1fe357dc22aebbcf4b6245056a8487b3c8147bc4f6c1957d6b0a",
  "receipt": {
    "to": null,
    "from": "0xd2f775Ff2cD41bfe43C7A8c016eD10393553fe44",
    "contractAddress": "0x11c76A082C61417449F9a3fbb900370569f8fc8F",
    "transactionIndex": 0,
    "gasUsed": "1069360",
    "logsBloom": "0x
    "blockHash": "0x50ef5326a5bbf84787940d93916b1f77c59cb59569154942dbfa4834d4ebf667",
    "transactionHash": "0xdbe70043156e1fe357dc22aebbcf4b6245056a8487b3c8147bc4f6c1957d6b0a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30439644,
        "transactionHash": "0xdbe70043156e1fe357dc22aebbcf4b6245056a8487b3c8147bc4f6c1957d6b0a",
        "address": "0x11c76A082C61417449F9a3fbb900370569f8fc8F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d2f775ff2cd41bfe43c7a8c016ed10393553fe44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x50ef5326a5bbf84787940d93916b1f77c59cb59569154942dbfa4834d4ebf667"
      }
    ],
    "blockNumber": 30439644,
    "cumulativeGasUsed": "1069360",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e7563051fc9a3f51d1c1863bab8ace53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"slippage\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"referralCode\",\"type\":\"uint32\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensOut\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"referralCode\",\"type\":\"uint32\"}],\"name\":\"SwapMulti\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_WITH_FEE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"code\",\"type\":\"uint32\"}],\"name\":\"referralLookup\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"referralFee\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"referralFee\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_referralCode\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_referralFee\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"registerReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapMultiFee\",\"type\":\"uint256\"}],\"name\":\"setSwapMultiFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputReceiver\",\"type\":\"address\"}],\"internalType\":\"struct IOdosRouterV2.swapTokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"pathDefinition\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"referralCode\",\"type\":\"uint32\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapCompact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct IOdosRouterV2.inputTokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"relativeValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct IOdosRouterV2.outputTokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"swapMulti\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMultiCompact\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMultiFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IOdosRouterV2.permit2Info\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct IOdosRouterV2.inputTokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"relativeValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct IOdosRouterV2.outputTokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"swapMultiPermit2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IOdosRouterV2.permit2Info\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputReceiver\",\"type\":\"address\"}],\"internalType\":\"struct IOdosRouterV2.swapTokenInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"swapPermit2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct IOdosRouterV2.inputTokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"relativeValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct IOdosRouterV2.outputTokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapRouterFunds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"transferRouterFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"writeAddressList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Allows setting exchange rates between tokens and simulates swaps\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"setExchangeRate(address,address,uint256)\":{\"params\":{\"rate\":\"Exchange rate (1 token1 = rate token2)\",\"token1\":\"First token address\",\"token2\":\"Second token address\"}},\"swap((address,uint256,address,address,uint256,uint256,address),bytes,address,uint32)\":{\"params\":{\"executor\":\"Not used in mock\",\"pathDefinition\":\"Not used in mock\",\"referralCode\":\"Referral code\",\"tokenInfo\":\"Swap token information\"}}},\"title\":\"OdosRouterV2Mock\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"referralLookup(uint32)\":{\"notice\":\"Get referral information\"},\"registerReferralCode(uint32,uint64,address)\":{\"notice\":\"Register a referral code with fee and beneficiary\"},\"setExchangeRate(address,address,uint256)\":{\"notice\":\"Sets the exchange rate between two tokens\"},\"setSwapMultiFee(uint256)\":{\"notice\":\"Set swap multi fee\"},\"swap((address,uint256,address,address,uint256,uint256,address),bytes,address,uint32)\":{\"notice\":\"Main swap function implementation\"}},\"notice\":\"Mock implementation of OdosRouterV2 for testing purposes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/testing/odos/OdosRouterV2Mock.sol\":\"OdosRouterV2Mock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/odos/interface/IOdosRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\n/**\\n * @dev Interface for Odos Router V2.\\n * @dev Generated from original ABI: https://fraxscan.com/address/0x56c85a254dd12ee8d9c04049a4ab62769ce98210#code\\n */\\npragma solidity ^0.8.20;\\n\\ninterface IOdosRouterV2 {\\n    struct swapTokenInfo {\\n        address inputToken;\\n        uint256 inputAmount;\\n        address inputReceiver;\\n        address outputToken;\\n        uint256 outputQuote;\\n        uint256 outputMin;\\n        address outputReceiver;\\n    }\\n\\n    struct inputTokenInfo {\\n        address tokenAddress;\\n        uint256 amountIn;\\n        address receiver;\\n    }\\n\\n    struct outputTokenInfo {\\n        address tokenAddress;\\n        uint256 relativeValue;\\n        address receiver;\\n    }\\n\\n    struct permit2Info {\\n        address contractAddress;\\n        uint256 nonce;\\n        uint256 deadline;\\n        bytes signature;\\n    }\\n\\n    event Swap(\\n        address sender,\\n        uint256 inputAmount,\\n        address inputToken,\\n        uint256 amountOut,\\n        address outputToken,\\n        int256 slippage,\\n        uint32 referralCode\\n    );\\n\\n    event SwapMulti(\\n        address sender,\\n        uint256[] amountsIn,\\n        address[] tokensIn,\\n        uint256[] amountsOut,\\n        address[] tokensOut,\\n        uint32 referralCode\\n    );\\n\\n    function FEE_DENOM() external view returns (uint256);\\n\\n    function REFERRAL_WITH_FEE_THRESHOLD() external view returns (uint256);\\n\\n    function addressList(uint256) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function referralLookup(\\n        uint32\\n    )\\n        external\\n        view\\n        returns (uint64 referralFee, address beneficiary, bool registered);\\n\\n    function registerReferralCode(\\n        uint32 _referralCode,\\n        uint64 _referralFee,\\n        address _beneficiary\\n    ) external;\\n\\n    function renounceOwnership() external;\\n\\n    function setSwapMultiFee(uint256 _swapMultiFee) external;\\n\\n    function swap(\\n        swapTokenInfo calldata tokenInfo,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapCompact() external payable returns (uint256);\\n\\n    function swapMulti(\\n        inputTokenInfo[] calldata inputs,\\n        outputTokenInfo[] calldata outputs,\\n        uint256 valueOutMin,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external payable returns (uint256[] memory amountsOut);\\n\\n    function swapMultiCompact()\\n        external\\n        payable\\n        returns (uint256[] memory amountsOut);\\n\\n    function swapMultiFee() external view returns (uint256);\\n\\n    function swapMultiPermit2(\\n        permit2Info calldata permit2,\\n        inputTokenInfo[] calldata inputs,\\n        outputTokenInfo[] calldata outputs,\\n        uint256 valueOutMin,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external payable returns (uint256[] memory amountsOut);\\n\\n    function swapPermit2(\\n        permit2Info calldata permit2,\\n        swapTokenInfo calldata tokenInfo,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external returns (uint256 amountOut);\\n\\n    function swapRouterFunds(\\n        inputTokenInfo[] calldata inputs,\\n        outputTokenInfo[] calldata outputs,\\n        uint256 valueOutMin,\\n        bytes calldata pathDefinition,\\n        address executor\\n    ) external returns (uint256[] memory amountsOut);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function transferRouterFunds(\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address dest\\n    ) external;\\n\\n    function writeAddressList(address[] calldata addresses) external;\\n\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0x99934b8947848df22480188a9a480fc002a97e2b3e6ecdb455585cca5adc1f6f\",\"license\":\"MIT\"},\"contracts/testing/odos/OdosRouterV2Mock.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.20;\\n\\nimport \\\"../../odos/interface/IOdosRouterV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title OdosRouterV2Mock\\n * @notice Mock implementation of OdosRouterV2 for testing purposes\\n * @dev Allows setting exchange rates between tokens and simulates swaps\\n */\\ncontract OdosRouterV2Mock is IOdosRouterV2, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // Exchange rate mapping: token1 => token2 => rate (1 token1 = rate token2)\\n    mapping(address => mapping(address => uint256)) public exchangeRates;\\n\\n    // Constants required by interface\\n    uint256 public constant FEE_DENOM = 1e6;\\n    uint256 public constant REFERRAL_WITH_FEE_THRESHOLD = 1e6;\\n    uint256 public swapMultiFee;\\n\\n    // Referral info storage\\n    mapping(uint32 => ReferralInfo) public referrals;\\n    struct ReferralInfo {\\n        uint64 referralFee;\\n        address beneficiary;\\n        bool registered;\\n    }\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    // Override Ownable functions to match interface\\n    function owner()\\n        public\\n        view\\n        override(IOdosRouterV2, Ownable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    function transferOwnership(\\n        address newOwner\\n    ) public override(IOdosRouterV2, Ownable) {\\n        super.transferOwnership(newOwner);\\n    }\\n\\n    function renounceOwnership() public override(IOdosRouterV2, Ownable) {\\n        super.renounceOwnership();\\n    }\\n\\n    /**\\n     * @notice Sets the exchange rate between two tokens\\n     * @param token1 First token address\\n     * @param token2 Second token address\\n     * @param rate Exchange rate (1 token1 = rate token2)\\n     */\\n    function setExchangeRate(\\n        address token1,\\n        address token2,\\n        uint256 rate\\n    ) external onlyOwner {\\n        exchangeRates[token1][token2] = rate;\\n    }\\n\\n    /**\\n     * @notice Main swap function implementation\\n     * @param tokenInfo Swap token information\\n     * @param pathDefinition Not used in mock\\n     * @param executor Not used in mock\\n     * @param referralCode Referral code\\n     */\\n    function swap(\\n        swapTokenInfo calldata tokenInfo,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external payable override returns (uint256 amountOut) {\\n        // Transfer input tokens from sender to this contract\\n        IERC20(tokenInfo.inputToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenInfo.inputAmount\\n        );\\n\\n        // Calculate output amount based on exchange rate\\n        uint256 rate = exchangeRates[tokenInfo.inputToken][\\n            tokenInfo.outputToken\\n        ];\\n        require(rate > 0, \\\"Exchange rate not set\\\");\\n\\n        amountOut = (tokenInfo.inputAmount * rate) / 1e18;\\n        require(amountOut >= tokenInfo.outputMin, \\\"Insufficient output amount\\\");\\n\\n        // Transfer output tokens to receiver\\n        IERC20(tokenInfo.outputToken).safeTransfer(\\n            tokenInfo.outputReceiver,\\n            amountOut\\n        );\\n\\n        emit Swap(\\n            msg.sender,\\n            tokenInfo.inputAmount,\\n            tokenInfo.inputToken,\\n            amountOut,\\n            tokenInfo.outputToken,\\n            0, // slippage not implemented in mock\\n            referralCode\\n        );\\n    }\\n\\n    /**\\n     * @notice Register a referral code with fee and beneficiary\\n     */\\n    function registerReferralCode(\\n        uint32 _referralCode,\\n        uint64 _referralFee,\\n        address _beneficiary\\n    ) external override {\\n        referrals[_referralCode] = ReferralInfo({\\n            referralFee: _referralFee,\\n            beneficiary: _beneficiary,\\n            registered: true\\n        });\\n    }\\n\\n    /**\\n     * @notice Get referral information\\n     */\\n    function referralLookup(\\n        uint32 code\\n    )\\n        external\\n        view\\n        override\\n        returns (uint64 referralFee, address beneficiary, bool registered)\\n    {\\n        ReferralInfo memory info = referrals[code];\\n        return (info.referralFee, info.beneficiary, info.registered);\\n    }\\n\\n    /**\\n     * @notice Set swap multi fee\\n     */\\n    function setSwapMultiFee(\\n        uint256 _swapMultiFee\\n    ) external override onlyOwner {\\n        swapMultiFee = _swapMultiFee;\\n    }\\n\\n    // Required interface implementations with minimal functionality\\n    function swapMulti(\\n        inputTokenInfo[] calldata,\\n        outputTokenInfo[] calldata,\\n        uint256,\\n        bytes calldata,\\n        address,\\n        uint32\\n    ) external payable override returns (uint256[] memory) {\\n        revert(\\\"Not implemented in mock\\\");\\n    }\\n\\n    function swapPermit2(\\n        permit2Info calldata,\\n        swapTokenInfo calldata,\\n        bytes calldata,\\n        address,\\n        uint32\\n    ) external override returns (uint256) {\\n        revert(\\\"Not implemented in mock\\\");\\n    }\\n\\n    function swapMultiPermit2(\\n        permit2Info calldata,\\n        inputTokenInfo[] calldata,\\n        outputTokenInfo[] calldata,\\n        uint256,\\n        bytes calldata,\\n        address,\\n        uint32\\n    ) external payable override returns (uint256[] memory) {\\n        revert(\\\"Not implemented in mock\\\");\\n    }\\n\\n    function swapRouterFunds(\\n        inputTokenInfo[] calldata,\\n        outputTokenInfo[] calldata,\\n        uint256,\\n        bytes calldata,\\n        address\\n    ) external override returns (uint256[] memory) {\\n        revert(\\\"Not implemented in mock\\\");\\n    }\\n\\n    function transferRouterFunds(\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address dest\\n    ) external override onlyOwner {\\n        require(tokens.length == amounts.length, \\\"Length mismatch\\\");\\n        for (uint i = 0; i < tokens.length; i++) {\\n            IERC20(tokens[i]).safeTransfer(dest, amounts[i]);\\n        }\\n    }\\n\\n    function writeAddressList(address[] calldata) external override {\\n        revert(\\\"Not implemented in mock\\\");\\n    }\\n\\n    function addressList(uint256) external pure override returns (address) {\\n        return address(0);\\n    }\\n\\n    function swapCompact() external payable override returns (uint256) {\\n        revert(\\\"Not implemented in mock\\\");\\n    }\\n\\n    function swapMultiCompact()\\n        external\\n        payable\\n        override\\n        returns (uint256[] memory)\\n    {\\n        revert(\\\"Not implemented in mock\\\");\\n    }\\n\\n    receive() external payable override {}\\n}\\n\",\"keccak256\":\"0x0a513186c2c5de6af5cb74142e63ffd4318db4a800975a245fb2313bc9fc7546\",\"license\":\"GNU AGPLv3\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6111eb806100a56000396000f3fe6080604052600436106101395760003560e01c80637bf2d6d4116100ab5780639286b93d1161006f5780639286b93d14610362578063b810fb4314610382578063e10895f9146103a3578063e7d3fc6014610445578063f2fde38b1461045b578063f827065e1461047b57600080fd5b80637bf2d6d4146102f257806383bd37f91461030057806384a7f3dd1461030857806387b621b5146103105780638da5cb5b1461033057600080fd5b80633b635ce4116100fd5780633b635ce41461024d5780634886c6751461026e578063503fa44f146102855780636c082c131461026e578063715018a6146102bd578063782aaeea146102d257600080fd5b8063080c25b314610145578063174da6211461016e57806328be42f4146101905780632b8845ef146101ab5780633596f9a21461022d57600080fd5b3661014057005b600080fd5b610158610153366004610b1f565b6104f6565b6040516101659190610c07565b60405180910390f35b34801561017a57600080fd5b5061018e610189366004610c8f565b610519565b005b34801561019c57600080fd5b50610158610153366004610d0f565b3480156101b757600080fd5b506101fe6101c6366004610dc2565b6003602052600090815260409020546001600160401b03811690600160401b81046001600160a01b031690600160e01b900460ff1683565b604080516001600160401b0390941684526001600160a01b039092166020840152151590820152606001610165565b34801561023957600080fd5b5061018e610248366004610de4565b6105db565b61026061025b366004610e37565b6105f3565b604051908152602001610165565b34801561027a57600080fd5b50610260620f424081565b34801561029157600080fd5b506102606102a0366004610ea4565b600160209081526000928352604080842090915290825290205481565b3480156102c957600080fd5b5061018e6107fc565b3480156102de57600080fd5b5061018e6102ed366004610ed7565b610806565b610158610153366004610f13565b61026061083a565b6101586104f6565b34801561031c57600080fd5b5061026061032b366004610fd6565b61083a565b34801561033c57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610165565b34801561036e57600080fd5b5061018e61037d366004611075565b610854565b34801561038e57600080fd5b5061034a61039d366004611075565b50600090565b3480156103af57600080fd5b5061018e6103be36600461108e565b604080516060810182526001600160401b0393841681526001600160a01b039283166020808301918252600183850190815263ffffffff909716600090815260039091529290922090518154925195511515600160e01b0260ff60e01b1996909416600160401b026001600160e01b03199093169416939093171792909216919091179055565b34801561045157600080fd5b5061026060025481565b34801561046757600080fd5b5061018e6104763660046110df565b610861565b34801561048757600080fd5b506101fe610496366004610dc2565b63ffffffff16600090815260036020908152604091829020825160608101845290546001600160401b038116808352600160401b82046001600160a01b0316938301849052600160e01b90910460ff161515919093018190529192909190565b606060405162461bcd60e51b8152600401610510906110fa565b60405180910390fd5b61052161086d565b8382146105625760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610510565b60005b848110156105d3576105c18285858481811061058357610583611131565b9050602002013588888581811061059c5761059c611131565b90506020020160208101906105b191906110df565b6001600160a01b0316919061089a565b806105cb8161115d565b915050610565565b505050505050565b60405162461bcd60e51b8152600401610510906110fa565b600061061c33306020890180359061060b908b6110df565b6001600160a01b03169291906108fe565b600060018161062e60208a018a6110df565b6001600160a01b03168152602081019190915260400160009081209061065a60808a0160608b016110df565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050600081116106c55760405162461bcd60e51b8152602060048201526015602482015274115e18da185b99d9481c985d19481b9bdd081cd95d605a1b6044820152606401610510565b670de0b6b3a76400006106dc8260208a0135611176565b6106e69190611193565b91508660a0013582101561073c5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e740000000000006044820152606401610510565b61076061074f60e0890160c08a016110df565b836105b160808b0160608c016110df565b7f823eaf01002d7353fbcadb2ea3305cc46fa35d799cb0914846d185ac06f8ad053360208901803590610793908b6110df565b856107a460808d0160608e016110df565b604080516001600160a01b03968716815260208101959095529285169284019290925260608301529091166080820152600060a082015263ffffffff851660c082015260e00160405180910390a15095945050505050565b61080461093d565b565b61080e61086d565b6001600160a01b0392831660009081526001602090815260408083209490951682529290925291902055565b600060405162461bcd60e51b8152600401610510906110fa565b61085c61086d565b600255565b61086a8161094f565b50565b6000546001600160a01b031633146108045760405163118cdaa760e01b8152336004820152602401610510565b6040516001600160a01b038381166024830152604482018390526108f991859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061098a565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526109379186918216906323b872dd906084016108c7565b50505050565b61094561086d565b61080460006109fb565b61095761086d565b6001600160a01b03811661098157604051631e4fbdf760e01b815260006004820152602401610510565b61086a816109fb565b600080602060008451602086016000885af1806109ad576040513d6000823e3d81fd5b50506000513d915081156109c55780600114156109d2565b6001600160a01b0384163b155b1561093757604051635274afe760e01b81526001600160a01b0385166004820152602401610510565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060808284031215610a5d57600080fd5b50919050565b60008083601f840112610a7557600080fd5b5081356001600160401b03811115610a8c57600080fd5b602083019150836020606083028501011115610aa757600080fd5b9250929050565b60008083601f840112610ac057600080fd5b5081356001600160401b03811115610ad757600080fd5b602083019150836020828501011115610aa757600080fd5b80356001600160a01b0381168114610b0657600080fd5b919050565b803563ffffffff81168114610b0657600080fd5b60008060008060008060008060008060e08b8d031215610b3e57600080fd5b8a356001600160401b0380821115610b5557600080fd5b610b618e838f01610a4b565b9b5060208d0135915080821115610b7757600080fd5b610b838e838f01610a63565b909b50995060408d0135915080821115610b9c57600080fd5b610ba88e838f01610a63565b909950975060608d0135965060808d0135915080821115610bc857600080fd5b50610bd58d828e01610aae565b9095509350610be8905060a08c01610aef565b9150610bf660c08c01610b0b565b90509295989b9194979a5092959850565b6020808252825182820181905260009190848201906040850190845b81811015610c3f57835183529284019291840191600101610c23565b50909695505050505050565b60008083601f840112610c5d57600080fd5b5081356001600160401b03811115610c7457600080fd5b6020830191508360208260051b8501011115610aa757600080fd5b600080600080600060608688031215610ca757600080fd5b85356001600160401b0380821115610cbe57600080fd5b610cca89838a01610c4b565b90975095506020880135915080821115610ce357600080fd5b50610cf088828901610c4b565b9094509250610d03905060408701610aef565b90509295509295909350565b60008060008060008060008060a0898b031215610d2b57600080fd5b88356001600160401b0380821115610d4257600080fd5b610d4e8c838d01610a63565b909a50985060208b0135915080821115610d6757600080fd5b610d738c838d01610a63565b909850965060408b0135955060608b0135915080821115610d9357600080fd5b50610da08b828c01610aae565b9094509250610db3905060808a01610aef565b90509295985092959890939650565b600060208284031215610dd457600080fd5b610ddd82610b0b565b9392505050565b60008060208385031215610df757600080fd5b82356001600160401b03811115610e0d57600080fd5b610e1985828601610c4b565b90969095509350505050565b600060e08284031215610a5d57600080fd5b60008060008060006101408688031215610e5057600080fd5b610e5a8787610e25565b945060e08601356001600160401b03811115610e7557600080fd5b610e8188828901610aae565b9095509350610e9590506101008701610aef565b9150610d036101208701610b0b565b60008060408385031215610eb757600080fd5b610ec083610aef565b9150610ece60208401610aef565b90509250929050565b600080600060608486031215610eec57600080fd5b610ef584610aef565b9250610f0360208501610aef565b9150604084013590509250925092565b600080600080600080600080600060c08a8c031215610f3157600080fd5b89356001600160401b0380821115610f4857600080fd5b610f548d838e01610a63565b909b50995060208c0135915080821115610f6d57600080fd5b610f798d838e01610a63565b909950975060408c0135965060608c0135915080821115610f9957600080fd5b50610fa68c828d01610aae565b9095509350610fb9905060808b01610aef565b9150610fc760a08b01610b0b565b90509295985092959850929598565b6000806000806000806101608789031215610ff057600080fd5b86356001600160401b038082111561100757600080fd5b6110138a838b01610a4b565b97506110228a60208b01610e25565b965061010089013591508082111561103957600080fd5b5061104689828a01610aae565b909550935061105a90506101208801610aef565b91506110696101408801610b0b565b90509295509295509295565b60006020828403121561108757600080fd5b5035919050565b6000806000606084860312156110a357600080fd5b6110ac84610b0b565b925060208401356001600160401b03811681146110c857600080fd5b91506110d660408501610aef565b90509250925092565b6000602082840312156110f157600080fd5b610ddd82610aef565b60208082526017908201527f4e6f7420696d706c656d656e74656420696e206d6f636b000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161116f5761116f611147565b5060010190565b808202811582820484141761118d5761118d611147565b92915050565b6000826111b057634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220972b73ccb51eee550f16d1113e97f2a1c3ed9ce0859385cd6a7090f316538af764736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Allows setting exchange rates between tokens and simulates swaps",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "setExchangeRate(address,address,uint256)": {
        "params": {
          "rate": "Exchange rate (1 token1 = rate token2)",
          "token1": "First token address",
          "token2": "Second token address"
        }
      },
      "swap((address,uint256,address,address,uint256,uint256,address),bytes,address,uint32)": {
        "params": {
          "executor": "Not used in mock",
          "pathDefinition": "Not used in mock",
          "referralCode": "Referral code",
          "tokenInfo": "Swap token information"
        }
      }
    },
    "title": "OdosRouterV2Mock",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "referralLookup(uint32)": {
        "notice": "Get referral information"
      },
      "registerReferralCode(uint32,uint64,address)": {
        "notice": "Register a referral code with fee and beneficiary"
      },
      "setExchangeRate(address,address,uint256)": {
        "notice": "Sets the exchange rate between two tokens"
      },
      "setSwapMultiFee(uint256)": {
        "notice": "Set swap multi fee"
      },
      "swap((address,uint256,address,address,uint256,uint256,address),bytes,address,uint32)": {
        "notice": "Main swap function implementation"
      }
    },
    "notice": "Mock implementation of OdosRouterV2 for testing purposes",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/testing/odos/OdosRouterV2Mock.sol:OdosRouterV2Mock",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6289,
        "contract": "contracts/testing/odos/OdosRouterV2Mock.sol:OdosRouterV2Mock",
        "label": "exchangeRates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6297,
        "contract": "contracts/testing/odos/OdosRouterV2Mock.sol:OdosRouterV2Mock",
        "label": "swapMultiFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6302,
        "contract": "contracts/testing/odos/OdosRouterV2Mock.sol:OdosRouterV2Mock",
        "label": "referrals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint32,t_struct(ReferralInfo)6309_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(ReferralInfo)6309_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct OdosRouterV2Mock.ReferralInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ReferralInfo)6309_storage"
      },
      "t_struct(ReferralInfo)6309_storage": {
        "encoding": "inplace",
        "label": "struct OdosRouterV2Mock.ReferralInfo",
        "members": [
          {
            "astId": 6304,
            "contract": "contracts/testing/odos/OdosRouterV2Mock.sol:OdosRouterV2Mock",
            "label": "referralFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6306,
            "contract": "contracts/testing/odos/OdosRouterV2Mock.sol:OdosRouterV2Mock",
            "label": "beneficiary",
            "offset": 8,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6308,
            "contract": "contracts/testing/odos/OdosRouterV2Mock.sol:OdosRouterV2Mock",
            "label": "registered",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}