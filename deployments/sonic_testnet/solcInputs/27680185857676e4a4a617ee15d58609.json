{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC4626.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC-4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/vaults/dstake/DStakeRouterDLend.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { IDStakeRouter } from \"./interfaces/IDStakeRouter.sol\";\nimport { IDStableConversionAdapter } from \"./interfaces/IDStableConversionAdapter.sol\";\nimport { IDStakeCollateralVault } from \"./interfaces/IDStakeCollateralVault.sol\";\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\n\n/**\n * @title DStakeRouterDLend\n * @notice Orchestrates deposits, withdrawals, and asset exchanges for a DStakeToken vault.\n * @dev Interacts with the DStakeToken, DStakeCollateralVault, and various IDStableConversionAdapters.\n *      This contract is non-upgradeable but replaceable via DStakeToken governance.\n *      Relies on the associated DStakeToken for role management.\n */\ncontract DStakeRouterDLend is IDStakeRouter, AccessControl {\n    using SafeERC20 for IERC20;\n\n    // --- Errors ---\n    error ZeroAddress();\n    error AdapterNotFound(address vaultAsset);\n    error ZeroPreviewWithdrawAmount(address vaultAsset);\n    error InsufficientDStableFromAdapter(address vaultAsset, uint256 expected, uint256 actual);\n    error VaultAssetManagedByDifferentAdapter(address vaultAsset, address existingAdapter);\n    error ZeroInputDStableValue(address fromAsset, uint256 fromAmount);\n    error AdapterAssetMismatch(address adapter, address expectedAsset, address actualAsset);\n    error SlippageCheckFailed(address toAsset, uint256 calculatedAmount, uint256 minAmount);\n    error InconsistentState(string message);\n\n    // --- Roles ---\n    bytes32 public constant DSTAKE_TOKEN_ROLE = keccak256(\"DSTAKE_TOKEN_ROLE\");\n    bytes32 public constant COLLATERAL_EXCHANGER_ROLE = keccak256(\"COLLATERAL_EXCHANGER_ROLE\");\n\n    // --- State ---\n    address public immutable dStakeToken; // The DStakeToken this router serves\n    IDStakeCollateralVault public immutable collateralVault; // The DStakeCollateralVault this router serves\n    address public immutable dStable; // The underlying dSTABLE asset address\n\n    // Governance-configurable risk parameters\n    uint256 public dustTolerance = 1; // 1 wei default tolerance\n\n    mapping(address => address) public vaultAssetToAdapter; // vaultAsset => adapterAddress\n    address public defaultDepositVaultAsset; // Default strategy for deposits\n\n    // Struct used to pack local variables in functions prone to \"stack too deep\" compiler errors\n    struct ExchangeLocals {\n        address fromAdapterAddress;\n        address toAdapterAddress;\n        IDStableConversionAdapter fromAdapter;\n        IDStableConversionAdapter toAdapter;\n        uint256 dStableValueIn;\n        uint256 calculatedToVaultAssetAmount;\n    }\n\n    // --- Constructor ---\n    constructor(address _dStakeToken, address _collateralVault) {\n        if (_dStakeToken == address(0) || _collateralVault == address(0)) {\n            revert ZeroAddress();\n        }\n        dStakeToken = _dStakeToken;\n        collateralVault = IDStakeCollateralVault(_collateralVault);\n        dStable = collateralVault.dStable(); // Fetch dStable address from vault\n        if (dStable == address(0)) {\n            revert ZeroAddress();\n        }\n\n        // Setup roles\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(DSTAKE_TOKEN_ROLE, _dStakeToken);\n    }\n\n    // --- External Functions (IDStakeRouter Interface) ---\n\n    /**\n     * @inheritdoc IDStakeRouter\n     */\n    function deposit(uint256 dStableAmount) external override onlyRole(DSTAKE_TOKEN_ROLE) {\n        address adapterAddress = vaultAssetToAdapter[defaultDepositVaultAsset];\n        if (adapterAddress == address(0)) {\n            revert AdapterNotFound(defaultDepositVaultAsset);\n        }\n\n        (address vaultAssetExpected, uint256 expectedShares) = IDStableConversionAdapter(adapterAddress)\n            .previewConvertToVaultAsset(dStableAmount);\n\n        uint256 mintedShares = _executeDeposit(adapterAddress, vaultAssetExpected, dStableAmount);\n\n        if (mintedShares < expectedShares) {\n            revert SlippageCheckFailed(vaultAssetExpected, mintedShares, expectedShares);\n        }\n\n        emit RouterDeposit(adapterAddress, vaultAssetExpected, msg.sender, mintedShares, dStableAmount);\n    }\n\n    /**\n     * @dev Performs the actual pull-approve-convert sequence and returns the number of shares\n     *      minted to the collateral vault.\n     * @param adapterAddress The adapter to use for conversion.\n     * @param vaultAssetExpected The vault asset that the adapter should mint.\n     * @param dStableAmount The amount of dStable being deposited.\n     * @return mintedShares The number of vault asset shares minted.\n     */\n    function _executeDeposit(\n        address adapterAddress,\n        address vaultAssetExpected,\n        uint256 dStableAmount\n    ) private returns (uint256 mintedShares) {\n        uint256 beforeBal = IERC20(vaultAssetExpected).balanceOf(address(collateralVault));\n\n        // Pull dStable from caller (DStakeToken)\n        IERC20(dStable).safeTransferFrom(msg.sender, address(this), dStableAmount);\n\n        // Approve adapter to spend dStable\n        IERC20(dStable).forceApprove(adapterAddress, dStableAmount);\n\n        // Convert dStable to vault asset (minted directly to collateral vault)\n        (address vaultAssetActual, uint256 reportedShares) = IDStableConversionAdapter(adapterAddress)\n            .convertToVaultAsset(dStableAmount);\n\n        if (vaultAssetActual != vaultAssetExpected) {\n            revert AdapterAssetMismatch(adapterAddress, vaultAssetExpected, vaultAssetActual);\n        }\n\n        mintedShares = IERC20(vaultAssetExpected).balanceOf(address(collateralVault)) - beforeBal;\n\n        if (mintedShares != reportedShares) {\n            revert InconsistentState(\"Adapter mis-reported shares\");\n        }\n    }\n\n    /**\n     * @inheritdoc IDStakeRouter\n     */\n    function withdraw(\n        uint256 dStableAmount,\n        address receiver,\n        address owner\n    ) external override onlyRole(DSTAKE_TOKEN_ROLE) {\n        address adapterAddress = vaultAssetToAdapter[defaultDepositVaultAsset];\n        if (adapterAddress == address(0)) {\n            revert AdapterNotFound(defaultDepositVaultAsset);\n        }\n        IDStableConversionAdapter adapter = IDStableConversionAdapter(adapterAddress);\n\n        // 1. Determine vault asset and required amount\n        address vaultAsset = adapter.vaultAsset();\n        // Use previewConvertFromVaultAsset to get the required vaultAssetAmount for the target dStableAmount\n        uint256 vaultAssetAmount = IERC4626(vaultAsset).previewWithdraw(dStableAmount);\n        if (vaultAssetAmount == 0) revert ZeroPreviewWithdrawAmount(vaultAsset);\n\n        // 2. Pull vaultAsset from collateral vault\n        collateralVault.sendAsset(vaultAsset, vaultAssetAmount, address(this));\n\n        // 3. Approve adapter (set required allowance using standard approve)\n        IERC20(vaultAsset).forceApprove(adapterAddress, vaultAssetAmount);\n\n        // 4. Call adapter to convert and send dStable to receiver\n        // Temporarily transfer to this contract, then forward to receiver if needed\n        uint256 receivedDStable = adapter.convertFromVaultAsset(vaultAssetAmount);\n\n        // Sanity check: Ensure adapter returned at least the requested amount\n        if (receivedDStable < dStableAmount) {\n            revert InsufficientDStableFromAdapter(vaultAsset, dStableAmount, receivedDStable);\n        }\n\n        // 5. Transfer ONLY the requested amount to the user\n        IERC20(dStable).safeTransfer(receiver, dStableAmount);\n\n        // 6. If adapter over-delivered, immediately convert the surplus dStable\n        //    back into vault-asset shares so the value is reflected in\n        //    totalAssets() for all shareholders.\n        uint256 surplus = receivedDStable - dStableAmount;\n        if (surplus > 0) {\n            // Give the adapter allowance to pull the surplus\n            IERC20(dStable).forceApprove(adapterAddress, surplus);\n\n            // Attempt to recycle surplus; on failure hold it in the router\n            try adapter.convertToVaultAsset(surplus) returns (address mintedAsset, uint256 /* mintedAmount */) {\n                // Sanity: adapter must mint the same asset we just redeemed from\n                if (mintedAsset != vaultAsset) {\n                    revert AdapterAssetMismatch(adapterAddress, vaultAsset, mintedAsset);\n                }\n            } catch {\n                // Clear approval in case of revert and keep surplus inside router\n                IERC20(dStable).approve(adapterAddress, 0);\n                emit SurplusHeld(surplus);\n            }\n            // If success: shares minted directly to collateralVault; surplus value captured\n        }\n\n        emit Withdrawn(vaultAsset, vaultAssetAmount, dStableAmount, owner, receiver);\n    }\n\n    // --- External Functions (Exchange/Rebalance) ---\n\n    /**\n     * @notice Exchanges `fromVaultAssetAmount` of one vault asset for another via their adapters.\n     * @dev Uses dSTABLE as the intermediary asset. Requires COLLATERAL_EXCHANGER_ROLE.\n     * @param fromVaultAsset The address of the asset to sell.\n     * @param toVaultAsset The address of the asset to buy.\n     * @param fromVaultAssetAmount The amount of the `fromVaultAsset` to exchange.\n     * @param minToVaultAssetAmount The minimum amount of `toVaultAsset` the solver is willing to accept.\n     */\n    function exchangeAssetsUsingAdapters(\n        address fromVaultAsset,\n        address toVaultAsset,\n        uint256 fromVaultAssetAmount,\n        uint256 minToVaultAssetAmount\n    ) external onlyRole(COLLATERAL_EXCHANGER_ROLE) {\n        address fromAdapterAddress = vaultAssetToAdapter[fromVaultAsset];\n        address toAdapterAddress = vaultAssetToAdapter[toVaultAsset];\n        if (fromAdapterAddress == address(0)) revert AdapterNotFound(fromVaultAsset);\n        if (toAdapterAddress == address(0)) revert AdapterNotFound(toVaultAsset);\n\n        IDStableConversionAdapter fromAdapter = IDStableConversionAdapter(fromAdapterAddress);\n        IDStableConversionAdapter toAdapter = IDStableConversionAdapter(toAdapterAddress);\n\n        // 1. Get assets and calculate equivalent dStable amount\n        uint256 dStableAmountEquivalent = fromAdapter.previewConvertFromVaultAsset(fromVaultAssetAmount);\n\n        // 2. Pull fromVaultAsset from collateral vault\n        collateralVault.sendAsset(fromVaultAsset, fromVaultAssetAmount, address(this));\n\n        // 3. Approve fromAdapter (use forceApprove for external vault assets) & Convert fromVaultAsset -> dStable (sent to this router)\n        IERC20(fromVaultAsset).forceApprove(fromAdapterAddress, fromVaultAssetAmount);\n        uint256 receivedDStable = fromAdapter.convertFromVaultAsset(fromVaultAssetAmount);\n\n        // 4. Approve toAdapter & Convert dStable -> toVaultAsset (sent to collateralVault)\n        IERC20(dStable).forceApprove(toAdapterAddress, receivedDStable);\n        (address actualToVaultAsset, uint256 resultingToVaultAssetAmount) = toAdapter.convertToVaultAsset(\n            receivedDStable\n        );\n        if (actualToVaultAsset != toVaultAsset) {\n            revert AdapterAssetMismatch(toAdapterAddress, toVaultAsset, actualToVaultAsset);\n        }\n        // Slippage control: ensure output meets minimum requirement\n        if (resultingToVaultAssetAmount < minToVaultAssetAmount) {\n            revert SlippageCheckFailed(toVaultAsset, resultingToVaultAssetAmount, minToVaultAssetAmount);\n        }\n\n        // --- Underlying value parity check ---\n        uint256 resultingDStableEquivalent = toAdapter.previewConvertFromVaultAsset(resultingToVaultAssetAmount);\n\n        // Rely on Solidity 0.8 checked arithmetic: if `dustTolerance` is greater than\n        // `dStableAmountEquivalent`, the subtraction will underflow and the transaction\n        // will revert automatically. This saves gas compared to a ternary guard.\n        uint256 minRequiredDStable = dStableAmountEquivalent - dustTolerance;\n\n        if (resultingDStableEquivalent < minRequiredDStable) {\n            revert SlippageCheckFailed(dStable, resultingDStableEquivalent, minRequiredDStable);\n        }\n\n        emit Exchanged(\n            fromVaultAsset,\n            toVaultAsset,\n            fromVaultAssetAmount,\n            resultingToVaultAssetAmount,\n            dStableAmountEquivalent,\n            msg.sender\n        );\n    }\n\n    /**\n     * @notice Exchanges assets between the collateral vault and an external solver.\n     * @dev Pulls `fromVaultAsset` from the solver (`msg.sender`) and sends `toVaultAsset` from the vault to the solver.\n     *      Requires COLLATERAL_EXCHANGER_ROLE.\n     * @param fromVaultAsset The address of the asset the solver is providing.\n     * @param toVaultAsset The address of the asset the solver will receive from the vault.\n     * @param fromVaultAssetAmount The amount of `fromVaultAsset` provided by the solver.\n     * @param minToVaultAssetAmount The minimum amount of `toVaultAsset` the solver is willing to accept.\n     */\n    function exchangeAssets(\n        address fromVaultAsset,\n        address toVaultAsset,\n        uint256 fromVaultAssetAmount,\n        uint256 minToVaultAssetAmount\n    ) external onlyRole(COLLATERAL_EXCHANGER_ROLE) {\n        if (fromVaultAssetAmount == 0) {\n            revert InconsistentState(\"Input amount cannot be zero\");\n        }\n        if (fromVaultAsset == address(0) || toVaultAsset == address(0)) {\n            revert ZeroAddress();\n        }\n\n        ExchangeLocals memory locals;\n\n        // Resolve adapters\n        locals.fromAdapterAddress = vaultAssetToAdapter[fromVaultAsset];\n        locals.toAdapterAddress = vaultAssetToAdapter[toVaultAsset];\n\n        if (locals.fromAdapterAddress == address(0)) revert AdapterNotFound(fromVaultAsset);\n        if (locals.toAdapterAddress == address(0)) revert AdapterNotFound(toVaultAsset);\n\n        locals.fromAdapter = IDStableConversionAdapter(locals.fromAdapterAddress);\n        locals.toAdapter = IDStableConversionAdapter(locals.toAdapterAddress);\n\n        // Calculate dStable received for the input asset\n        locals.dStableValueIn = locals.fromAdapter.previewConvertFromVaultAsset(fromVaultAssetAmount);\n        if (locals.dStableValueIn == 0) {\n            revert ZeroInputDStableValue(fromVaultAsset, fromVaultAssetAmount);\n        }\n\n        // Calculate expected output vault asset amount\n        (address expectedToAsset, uint256 tmpToAmount) = locals.toAdapter.previewConvertToVaultAsset(\n            locals.dStableValueIn\n        );\n\n        if (expectedToAsset != toVaultAsset) {\n            revert AdapterAssetMismatch(locals.toAdapterAddress, toVaultAsset, expectedToAsset);\n        }\n\n        locals.calculatedToVaultAssetAmount = tmpToAmount;\n\n        // Slippage check\n        if (locals.calculatedToVaultAssetAmount < minToVaultAssetAmount) {\n            revert SlippageCheckFailed(toVaultAsset, locals.calculatedToVaultAssetAmount, minToVaultAssetAmount);\n        }\n\n        // --- Asset movements ---\n\n        // 1. Pull `fromVaultAsset` from solver to this contract\n        IERC20(fromVaultAsset).safeTransferFrom(msg.sender, address(this), fromVaultAssetAmount);\n\n        // 2. Transfer the asset into the collateral vault\n        IERC20(fromVaultAsset).safeTransfer(address(collateralVault), fromVaultAssetAmount);\n\n        // 3. Send the calculated amount of `toVaultAsset` to the solver\n        collateralVault.sendAsset(toVaultAsset, locals.calculatedToVaultAssetAmount, msg.sender);\n\n        emit Exchanged(\n            fromVaultAsset,\n            toVaultAsset,\n            fromVaultAssetAmount,\n            locals.calculatedToVaultAssetAmount,\n            locals.dStableValueIn,\n            msg.sender\n        );\n    }\n\n    // --- External Functions (Governance - Managed by Admin) ---\n\n    /**\n     * @notice Adds or updates a conversion adapter for a given vault asset.\n     * @dev Only callable by an address with DEFAULT_ADMIN_ROLE.\n     * @param vaultAsset The address of the vault asset.\n     * @param adapterAddress The address of the new adapter contract.\n     */\n    function addAdapter(address vaultAsset, address adapterAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (adapterAddress == address(0) || vaultAsset == address(0)) {\n            revert ZeroAddress();\n        }\n        address adapterVaultAsset = IDStableConversionAdapter(adapterAddress).vaultAsset();\n        if (adapterVaultAsset != vaultAsset) revert AdapterAssetMismatch(adapterAddress, vaultAsset, adapterVaultAsset);\n        if (vaultAssetToAdapter[vaultAsset] != address(0) && vaultAssetToAdapter[vaultAsset] != adapterAddress) {\n            revert VaultAssetManagedByDifferentAdapter(vaultAsset, vaultAssetToAdapter[vaultAsset]);\n        }\n        vaultAssetToAdapter[vaultAsset] = adapterAddress;\n\n        // Inform the collateral vault of the new supported asset list (no-op if already added)\n        try collateralVault.addSupportedAsset(vaultAsset) {} catch {}\n\n        emit AdapterSet(vaultAsset, adapterAddress);\n    }\n\n    /**\n     * @notice Removes a conversion adapter for a given vault asset.\n     * @dev Only callable by an address with DEFAULT_ADMIN_ROLE.\n     * @dev Does not automatically migrate funds. Ensure assets managed by this adapter are zero\n     *      in the collateral vault or migrated via exchangeAssets before calling.\n     * @param vaultAsset The address of the vault asset to remove.\n     */\n    function removeAdapter(address vaultAsset) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        address adapterAddress = vaultAssetToAdapter[vaultAsset];\n        if (adapterAddress == address(0)) {\n            revert AdapterNotFound(vaultAsset);\n        }\n        delete vaultAssetToAdapter[vaultAsset];\n\n        // Inform the collateral vault to remove supported asset.\n        collateralVault.removeSupportedAsset(vaultAsset);\n\n        emit AdapterRemoved(vaultAsset, adapterAddress);\n    }\n\n    /**\n     * @notice Sets the default vault asset to use for new deposits.\n     * @dev Only callable by an address with DEFAULT_ADMIN_ROLE.\n     * @param vaultAsset The address of the vault asset to set as default.\n     */\n    function setDefaultDepositVaultAsset(address vaultAsset) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (vaultAssetToAdapter[vaultAsset] == address(0)) {\n            revert AdapterNotFound(vaultAsset);\n        }\n        defaultDepositVaultAsset = vaultAsset;\n        emit DefaultDepositVaultAssetSet(vaultAsset);\n    }\n\n    // --- Events ---\n    event RouterDeposit(\n        address indexed adapter,\n        address indexed vaultAsset,\n        address indexed dStakeToken,\n        uint256 vaultAssetAmount,\n        uint256 dStableAmount\n    );\n    event Withdrawn(\n        address indexed vaultAsset,\n        uint256 vaultAssetAmount,\n        uint256 dStableAmount,\n        address owner,\n        address receiver\n    );\n    event Exchanged(\n        address indexed fromAsset,\n        address indexed toAsset,\n        uint256 fromAssetAmount,\n        uint256 toAssetAmount,\n        uint256 dStableAmountEquivalent,\n        address indexed exchanger\n    );\n    event AdapterSet(address indexed vaultAsset, address adapterAddress);\n    event AdapterRemoved(address indexed vaultAsset, address adapterAddress);\n    event DefaultDepositVaultAssetSet(address indexed vaultAsset);\n    event DustToleranceSet(uint256 newDustTolerance);\n    event SurplusHeld(uint256 amount);\n    event SurplusSwept(uint256 amount, address vaultAsset);\n\n    // --- Governance setters ---\n\n    /**\n     * @notice Updates the `dustTolerance` used for value-parity checks.\n     * @dev Only callable by DEFAULT_ADMIN_ROLE.\n     * @param _dustTolerance The new tolerance value in wei of dStable.\n     */\n    function setDustTolerance(uint256 _dustTolerance) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        dustTolerance = _dustTolerance;\n        emit DustToleranceSet(_dustTolerance);\n    }\n\n    /**\n     * @notice Sweeps any dSTABLE surplus held by the router back into the default vault asset.\n     * @param maxAmount Maximum amount of dSTABLE to sweep (use 0 to sweep full balance).\n     */\n    function sweepSurplus(uint256 maxAmount) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 balance = IERC20(dStable).balanceOf(address(this));\n        if (balance == 0) revert ZeroInputDStableValue(dStable, 0);\n\n        uint256 amountToSweep = (maxAmount == 0 || maxAmount > balance) ? balance : maxAmount;\n\n        address adapterAddress = vaultAssetToAdapter[defaultDepositVaultAsset];\n        if (adapterAddress == address(0)) revert AdapterNotFound(defaultDepositVaultAsset);\n\n        IDStableConversionAdapter adapter = IDStableConversionAdapter(adapterAddress);\n        address vaultAsset = adapter.vaultAsset();\n\n        IERC20(dStable).approve(adapterAddress, amountToSweep);\n        (address mintedAsset, ) = adapter.convertToVaultAsset(amountToSweep);\n\n        if (mintedAsset != vaultAsset) {\n            revert AdapterAssetMismatch(adapterAddress, vaultAsset, mintedAsset);\n        }\n\n        emit SurplusSwept(amountToSweep, mintedAsset);\n    }\n}\n"
    },
    "contracts/vaults/dstake/interfaces/IDStableConversionAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IDStableConversionAdapter Interface\n * @notice Interface for contracts that handle the conversion between the core dStable asset\n *         and a specific yield-bearing or convertible ERC20 token (`vault asset`), as well as\n *         valuing that `vault asset` in terms of the dStable asset.\n * @dev Implementations interact with specific protocols (lending pools, DEX LPs, wrappers, etc.).\n */\ninterface IDStableConversionAdapter {\n    /**\n     * @notice Converts a specified amount of the dStable asset into the specific `vaultAsset`\n     *         managed by this adapter.\n     * @dev The adapter MUST pull `dStableAmount` of the dStable asset from the caller (expected to be the Router).\n     * @dev The resulting `vaultAsset` MUST be sent/deposited/minted directly to the `collateralVault` address provided during adapter setup or retrieved.\n     * @param dStableAmount The amount of dStable asset to convert.\n     * @return vaultAsset The address of the specific `vault asset` token managed by this adapter.\n     * @return vaultAssetAmount The amount of `vaultAsset` generated from the conversion.\n     */\n    function convertToVaultAsset(uint256 dStableAmount) external returns (address vaultAsset, uint256 vaultAssetAmount);\n\n    /**\n     * @notice Converts a specific amount of `vaultAsset` back into the dStable asset.\n     * @dev The adapter MUST pull the required amount of `vaultAsset` from the caller (expected to be the Router).\n     * @dev The resulting dStable asset MUST be sent to the caller.\n     * @param vaultAssetAmount The amount of `vaultAsset` to convert.\n     * @return dStableAmount The amount of dStable asset sent to the caller.\n     */\n    function convertFromVaultAsset(uint256 vaultAssetAmount) external returns (uint256 dStableAmount);\n\n    /**\n     * @notice Preview the result of converting a given dStable amount to vaultAsset (without state change).\n     * @param dStableAmount The amount of dStable asset to preview conversion for.\n     * @return vaultAsset The address of the specific `vault asset` token managed by this adapter.\n     * @return vaultAssetAmount The amount of `vaultAsset` that would be received.\n     */\n    function previewConvertToVaultAsset(\n        uint256 dStableAmount\n    ) external view returns (address vaultAsset, uint256 vaultAssetAmount);\n\n    /**\n     * @notice Preview the result of converting a given vaultAsset amount to dStable (without state change).\n     * @param vaultAssetAmount The amount of `vaultAsset` to preview conversion for.\n     * @return dStableAmount The amount of dStable asset that would be received.\n     */\n    function previewConvertFromVaultAsset(uint256 vaultAssetAmount) external view returns (uint256 dStableAmount);\n\n    /**\n     * @notice Calculates the value of a given amount of the specific `vaultAsset` managed by this adapter\n     *         in terms of the dStable asset.\n     * @param vaultAsset The address of the vault asset token (should match getVaultAsset()). Included for explicitness.\n     * @param vaultAssetAmount The amount of the `vaultAsset` to value.\n     * @return dStableValue The equivalent value in the dStable asset.\n     */\n    function assetValueInDStable(\n        address vaultAsset,\n        uint256 vaultAssetAmount\n    ) external view returns (uint256 dStableValue);\n\n    /**\n     * @notice Returns the address of the specific `vault asset` token managed by this adapter.\n     * @return The address of the `vault asset`.\n     */\n    function vaultAsset() external view returns (address);\n}\n"
    },
    "contracts/vaults/dstake/interfaces/IDStakeCollateralVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IDStakeCollateralVault Interface\n * @notice Defines the external functions of the DStakeCollateralVault required by other\n *         contracts in the dSTAKE system, primarily the DStakeToken.\n */\ninterface IDStakeCollateralVault {\n    /**\n     * @notice Calculates the total value of all managed `vault assets` held by the vault,\n     *         denominated in the underlying dStable asset.\n     * @dev This is typically called by the DStakeToken's `totalAssets()` function.\n     * @return dStableValue The total value of managed assets in terms of the dStable asset.\n     */\n    function totalValueInDStable() external view returns (uint256 dStableValue);\n\n    /**\n     * @notice Returns the address of the underlying dStable asset the vault operates with.\n     * @return The address of the dStable asset.\n     */\n    function dStable() external view returns (address);\n\n    /**\n     * @notice The DStakeToken contract address this vault serves.\n     */\n    function dStakeToken() external view returns (address);\n\n    /**\n     * @notice The DStakeRouter contract address allowed to interact.\n     */\n    function router() external view returns (address);\n\n    /**\n     * @notice Returns the vault asset at `index` from the internal supported list.\n     */\n    function supportedAssets(uint256 index) external view returns (address);\n\n    /**\n     * @notice Returns the entire list of supported vault assets. Convenient for UIs & off-chain analytics.\n     */\n    function getSupportedAssets() external view returns (address[] memory);\n\n    /**\n     * @notice Transfers `amount` of `vaultAsset` from this vault to the `recipient`.\n     * @dev Only callable by the registered router.\n     * @param vaultAsset The address of the vault asset to send.\n     * @param amount The amount to send.\n     * @param recipient The address to receive the asset.\n     */\n    function sendAsset(address vaultAsset, uint256 amount, address recipient) external;\n\n    /**\n     * @notice Sets the address of the DStakeRouter contract.\n     * @dev Only callable by an address with the DEFAULT_ADMIN_ROLE.\n     * @param _newRouter The address of the new router contract.\n     */\n    function setRouter(address _newRouter) external;\n\n    /**\n     * @notice Adds a vault asset to the supported list. Callable only by the router.\n     */\n    function addSupportedAsset(address vaultAsset) external;\n\n    /**\n     * @notice Removes a vault asset from the supported list. Callable only by the router.\n     */\n    function removeSupportedAsset(address vaultAsset) external;\n\n    /**\n     * @notice Emitted when the router address is set.\n     * @param router The address of the new router.\n     */\n    event RouterSet(address indexed router);\n\n    /**\n     * @notice Emitted when a new vault asset is added to the supported list.\n     */\n    event SupportedAssetAdded(address indexed vaultAsset);\n\n    /**\n     * @notice Emitted when a vault asset is removed from the supported list.\n     */\n    event SupportedAssetRemoved(address indexed vaultAsset);\n}\n"
    },
    "contracts/vaults/dstake/interfaces/IDStakeRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IDStakeRouter Interface\n * @notice Defines the external functions of the DStakeRouter required by the DStakeToken\n *         for handling deposits and withdrawals.\n */\ninterface IDStakeRouter {\n    /**\n     * @notice Handles the conversion of deposited dStable asset into a chosen `vaultAsset`\n     *         and informs the collateral vault.\n     * @dev Called by `DStakeToken._deposit()` after the token has received the dStable asset.\n     * @dev The router MUST pull `dStableAmount` from the caller (`DStakeToken`).\n     * @param dStableAmount The amount of dStable asset deposited by the user into the DStakeToken.\n     */\n    function deposit(uint256 dStableAmount) external;\n\n    /**\n     * @notice Handles the conversion of a `vaultAsset` back into the dStable asset for withdrawal.\n     * @dev Called by `DStakeToken._withdraw()`.\n     * @dev The router coordinates pulling the required `vaultAsset` from the collateral vault\n     *      and ensuring the converted dStable asset is sent to the `receiver`.\n     * @param dStableAmount The amount of dStable asset to be withdrawn to the `receiver` (after vault fees).\n     * @param receiver The address that will receive the withdrawn dStable asset.\n     * @param owner The original owner initiating the withdrawal (typically the user burning shares).\n     */\n    function withdraw(uint256 dStableAmount, address receiver, address owner) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}