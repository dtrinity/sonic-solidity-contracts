{
  "language": "Solidity",
  "sources": {
    "@rari-capital/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
    },
    "contracts/common/BasisPointConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nlibrary BasisPointConstants {\n    // Shared definitions of how we represent percentages and basis points\n    uint16 public constant ONE_BPS = 100; // 1 basis point with 2 decimals\n    uint32 public constant ONE_PERCENT_BPS = ONE_BPS * 100;\n    uint32 public constant ONE_HUNDRED_PERCENT_BPS = ONE_PERCENT_BPS * 100;\n}\n"
    },
    "contracts/dlend/core/dependencies/openzeppelin/contracts/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data\n    ) internal view returns (bytes memory) {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/dlend/core/dependencies/openzeppelin/contracts/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\n\ninterface IERC20Detailed is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/dlend/core/dependencies/openzeppelin/contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/dlend/core/interfaces/ICreditDelegationToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\n/**\n * @title ICreditDelegationToken\n * @author Aave\n * @notice Defines the basic interface for a token supporting credit delegation.\n */\ninterface ICreditDelegationToken {\n    /**\n     * @dev Emitted on `approveDelegation` and `borrowAllowance\n     * @param fromUser The address of the delegator\n     * @param toUser The address of the delegatee\n     * @param asset The address of the delegated asset\n     * @param amount The amount being delegated\n     */\n    event BorrowAllowanceDelegated(\n        address indexed fromUser,\n        address indexed toUser,\n        address indexed asset,\n        uint256 amount\n    );\n\n    /**\n     * @notice Delegates borrowing power to a user on the specific debt token.\n     * Delegation will still respect the liquidation constraints (even if delegated, a\n     * delegatee cannot force a delegator HF to go below 1)\n     * @param delegatee The address receiving the delegated borrowing power\n     * @param amount The maximum amount being delegated.\n     */\n    function approveDelegation(address delegatee, uint256 amount) external;\n\n    /**\n     * @notice Returns the borrow allowance of the user\n     * @param fromUser The user to giving allowance\n     * @param toUser The user to give allowance to\n     * @return The current allowance of `toUser`\n     */\n    function borrowAllowance(\n        address fromUser,\n        address toUser\n    ) external view returns (uint256);\n\n    /**\n     * @notice Delegates borrowing power to a user on the specific debt token via ERC712 signature\n     * @param delegator The delegator of the credit\n     * @param delegatee The delegatee that can use the credit\n     * @param value The amount to be delegated\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\n     * @param v The V signature param\n     * @param s The S signature param\n     * @param r The R signature param\n     */\n    function delegationWithSig(\n        address delegator,\n        address delegatee,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/dlend/core/interfaces/IERC20WithPermit.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../dependencies/openzeppelin/contracts/IERC20.sol\";\n\n/**\n * @title IERC20WithPermit\n * @author Aave\n * @notice Interface for the permit function (EIP-2612)\n */\ninterface IERC20WithPermit is IERC20 {\n    /**\n     * @notice Allow passing a signed message to approve spending\n     * @dev implements the permit function as for\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n     * @param owner The owner of the funds\n     * @param spender The spender\n     * @param value The amount\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\n     * @param v Signature param\n     * @param s Signature param\n     * @param r Signature param\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/dlend/core/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IPoolAddressesProvider} from \"./IPoolAddressesProvider.sol\";\nimport {DataTypes} from \"../protocol/libraries/types/DataTypes.sol\";\n\n/**\n * @title IPool\n * @author Aave\n * @notice Defines the basic interface for an Aave Pool.\n */\ninterface IPool {\n    /**\n     * @dev Emitted on mintUnbacked()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the supply\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\n     * @param amount The amount of supplied assets\n     * @param referralCode The referral code used\n     */\n    event MintUnbacked(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on backUnbacked()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param backer The address paying for the backing\n     * @param amount The amount added as backing\n     * @param fee The amount paid in fees\n     */\n    event BackUnbacked(\n        address indexed reserve,\n        address indexed backer,\n        uint256 amount,\n        uint256 fee\n    );\n\n    /**\n     * @dev Emitted on supply()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the supply\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\n     * @param amount The amount supplied\n     * @param referralCode The referral code used\n     */\n    event Supply(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlying asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to The address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     */\n    event Withdraw(\n        address indexed reserve,\n        address indexed user,\n        address indexed to,\n        uint256 amount\n    );\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\n     * @param referralCode The referral code used\n     */\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        DataTypes.InterestRateMode interestRateMode,\n        uint256 borrowRate,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\n     */\n    event Repay(\n        address indexed reserve,\n        address indexed user,\n        address indexed repayer,\n        uint256 amount,\n        bool useATokens\n    );\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n     */\n    event SwapBorrowRateMode(\n        address indexed reserve,\n        address indexed user,\n        DataTypes.InterestRateMode interestRateMode\n    );\n\n    /**\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\n     * @param asset The address of the underlying asset of the reserve\n     * @param totalDebt The total isolation mode debt for the reserve\n     */\n    event IsolationModeTotalDebtUpdated(\n        address indexed asset,\n        uint256 totalDebt\n    );\n\n    /**\n     * @dev Emitted when the user selects a certain asset category for eMode\n     * @param user The address of the user\n     * @param categoryId The category id\n     */\n    event UserEModeSet(address indexed user, uint8 categoryId);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     */\n    event ReserveUsedAsCollateralEnabled(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     */\n    event ReserveUsedAsCollateralDisabled(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     */\n    event RebalanceStableBorrowRate(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     */\n    event FlashLoan(\n        address indexed target,\n        address initiator,\n        address indexed asset,\n        uint256 amount,\n        DataTypes.InterestRateMode interestRateMode,\n        uint256 premium,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted when a borrower is liquidated.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     */\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated.\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The next liquidity rate\n     * @param stableBorrowRate The next stable borrow rate\n     * @param variableBorrowRate The next variable borrow rate\n     * @param liquidityIndex The next liquidity index\n     * @param variableBorrowIndex The next variable borrow index\n     */\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\n     * @param reserve The address of the reserve\n     * @param amountMinted The amount minted to the treasury\n     */\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\n\n    /**\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\n     * @param asset The address of the underlying asset to mint\n     * @param amount The amount to mint\n     * @param onBehalfOf The address that will receive the aTokens\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     */\n    function mintUnbacked(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\n     * @param asset The address of the underlying asset to back\n     * @param amount The amount to back\n     * @param fee The amount paid in fees\n     * @return The backed amount\n     */\n    function backUnbacked(\n        address asset,\n        uint256 amount,\n        uint256 fee\n    ) external returns (uint256);\n\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     */\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param deadline The deadline timestamp that the permit is valid\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param permitV The V parameter of ERC712 permit sig\n     * @param permitR The R parameter of ERC712 permit sig\n     * @param permitS The S parameter of ERC712 permit sig\n     */\n    function supplyWithPermit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) external;\n\n    /**\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to The address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     */\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     */\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     */\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    /**\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @param deadline The deadline timestamp that the permit is valid\n     * @param permitV The V parameter of ERC712 permit sig\n     * @param permitR The R parameter of ERC712 permit sig\n     * @param permitS The S parameter of ERC712 permit sig\n     * @return The final amount repaid\n     */\n    function repayWithPermit(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) external returns (uint256);\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\n     * equivalent debt tokens\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\n     * balance is not enough to cover the whole debt\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @return The final amount repaid\n     */\n    function repayWithATokens(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode\n    ) external returns (uint256);\n\n    /**\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\n     * @param asset The address of the underlying asset borrowed\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n     */\n    function swapBorrowRateMode(\n        address asset,\n        uint256 interestRateMode\n    ) external;\n\n    /**\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     */\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\n     * @param asset The address of the underlying asset supplied\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\n     */\n    function setUserUseReserveAsCollateral(\n        address asset,\n        bool useAsCollateral\n    ) external;\n\n    /**\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     */\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n     * into consideration. For further details please visit https://docs.aave.com/developers/\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts of the assets being flash-borrowed\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     */\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata interestRateModes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n     * into consideration. For further details please visit https://docs.aave.com/developers/\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\n     * @param asset The address of the asset being flash-borrowed\n     * @param amount The amount of the asset being flash-borrowed\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     */\n    function flashLoanSimple(\n        address receiverAddress,\n        address asset,\n        uint256 amount,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\n     * @return currentLiquidationThreshold The liquidation threshold of the user\n     * @return ltv The loan to value of The user\n     * @return healthFactor The current health factor of the user\n     */\n    function getUserAccountData(\n        address user\n    )\n        external\n        view\n        returns (\n            uint256 totalCollateralBase,\n            uint256 totalDebtBase,\n            uint256 availableBorrowsBase,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    /**\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\n     * interest rate strategy\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\n     */\n    function initReserve(\n        address asset,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    /**\n     * @notice Drop a reserve\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     */\n    function dropReserve(address asset) external;\n\n    /**\n     * @notice Updates the address of the interest rate strategy contract\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param rateStrategyAddress The address of the interest rate strategy contract\n     */\n    function setReserveInterestRateStrategyAddress(\n        address asset,\n        address rateStrategyAddress\n    ) external;\n\n    /**\n     * @notice Sets the configuration bitmap of the reserve as a whole\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param configuration The new configuration bitmap\n     */\n    function setConfiguration(\n        address asset,\n        DataTypes.ReserveConfigurationMap calldata configuration\n    ) external;\n\n    /**\n     * @notice Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     */\n    function getConfiguration(\n        address asset\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @notice Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     */\n    function getUserConfiguration(\n        address user\n    ) external view returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @notice Returns the normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(\n        address asset\n    ) external view returns (uint256);\n\n    /**\n     * @notice Returns the normalized variable debt per unit of asset\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\n     * \"dynamic\" variable index based on time, current stored index and virtual rate at the current\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\n     * combination with variable debt supply/balances.\n     * If using this function externally, consider that is possible to have an increasing normalized\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\n     * (e.g. only updates with non-zero variable debt supply)\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(\n        address asset\n    ) external view returns (uint256);\n\n    /**\n     * @notice Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state and configuration data of the reserve\n     */\n    function getReserveData(\n        address asset\n    ) external view returns (DataTypes.ReserveData memory);\n\n    /**\n     * @notice Validates and finalizes an aToken transfer\n     * @dev Only callable by the overlying aToken of the `asset`\n     * @param asset The address of the underlying asset of the aToken\n     * @param from The user from which the aTokens are transferred\n     * @param to The user receiving the aTokens\n     * @param amount The amount being transferred/withdrawn\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\n     */\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromBefore,\n        uint256 balanceToBefore\n    ) external;\n\n    /**\n     * @notice Returns the list of the underlying assets of all the initialized reserves\n     * @dev It does not include dropped reserves\n     * @return The addresses of the underlying assets of the initialized reserves\n     */\n    function getReservesList() external view returns (address[] memory);\n\n    /**\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\n     * @return The address of the reserve associated with id\n     */\n    function getReserveAddressById(uint16 id) external view returns (address);\n\n    /**\n     * @notice Returns the PoolAddressesProvider connected to this contract\n     * @return The address of the PoolAddressesProvider\n     */\n    function ADDRESSES_PROVIDER()\n        external\n        view\n        returns (IPoolAddressesProvider);\n\n    /**\n     * @notice Updates the protocol fee on the bridging\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\n     */\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\n\n    /**\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\n     * - A part is sent to aToken holders as extra, one time accumulated interest\n     * - A part is collected by the protocol treasury\n     * @dev The total premium is calculated on the total borrowed amount\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\n     * @dev Only callable by the PoolConfigurator contract\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\n     */\n    function updateFlashloanPremiums(\n        uint128 flashLoanPremiumTotal,\n        uint128 flashLoanPremiumToProtocol\n    ) external;\n\n    /**\n     * @notice Configures a new category for the eMode.\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\n     * The category 0 is reserved as it's the default for volatile assets\n     * @param id The id of the category\n     * @param config The configuration of the category\n     */\n    function configureEModeCategory(\n        uint8 id,\n        DataTypes.EModeCategory memory config\n    ) external;\n\n    /**\n     * @notice Returns the data of an eMode category\n     * @param id The id of the category\n     * @return The configuration data of the category\n     */\n    function getEModeCategoryData(\n        uint8 id\n    ) external view returns (DataTypes.EModeCategory memory);\n\n    /**\n     * @notice Allows a user to use the protocol in eMode\n     * @param categoryId The id of the category\n     */\n    function setUserEMode(uint8 categoryId) external;\n\n    /**\n     * @notice Returns the eMode the user is using\n     * @param user The address of the user\n     * @return The eMode id\n     */\n    function getUserEMode(address user) external view returns (uint256);\n\n    /**\n     * @notice Resets the isolation mode total debt of the given asset to zero\n     * @dev It requires the given asset has zero debt ceiling\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\n     */\n    function resetIsolationModeTotalDebt(address asset) external;\n\n    /**\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\n     * @return The percentage of available liquidity to borrow, expressed in bps\n     */\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Returns the total fee on flash loans\n     * @return The total fee on flashloans\n     */\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\n\n    /**\n     * @notice Returns the part of the bridge fees sent to protocol\n     * @return The bridge fee sent to the protocol treasury\n     */\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\n\n    /**\n     * @notice Returns the part of the flashloan fees sent to protocol\n     * @return The flashloan fee sent to the protocol treasury\n     */\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\n\n    /**\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\n     * @return The maximum number of reserves supported\n     */\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\n\n    /**\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\n     * @param assets The list of reserves for which the minting needs to be executed\n     */\n    function mintToTreasury(address[] calldata assets) external;\n\n    /**\n     * @notice Rescue and transfer tokens locked in this contract\n     * @param token The address of the token\n     * @param to The address of the recipient\n     * @param amount The amount of token to transfer\n     */\n    function rescueTokens(address token, address to, uint256 amount) external;\n\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @dev Deprecated: Use the `supply` function instead\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     */\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n}\n"
    },
    "contracts/dlend/core/interfaces/IPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n */\ninterface IPoolAddressesProvider {\n    /**\n     * @dev Emitted when the market identifier is updated.\n     * @param oldMarketId The old id of the market\n     * @param newMarketId The new id of the market\n     */\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\n\n    /**\n     * @dev Emitted when the pool is updated.\n     * @param oldAddress The old address of the Pool\n     * @param newAddress The new address of the Pool\n     */\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the pool configurator is updated.\n     * @param oldAddress The old address of the PoolConfigurator\n     * @param newAddress The new address of the PoolConfigurator\n     */\n    event PoolConfiguratorUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the price oracle is updated.\n     * @param oldAddress The old address of the PriceOracle\n     * @param newAddress The new address of the PriceOracle\n     */\n    event PriceOracleUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the ACL manager is updated.\n     * @param oldAddress The old address of the ACLManager\n     * @param newAddress The new address of the ACLManager\n     */\n    event ACLManagerUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the ACL admin is updated.\n     * @param oldAddress The old address of the ACLAdmin\n     * @param newAddress The new address of the ACLAdmin\n     */\n    event ACLAdminUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the price oracle sentinel is updated.\n     * @param oldAddress The old address of the PriceOracleSentinel\n     * @param newAddress The new address of the PriceOracleSentinel\n     */\n    event PriceOracleSentinelUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the pool data provider is updated.\n     * @param oldAddress The old address of the PoolDataProvider\n     * @param newAddress The new address of the PoolDataProvider\n     */\n    event PoolDataProviderUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when a new proxy is created.\n     * @param id The identifier of the proxy\n     * @param proxyAddress The address of the created proxy contract\n     * @param implementationAddress The address of the implementation contract\n     */\n    event ProxyCreated(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address indexed implementationAddress\n    );\n\n    /**\n     * @dev Emitted when a new non-proxied contract address is registered.\n     * @param id The identifier of the contract\n     * @param oldAddress The address of the old contract\n     * @param newAddress The address of the new contract\n     */\n    event AddressSet(\n        bytes32 indexed id,\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the implementation of the proxy registered with id is updated\n     * @param id The identifier of the contract\n     * @param proxyAddress The address of the proxy contract\n     * @param oldImplementationAddress The address of the old implementation contract\n     * @param newImplementationAddress The address of the new implementation contract\n     */\n    event AddressSetAsProxy(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address oldImplementationAddress,\n        address indexed newImplementationAddress\n    );\n\n    /**\n     * @notice Returns the id of the Aave market to which this contract points to.\n     * @return The market id\n     */\n    function getMarketId() external view returns (string memory);\n\n    /**\n     * @notice Associates an id with a specific PoolAddressesProvider.\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\n     * identify and validate multiple Aave markets.\n     * @param newMarketId The market id\n     */\n    function setMarketId(string calldata newMarketId) external;\n\n    /**\n     * @notice Returns an address by its identifier.\n     * @dev The returned address might be an EOA or a contract, potentially proxied\n     * @dev It returns ZERO if there is no registered address with the given id\n     * @param id The id\n     * @return The address of the registered for the specified id\n     */\n    function getAddressFromID(bytes32 id) external view returns (address);\n\n    /**\n     * @notice General function to update the implementation of a proxy registered with\n     * certain `id`. If there is no proxy registered, it will instantiate one and\n     * set as implementation the `newImplementationAddress`.\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\n     * setter function, in order to avoid unexpected consequences\n     * @param id The id\n     * @param newImplementationAddress The address of the new implementation\n     */\n    function setAddressAsProxy(\n        bytes32 id,\n        address newImplementationAddress\n    ) external;\n\n    /**\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\n     * @param id The id\n     * @param newAddress The address to set\n     */\n    function setAddress(bytes32 id, address newAddress) external;\n\n    /**\n     * @notice Returns the address of the Pool proxy.\n     * @return The Pool proxy address\n     */\n    function getPool() external view returns (address);\n\n    /**\n     * @notice Updates the implementation of the Pool, or creates a proxy\n     * setting the new `pool` implementation when the function is called for the first time.\n     * @param newPoolImpl The new Pool implementation\n     */\n    function setPoolImpl(address newPoolImpl) external;\n\n    /**\n     * @notice Returns the address of the PoolConfigurator proxy.\n     * @return The PoolConfigurator proxy address\n     */\n    function getPoolConfigurator() external view returns (address);\n\n    /**\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\n     */\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n    /**\n     * @notice Returns the address of the price oracle.\n     * @return The address of the PriceOracle\n     */\n    function getPriceOracle() external view returns (address);\n\n    /**\n     * @notice Updates the address of the price oracle.\n     * @param newPriceOracle The address of the new PriceOracle\n     */\n    function setPriceOracle(address newPriceOracle) external;\n\n    /**\n     * @notice Returns the address of the ACL manager.\n     * @return The address of the ACLManager\n     */\n    function getACLManager() external view returns (address);\n\n    /**\n     * @notice Updates the address of the ACL manager.\n     * @param newAclManager The address of the new ACLManager\n     */\n    function setACLManager(address newAclManager) external;\n\n    /**\n     * @notice Returns the address of the ACL admin.\n     * @return The address of the ACL admin\n     */\n    function getACLAdmin() external view returns (address);\n\n    /**\n     * @notice Updates the address of the ACL admin.\n     * @param newAclAdmin The address of the new ACL admin\n     */\n    function setACLAdmin(address newAclAdmin) external;\n\n    /**\n     * @notice Returns the address of the price oracle sentinel.\n     * @return The address of the PriceOracleSentinel\n     */\n    function getPriceOracleSentinel() external view returns (address);\n\n    /**\n     * @notice Updates the address of the price oracle sentinel.\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\n     */\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n    /**\n     * @notice Returns the address of the data provider.\n     * @return The address of the DataProvider\n     */\n    function getPoolDataProvider() external view returns (address);\n\n    /**\n     * @notice Updates the address of the data provider.\n     * @param newDataProvider The address of the new DataProvider\n     */\n    function setPoolDataProvider(address newDataProvider) external;\n}\n"
    },
    "contracts/dlend/core/protocol/libraries/math/PercentageMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\n/**\n * @title PercentageMath library\n * @author Aave\n * @notice Provides functions to perform percentage calculations\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\n */\nlibrary PercentageMath {\n    // Maximum percentage factor (100.00%)\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\n\n    // Half percentage factor (50.00%)\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\n\n    /**\n     * @notice Executes a percentage multiplication\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param value The value of which the percentage needs to be calculated\n     * @param percentage The percentage of the value to be calculated\n     * @return result value percentmul percentage\n     */\n    function percentMul(\n        uint256 value,\n        uint256 percentage\n    ) internal pure returns (uint256 result) {\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\n        assembly {\n            if iszero(\n                or(\n                    iszero(percentage),\n                    iszero(\n                        gt(\n                            value,\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\n                        )\n                    )\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            result := div(\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\n                PERCENTAGE_FACTOR\n            )\n        }\n    }\n\n    /**\n     * @notice Executes a percentage division\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param value The value of which the percentage needs to be calculated\n     * @param percentage The percentage of the value to be calculated\n     * @return result value percentdiv percentage\n     */\n    function percentDiv(\n        uint256 value,\n        uint256 percentage\n    ) internal pure returns (uint256 result) {\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\n        assembly {\n            if or(\n                iszero(percentage),\n                iszero(\n                    iszero(\n                        gt(\n                            value,\n                            div(\n                                sub(not(0), div(percentage, 2)),\n                                PERCENTAGE_FACTOR\n                            )\n                        )\n                    )\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            result := div(\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\n                percentage\n            )\n        }\n    }\n}\n"
    },
    "contracts/dlend/core/protocol/libraries/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nlibrary DataTypes {\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        //timestamp of last update\n        uint40 lastUpdateTimestamp;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint16 id;\n        //aToken address\n        address aTokenAddress;\n        //stableDebtToken address\n        address stableDebtTokenAddress;\n        //variableDebtToken address\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the current treasury balance, scaled\n        uint128 accruedToTreasury;\n        //the outstanding unbacked aTokens minted through the bridging feature\n        uint128 unbacked;\n        //the outstanding debt borrowed against this asset in isolation mode\n        uint128 isolationModeTotalDebt;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60: asset is paused\n        //bit 61: borrowing in isolation mode is enabled\n        //bit 62: siloed borrowing enabled\n        //bit 63: flashloaning enabled\n        //bit 64-79: reserve factor\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n        //bit 152-167 liquidation protocol fee\n        //bit 168-175 eMode category\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n        //bit 252-255 unused\n\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        /**\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\n         * asset is borrowed by the user.\n         */\n        uint256 data;\n    }\n\n    struct EModeCategory {\n        // each eMode category has a custom ltv and liquidation threshold\n        uint16 ltv;\n        uint16 liquidationThreshold;\n        uint16 liquidationBonus;\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\n        address priceSource;\n        string label;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n\n    struct ReserveCache {\n        uint256 currScaledVariableDebt;\n        uint256 nextScaledVariableDebt;\n        uint256 currPrincipalStableDebt;\n        uint256 currAvgStableBorrowRate;\n        uint256 currTotalStableDebt;\n        uint256 nextAvgStableBorrowRate;\n        uint256 nextTotalStableDebt;\n        uint256 currLiquidityIndex;\n        uint256 nextLiquidityIndex;\n        uint256 currVariableBorrowIndex;\n        uint256 nextVariableBorrowIndex;\n        uint256 currLiquidityRate;\n        uint256 currVariableBorrowRate;\n        uint256 reserveFactor;\n        ReserveConfigurationMap reserveConfiguration;\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        uint40 reserveLastUpdateTimestamp;\n        uint40 stableDebtLastUpdateTimestamp;\n    }\n\n    struct ExecuteLiquidationCallParams {\n        uint256 reservesCount;\n        uint256 debtToCover;\n        address collateralAsset;\n        address debtAsset;\n        address user;\n        bool receiveAToken;\n        address priceOracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n    }\n\n    struct ExecuteSupplyParams {\n        address asset;\n        uint256 amount;\n        address onBehalfOf;\n        uint16 referralCode;\n    }\n\n    struct ExecuteBorrowParams {\n        address asset;\n        address user;\n        address onBehalfOf;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        uint16 referralCode;\n        bool releaseUnderlying;\n        uint256 maxStableRateBorrowSizePercent;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n    }\n\n    struct ExecuteRepayParams {\n        address asset;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        address onBehalfOf;\n        bool useATokens;\n    }\n\n    struct ExecuteWithdrawParams {\n        address asset;\n        uint256 amount;\n        address to;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n    }\n\n    struct ExecuteSetUserEModeParams {\n        uint256 reservesCount;\n        address oracle;\n        uint8 categoryId;\n    }\n\n    struct FinalizeTransferParams {\n        address asset;\n        address from;\n        address to;\n        uint256 amount;\n        uint256 balanceFromBefore;\n        uint256 balanceToBefore;\n        uint256 reservesCount;\n        address oracle;\n        uint8 fromEModeCategory;\n    }\n\n    struct FlashloanParams {\n        address receiverAddress;\n        address[] assets;\n        uint256[] amounts;\n        uint256[] interestRateModes;\n        address onBehalfOf;\n        bytes params;\n        uint16 referralCode;\n        uint256 flashLoanPremiumToProtocol;\n        uint256 flashLoanPremiumTotal;\n        uint256 maxStableRateBorrowSizePercent;\n        uint256 reservesCount;\n        address addressesProvider;\n        uint8 userEModeCategory;\n        bool isAuthorizedFlashBorrower;\n    }\n\n    struct FlashloanSimpleParams {\n        address receiverAddress;\n        address asset;\n        uint256 amount;\n        bytes params;\n        uint16 referralCode;\n        uint256 flashLoanPremiumToProtocol;\n        uint256 flashLoanPremiumTotal;\n    }\n\n    struct FlashLoanRepaymentParams {\n        uint256 amount;\n        uint256 totalPremium;\n        uint256 flashLoanPremiumToProtocol;\n        address asset;\n        address receiverAddress;\n        uint16 referralCode;\n    }\n\n    struct CalculateUserAccountDataParams {\n        UserConfigurationMap userConfig;\n        uint256 reservesCount;\n        address user;\n        address oracle;\n        uint8 userEModeCategory;\n    }\n\n    struct ValidateBorrowParams {\n        ReserveCache reserveCache;\n        UserConfigurationMap userConfig;\n        address asset;\n        address userAddress;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        uint256 maxStableLoanPercent;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n        bool isolationModeActive;\n        address isolationModeCollateralAddress;\n        uint256 isolationModeDebtCeiling;\n    }\n\n    struct ValidateLiquidationCallParams {\n        ReserveCache debtReserveCache;\n        uint256 totalDebt;\n        uint256 healthFactor;\n        address priceOracleSentinel;\n    }\n\n    struct CalculateInterestRatesParams {\n        uint256 unbacked;\n        uint256 liquidityAdded;\n        uint256 liquidityTaken;\n        uint256 totalStableDebt;\n        uint256 totalVariableDebt;\n        uint256 averageStableBorrowRate;\n        uint256 reserveFactor;\n        address reserve;\n        address aToken;\n    }\n\n    struct InitReserveParams {\n        address asset;\n        address aTokenAddress;\n        address stableDebtAddress;\n        address variableDebtAddress;\n        address interestRateStrategyAddress;\n        uint16 reservesCount;\n        uint16 maxNumberReserves;\n    }\n}\n"
    },
    "contracts/dlend/periphery/adapters/curve/interfaces/IAaveFlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\n/**\n * @title IAaveFlashLoanReceiver\n * @author Aave Labs\n * @notice Defines the basic interface of an Aave flashloan-receiver contract.\n * @dev Altered version of the official Aave Interface IFlashLoanReceiver, keeping the minimal functionality to receive the flashloan execution\n **/\ninterface IAaveFlashLoanReceiver {\n    /**\n     * @notice Executes an operation after receiving the flash-borrowed assets\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\n     *      enough funds to repay and has approved the Pool to pull the total amount\n     * @param assets The addresses of the flash-borrowed assets\n     * @param amounts The amounts of the flash-borrowed assets\n     * @param premiums The fee of each flash-borrowed asset\n     * @param initiator The address of the flashloan initiator\n     * @param params The byte-encoded params passed when initiating the flashloan\n     * @return True if the execution of the operation succeeds, false otherwise\n     */\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/BaseOdosBuyAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {SafeERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\";\nimport {PercentageMath} from \"contracts/dlend/core/protocol/libraries/math/PercentageMath.sol\";\nimport {IPoolAddressesProvider} from \"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\";\nimport {IERC20Detailed} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\";\nimport {BaseOdosSwapAdapter} from \"./BaseOdosSwapAdapter.sol\";\nimport {BasisPointConstants} from \"contracts/common/BasisPointConstants.sol\";\nimport {IOdosRouterV2} from \"contracts/odos/interface/IOdosRouterV2.sol\";\nimport {OdosSwapUtils} from \"contracts/odos/OdosSwapUtils.sol\";\n\n/**\n * @title BaseOdosBuyAdapter\n * @notice Implements the logic for buying tokens on Odos\n */\nabstract contract BaseOdosBuyAdapter is BaseOdosSwapAdapter {\n    using PercentageMath for uint256;\n    using SafeERC20 for IERC20Detailed;\n\n    /// @notice The address of the Odos Router\n    IOdosRouterV2 public immutable swapRouter;\n\n    uint16 private constant SLIPPAGE_BUFFER_BPS = 1; // 1/100 of a basis point\n\n    /* Custom Errors */\n    error EstimatedAmountExceedsMaximum(uint256 estimated, uint256 maximum);\n\n    constructor(\n        IPoolAddressesProvider addressesProvider,\n        address pool,\n        IOdosRouterV2 _swapRouter\n    ) BaseOdosSwapAdapter(addressesProvider, pool) {\n        swapRouter = _swapRouter;\n    }\n\n    /**\n     * @dev Buys a specific amount of output token by spending a maximum amount of input token\n     * @param assetToSwapFrom The asset to swap from\n     * @param assetToSwapTo The asset to swap to\n     * @param maxAmountToSwap The maximum amount to swap\n     * @param amountToReceive The amount to receive\n     * @param swapData The encoded swap data for Odos\n     * @return amountSold The amount of input token sold\n     */\n    function _buyOnOdos(\n        IERC20Detailed assetToSwapFrom,\n        IERC20Detailed assetToSwapTo,\n        uint256 maxAmountToSwap,\n        uint256 amountToReceive,\n        bytes memory swapData\n    ) internal returns (uint256 amountSold) {\n        uint256 balanceBeforeAssetFrom = assetToSwapFrom.balanceOf(\n            address(this)\n        );\n        if (balanceBeforeAssetFrom < maxAmountToSwap) {\n            revert InsufficientBalanceBeforeSwap(\n                balanceBeforeAssetFrom,\n                maxAmountToSwap\n            );\n        }\n\n        address tokenIn = address(assetToSwapFrom);\n        address tokenOut = address(assetToSwapTo);\n\n        // Add a buffer to the maxAmountToSwap to account for potential slippage\n        amountSold =\n            (maxAmountToSwap *\n                (BasisPointConstants.ONE_HUNDRED_PERCENT_BPS +\n                    SLIPPAGE_BUFFER_BPS)) /\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS;\n\n        // Ensure estimated amount is within limits\n        if (amountSold > maxAmountToSwap) {\n            revert EstimatedAmountExceedsMaximum(amountSold, maxAmountToSwap);\n        }\n\n        // Execute the swap using OdosSwapUtils\n        uint256 actualAmountOut = OdosSwapUtils.excuteSwapOperation(\n            swapRouter,\n            tokenIn,\n            amountSold,\n            amountToReceive,\n            swapData\n        );\n\n        // Calculate the actual amount sold based on balance difference\n        amountSold =\n            balanceBeforeAssetFrom -\n            assetToSwapFrom.balanceOf(address(this));\n\n        emit Bought(tokenIn, tokenOut, amountSold, actualAmountOut);\n    }\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/BaseOdosSellAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {SafeERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\";\nimport {PercentageMath} from \"contracts/dlend/core/protocol/libraries/math/PercentageMath.sol\";\nimport {IPoolAddressesProvider} from \"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\";\nimport {IERC20Detailed} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\";\nimport {IOdosRouterV2} from \"contracts/odos/interface/IOdosRouterV2.sol\";\nimport {BaseOdosSwapAdapter} from \"./BaseOdosSwapAdapter.sol\";\nimport {OdosSwapUtils} from \"contracts/odos/OdosSwapUtils.sol\";\n\n/**\n * @title BaseOdosSellAdapter\n * @notice Implements the logic for selling tokens on Odos\n */\nabstract contract BaseOdosSellAdapter is BaseOdosSwapAdapter {\n    using PercentageMath for uint256;\n    using SafeERC20 for IERC20Detailed;\n\n    /// @notice The address of the Odos Router\n    IOdosRouterV2 public immutable swapRouter;\n\n    /**\n     * @dev Constructor\n     * @param addressesProvider The address of the Aave PoolAddressesProvider contract\n     * @param pool The address of the Aave Pool contract\n     * @param _swapRouter The address of the Odos Router\n     */\n    constructor(\n        IPoolAddressesProvider addressesProvider,\n        address pool,\n        IOdosRouterV2 _swapRouter\n    ) BaseOdosSwapAdapter(addressesProvider, pool) {\n        swapRouter = _swapRouter;\n    }\n\n    /**\n     * @dev Swaps a token for another using Odos\n     * @param assetToSwapFrom Address of the asset to be swapped from\n     * @param assetToSwapTo Address of the asset to be swapped to\n     * @param amountToSwap Amount to be swapped\n     * @param minAmountToReceive Minimum amount to be received from the swap\n     * @param swapData The encoded swap data for Odos\n     * @return amountReceived The amount received from the swap\n     */\n    function _sellOnOdos(\n        IERC20Detailed assetToSwapFrom,\n        IERC20Detailed assetToSwapTo,\n        uint256 amountToSwap,\n        uint256 minAmountToReceive,\n        bytes memory swapData\n    ) internal returns (uint256 amountReceived) {\n        uint256 balanceBeforeAssetFrom = assetToSwapFrom.balanceOf(\n            address(this)\n        );\n        if (balanceBeforeAssetFrom < amountToSwap) {\n            revert InsufficientBalanceBeforeSwap(\n                balanceBeforeAssetFrom,\n                amountToSwap\n            );\n        }\n\n        address tokenIn = address(assetToSwapFrom);\n        address tokenOut = address(assetToSwapTo);\n\n        // Execute the swap using OdosSwapUtils\n        amountReceived = OdosSwapUtils.excuteSwapOperation(\n            swapRouter,\n            tokenIn,\n            amountToSwap,\n            minAmountToReceive,\n            swapData\n        );\n\n        emit Bought(tokenIn, tokenOut, amountToSwap, amountReceived);\n    }\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/BaseOdosSwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20.sol\";\nimport {SafeERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\";\nimport {IERC20Detailed} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\";\nimport {IERC20WithPermit} from \"contracts/dlend/core/interfaces/IERC20WithPermit.sol\";\nimport {IPoolAddressesProvider} from \"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\";\nimport {IPool} from \"contracts/dlend/core/interfaces/IPool.sol\";\nimport {Ownable} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/Ownable.sol\";\nimport {IBaseOdosAdapter} from \"./interfaces/IBaseOdosAdapter.sol\";\n\n/**\n * @title BaseOdosSwapAdapter\n * @notice Utility functions for adapters using Odos\n */\nabstract contract BaseOdosSwapAdapter is Ownable, IBaseOdosAdapter {\n    using SafeERC20 for IERC20;\n\n    /* State Variables */\n    /// The address of the Aave PoolAddressesProvider contract\n    IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\n\n    /// The address of the Aave Pool contract\n    IPool public immutable POOL;\n\n    /**\n     * @dev Constructor\n     * @param addressesProvider The address of the Aave PoolAddressesProvider contract\n     * @param pool The address of the Aave Pool contract\n     */\n    constructor(IPoolAddressesProvider addressesProvider, address pool) {\n        ADDRESSES_PROVIDER = addressesProvider;\n        POOL = IPool(pool);\n    }\n\n    /**\n     * @dev Get the vToken, sToken and aToken associated to the asset\n     * @param asset The address of the asset\n     * @return address The address of the VariableDebtToken, vToken\n     * @return address The address of the StableDebtToken, sToken\n     * @return address The address of the aToken\n     */\n    function _getReserveData(\n        address asset\n    ) internal view virtual returns (address, address, address);\n\n    /**\n     * @dev Supply an amount of asset to the Aave Pool\n     * @param asset The address of the asset to be supplied\n     * @param amount The amount of the asset to be supplied\n     * @param to The address receiving the aTokens\n     * @param referralCode The referral code to pass to Aave\n     */\n    function _supply(\n        address asset,\n        uint256 amount,\n        address to,\n        uint16 referralCode\n    ) internal virtual;\n\n    /**\n     * @dev Pull the ATokens from the user and withdraws the underlying asset from the Aave Pool\n     * @param reserve The address of the asset\n     * @param user The address of the user to pull aTokens from\n     * @param amount The amount of tokens to be pulled and withdrawn\n     * @param permitInput struct containing the permit signature\n     */\n    function _pullATokenAndWithdraw(\n        address reserve,\n        address user,\n        uint256 amount,\n        PermitInput memory permitInput\n    ) internal returns (uint256) {\n        // If deadline is set to zero, assume there is no signature for permit\n        if (permitInput.deadline != 0) {\n            permitInput.aToken.permit(\n                user,\n                address(this),\n                permitInput.value,\n                permitInput.deadline,\n                permitInput.v,\n                permitInput.r,\n                permitInput.s\n            );\n        }\n\n        (, , address aToken) = _getReserveData(reserve);\n\n        uint256 aTokenBalanceBefore = IERC20(aToken).balanceOf(address(this));\n        IERC20(aToken).safeTransferFrom(user, address(this), amount);\n        uint256 aTokenBalanceDiff = IERC20(aToken).balanceOf(address(this)) -\n            aTokenBalanceBefore;\n\n        POOL.withdraw(reserve, aTokenBalanceDiff, address(this));\n        return aTokenBalanceDiff;\n    }\n\n    /**\n     * @dev Renews the asset allowance in case the current allowance is below a given threshold\n     * @param asset The address of the asset\n     * @param minAmount The minimum required allowance to the Aave Pool\n     */\n    function _conditionalRenewAllowance(\n        address asset,\n        uint256 minAmount\n    ) internal {\n        uint256 allowance = IERC20(asset).allowance(\n            address(this),\n            address(POOL)\n        );\n        if (allowance < minAmount) {\n            IERC20(asset).safeApprove(address(POOL), 0);\n            IERC20(asset).safeApprove(address(POOL), type(uint256).max);\n        }\n    }\n\n    /**\n     * @dev Emergency rescue for token stucked on this contract, as failsafe mechanism\n     * - Funds should never remain in this contract more time than during transactions\n     * - Only callable by the owner\n     */\n    function rescueTokens(IERC20 token) external onlyOwner {\n        token.safeTransfer(owner(), token.balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/interfaces/IBaseOdosAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IERC20WithPermit} from \"contracts/dlend/core/interfaces/IERC20WithPermit.sol\";\n\n/**\n * @title IBaseOdosAdapter\n * @notice Interface for the BaseOdosAdapter\n */\ninterface IBaseOdosAdapter {\n    /* Events */\n    /**\n     * @dev Emitted when a token is bought on Odos\n     * @param tokenIn The address of the token sold\n     * @param tokenOut The address of the token bought\n     * @param amountIn The amount of tokens sold\n     * @param amountOut The amount of tokens bought\n     */\n    event Bought(\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /* Custom Errors */\n    /**\n     * @dev Thrown when the balance before swap is insufficient\n     * @param balance The actual balance\n     * @param required The required balance\n     */\n    error InsufficientBalanceBeforeSwap(uint256 balance, uint256 required);\n\n    /**\n     * @dev Thrown when the output amount is less than the minimum expected\n     * @param actual The actual output amount\n     * @param expected The minimum expected output amount\n     */\n    error InsufficientOutputAmount(uint256 actual, uint256 expected);\n\n    /**\n     * @dev Thrown when the caller is not the pool\n     * @param caller The actual caller\n     * @param pool The expected pool\n     */\n    error CallerMustBePool(address caller, address pool);\n\n    /**\n     * @dev Thrown when the initiator is not the expected initiator\n     * @param initiator The actual initiator\n     * @param expectedInitiator The expected initiator\n     */\n    error InitiatorMustBeThis(address initiator, address expectedInitiator);\n\n    /**\n     * @dev Struct to hold permit data\n     * @param aToken The aToken contract with permit functionality\n     * @param value The amount of tokens to permit\n     * @param deadline The deadline for the permit\n     * @param v The v parameter of the signature\n     * @param r The r parameter of the signature\n     * @param s The s parameter of the signature\n     */\n    struct PermitInput {\n        IERC20WithPermit aToken;\n        uint256 value;\n        uint256 deadline;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/interfaces/IOdosDebtSwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IBaseOdosAdapter} from \"./IBaseOdosAdapter.sol\";\n\n/**\n * @title IOdosDebtSwapAdapter\n * @notice Interface for the OdosDebtSwapAdapter\n */\ninterface IOdosDebtSwapAdapter is IBaseOdosAdapter {\n    /* Structs */\n    /**\n     * @dev Struct to hold credit delegation data\n     * @param debtToken The address of the debt token\n     * @param value The amount of tokens to delegate\n     * @param deadline The deadline for the delegation\n     * @param v The v parameter of the signature\n     * @param r The r parameter of the signature\n     * @param s The s parameter of the signature\n     */\n    struct CreditDelegationInput {\n        address debtToken;\n        uint256 value;\n        uint256 deadline;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /**\n     * @dev Struct to hold the debt swap parameters\n     * @param debtAsset The address of the debt asset\n     * @param debtRepayAmount The amount of debt to repay\n     * @param debtRateMode The rate mode of the debt\n     * @param newDebtAsset The address of the new debt asset\n     * @param maxNewDebtAmount The maximum amount of new debt\n     * @param extraCollateralAsset The address of the extra collateral asset\n     * @param extraCollateralAmount The amount of extra collateral\n     * @param swapData The encoded swap data for Odos\n     */\n    struct DebtSwapParams {\n        address debtAsset;\n        uint256 debtRepayAmount;\n        uint256 debtRateMode;\n        address newDebtAsset;\n        uint256 maxNewDebtAmount;\n        address extraCollateralAsset;\n        uint256 extraCollateralAmount;\n        bytes swapData;\n    }\n\n    /**\n     * @dev Struct to hold flash loan parameters\n     * @param debtAsset The address of the debt asset\n     * @param debtRepayAmount The amount of debt to repay\n     * @param debtRateMode The rate mode of the debt\n     * @param nestedFlashloanDebtAsset The address of the nested flashloan debt asset\n     * @param nestedFlashloanDebtAmount The amount of nested flashloan debt\n     * @param user The address of the user\n     * @param swapData The encoded swap data for Odos\n     */\n    struct FlashParams {\n        address debtAsset;\n        uint256 debtRepayAmount;\n        uint256 debtRateMode;\n        address nestedFlashloanDebtAsset;\n        uint256 nestedFlashloanDebtAmount;\n        address user;\n        bytes swapData;\n    }\n\n    /**\n     * @dev Swaps one type of debt to another\n     * @param debtSwapParams The debt swap parameters\n     * @param creditDelegationPermit The credit delegation permit\n     * @param collateralATokenPermit The collateral aToken permit\n     */\n    function swapDebt(\n        DebtSwapParams memory debtSwapParams,\n        CreditDelegationInput memory creditDelegationPermit,\n        PermitInput memory collateralATokenPermit\n    ) external;\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/interfaces/IOdosLiquiditySwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IBaseOdosAdapter} from \"./IBaseOdosAdapter.sol\";\n\n/**\n * @title IOdosLiquiditySwapAdapter\n * @notice Defines the basic interface for CurveLiquiditySwapAdapter\n * @dev Implement this interface to provide functionality of swapping one collateral asset to another collateral asset\n **/\ninterface IOdosLiquiditySwapAdapter is IBaseOdosAdapter {\n    struct LiquiditySwapParams {\n        address collateralAsset; // the asset to swap collateral from\n        uint256 collateralAmountToSwap; // the amount of asset to swap from\n        address newCollateralAsset; // the asset to swap collateral to\n        uint256 newCollateralAmount; // the minimum amount of new collateral asset to receive\n        address user; // the address of user\n        bool withFlashLoan; // true if flashloan is needed to swap collateral, otherwise false\n        bytes swapData; // the encoded swap data for Odos\n    }\n\n    /**\n     * @notice Swaps liquidity(collateral) from one asset to another\n     * @param liquiditySwapParams struct describing the liquidity swap\n     * @param collateralATokenPermit optional permit for collateral aToken\n     */\n    function swapLiquidity(\n        LiquiditySwapParams memory liquiditySwapParams,\n        PermitInput memory collateralATokenPermit\n    ) external;\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/interfaces/IOdosRepayAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IBaseOdosAdapter} from \"./IBaseOdosAdapter.sol\";\n\n/**\n * @title IOdosRepayAdapter\n * @notice Interface for the OdosRepayAdapter\n */\ninterface IOdosRepayAdapter is IBaseOdosAdapter {\n    /**\n     * @dev Custom error for insufficient amount to repay\n     * @param amountReceived The amount received from the swap\n     * @param amountToRepay The amount needed to repay\n     */\n    error InsufficientAmountToRepay(\n        uint256 amountReceived,\n        uint256 amountToRepay\n    );\n\n    /**\n     * @dev Struct for repay parameters\n     * @param collateralAsset The address of the collateral asset\n     * @param collateralAmount The amount of collateral to swap\n     * @param debtAsset The address of the debt asset\n     * @param repayAmount The amount of debt to repay\n     * @param rateMode The rate mode of the debt (1 = stable, 2 = variable)\n     * @param user The address of the user\n     * @param minAmountToReceive The minimum amount to receive from the swap\n     * @param swapData The encoded swap data for Odos\n     */\n    struct RepayParams {\n        address collateralAsset;\n        uint256 collateralAmount;\n        address debtAsset;\n        uint256 repayAmount;\n        uint256 rateMode;\n        address user;\n        uint256 minAmountToReceive;\n        bytes swapData;\n    }\n\n    /**\n     * @dev Swaps collateral for another asset and uses that asset to repay a debt\n     * @param repayParams The parameters of the repay\n     * @param permitInput The parameters of the permit signature, to approve collateral aToken\n     * @return uint256 The amount repaid\n     */\n    function swapAndRepay(\n        RepayParams memory repayParams,\n        PermitInput memory permitInput\n    ) external returns (uint256);\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/interfaces/IOdosWithdrawSwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IBaseOdosAdapter} from \"./IBaseOdosAdapter.sol\";\n\n/**\n * @title IOdosWithdrawSwapAdapter\n * @notice Defines the basic interface for OdosWithdrawSwapAdapter\n * @dev Implement this interface to provide functionality of withdrawing from the Aave Pool and swapping to another asset\n **/\ninterface IOdosWithdrawSwapAdapter is IBaseOdosAdapter {\n    struct WithdrawSwapParams {\n        address oldAsset; // the asset to withdraw and swap from\n        uint256 oldAssetAmount; // the amount to withdraw\n        address newAsset; // the asset to swap to\n        uint256 minAmountToReceive; // the minimum amount of new asset to receive\n        address user; // the address of user\n        bytes swapData; // the swap data for Odos\n    }\n\n    /**\n     * @notice Withdraws and swaps an asset that is supplied to the Aave Pool\n     * @param withdrawSwapParams struct describing the withdraw swap\n     * @param permitInput optional permit for collateral aToken\n     */\n    function withdrawAndSwap(\n        WithdrawSwapParams memory withdrawSwapParams,\n        PermitInput memory permitInput\n    ) external;\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/OdosDebtSwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IERC20Detailed} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\";\nimport {IERC20WithPermit} from \"contracts/dlend/core/interfaces/IERC20WithPermit.sol\";\nimport {ICreditDelegationToken} from \"contracts/dlend/core/interfaces/ICreditDelegationToken.sol\";\nimport {BaseOdosBuyAdapter} from \"./BaseOdosBuyAdapter.sol\";\nimport {IOdosDebtSwapAdapter} from \"./interfaces/IOdosDebtSwapAdapter.sol\";\nimport {ReentrancyGuard} from \"../../dependencies/openzeppelin/ReentrancyGuard.sol\";\nimport {IOdosRouterV2} from \"contracts/odos/interface/IOdosRouterV2.sol\";\nimport {IAaveFlashLoanReceiver} from \"../curve/interfaces/IAaveFlashLoanReceiver.sol\";\nimport {SafeERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\";\nimport {IPoolAddressesProvider} from \"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\";\nimport {DataTypes} from \"contracts/dlend/core/protocol/libraries/types/DataTypes.sol\";\n\n/**\n * @title OdosDebtSwapAdapter\n * @notice Odos Adapter to perform a swap of debt to another debt.\n **/\ncontract OdosDebtSwapAdapter is\n    BaseOdosBuyAdapter,\n    ReentrancyGuard,\n    IAaveFlashLoanReceiver,\n    IOdosDebtSwapAdapter\n{\n    using SafeERC20 for IERC20WithPermit;\n\n    // unique identifier to track usage via flashloan events\n    uint16 public constant REFERRER = 5936; // uint16(uint256(keccak256(abi.encode('debt-swap-adapter'))) / type(uint16).max)\n\n    constructor(\n        IPoolAddressesProvider addressesProvider,\n        address pool,\n        IOdosRouterV2 _swapRouter,\n        address owner\n    ) BaseOdosBuyAdapter(addressesProvider, pool, _swapRouter) {\n        transferOwnership(owner);\n        // set initial approval for all reserves\n        address[] memory reserves = POOL.getReservesList();\n        for (uint256 i = 0; i < reserves.length; i++) {\n            IERC20WithPermit(reserves[i]).safeApprove(\n                address(POOL),\n                type(uint256).max\n            );\n        }\n    }\n\n    /**\n     * @dev Implementation of the reserve data getter from the base adapter\n     * @param asset The address of the asset\n     * @return The address of the vToken, sToken and aToken\n     */\n    function _getReserveData(\n        address asset\n    ) internal view override returns (address, address, address) {\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(asset);\n        return (\n            reserveData.variableDebtTokenAddress,\n            reserveData.stableDebtTokenAddress,\n            reserveData.aTokenAddress\n        );\n    }\n\n    /**\n     * @dev Implementation of the supply function from the base adapter\n     * @param asset The address of the asset to be supplied\n     * @param amount The amount of the asset to be supplied\n     * @param to The address receiving the aTokens\n     * @param referralCode The referral code to pass to Aave\n     */\n    function _supply(\n        address asset,\n        uint256 amount,\n        address to,\n        uint16 referralCode\n    ) internal override {\n        POOL.supply(asset, amount, to, referralCode);\n    }\n\n    /**\n     * @dev Swaps one type of debt to another. Therefore this methods performs the following actions in order:\n     * 1. Delegate credit in new debt\n     * 2. Flashloan in new debt\n     * 3. swap new debt to old debt\n     * 4. repay old debt\n     * @param debtSwapParams the parameters describing the swap\n     * @param creditDelegationPermit optional permit for credit delegation\n     * @param collateralATokenPermit optional permit for collateral aToken\n     */\n    function swapDebt(\n        DebtSwapParams memory debtSwapParams,\n        CreditDelegationInput memory creditDelegationPermit,\n        PermitInput memory collateralATokenPermit\n    ) external {\n        uint256 excessBefore = IERC20Detailed(debtSwapParams.newDebtAsset)\n            .balanceOf(address(this));\n        // delegate credit\n        if (creditDelegationPermit.deadline != 0) {\n            ICreditDelegationToken(creditDelegationPermit.debtToken)\n                .delegationWithSig(\n                    msg.sender,\n                    address(this),\n                    creditDelegationPermit.value,\n                    creditDelegationPermit.deadline,\n                    creditDelegationPermit.v,\n                    creditDelegationPermit.r,\n                    creditDelegationPermit.s\n                );\n        }\n        // Default to the entire debt if an amount greater than it is passed.\n        (address vToken, address sToken, ) = _getReserveData(\n            debtSwapParams.debtAsset\n        );\n        uint256 maxDebtRepayAmount = debtSwapParams.debtRateMode == 2\n            ? IERC20WithPermit(vToken).balanceOf(msg.sender)\n            : IERC20WithPermit(sToken).balanceOf(msg.sender);\n\n        if (debtSwapParams.debtRepayAmount > maxDebtRepayAmount) {\n            debtSwapParams.debtRepayAmount = maxDebtRepayAmount;\n        }\n        FlashParams memory flashParams = FlashParams({\n            debtAsset: debtSwapParams.debtAsset,\n            debtRepayAmount: debtSwapParams.debtRepayAmount,\n            debtRateMode: debtSwapParams.debtRateMode,\n            nestedFlashloanDebtAsset: address(0),\n            nestedFlashloanDebtAmount: 0,\n            user: msg.sender,\n            swapData: debtSwapParams.swapData\n        });\n\n        // If we need extra collateral, execute the flashloan with the collateral asset instead of the debt asset.\n        if (debtSwapParams.extraCollateralAsset != address(0)) {\n            // Permit collateral aToken if needed.\n            if (collateralATokenPermit.deadline != 0) {\n                collateralATokenPermit.aToken.permit(\n                    msg.sender,\n                    address(this),\n                    collateralATokenPermit.value,\n                    collateralATokenPermit.deadline,\n                    collateralATokenPermit.v,\n                    collateralATokenPermit.r,\n                    collateralATokenPermit.s\n                );\n            }\n            flashParams.nestedFlashloanDebtAsset = debtSwapParams.newDebtAsset;\n            flashParams.nestedFlashloanDebtAmount = debtSwapParams\n                .maxNewDebtAmount;\n            // Execute the flashloan with the extra collateral asset.\n            _flash(\n                flashParams,\n                debtSwapParams.extraCollateralAsset,\n                debtSwapParams.extraCollateralAmount\n            );\n        } else {\n            // Execute the flashloan with the debt asset.\n            _flash(\n                flashParams,\n                debtSwapParams.newDebtAsset,\n                debtSwapParams.maxNewDebtAmount\n            );\n        }\n\n        // use excess to repay parts of flash debt\n        uint256 excessAfter = IERC20Detailed(debtSwapParams.newDebtAsset)\n            .balanceOf(address(this));\n        // with wrapped flashloans there is the chance of 1 wei inaccuracy on transfer & withdrawal\n        // this might lead to a slight excess decrease\n        uint256 excess = excessAfter > excessBefore\n            ? excessAfter - excessBefore\n            : 0;\n        if (excess > 0) {\n            _conditionalRenewAllowance(debtSwapParams.newDebtAsset, excess);\n            POOL.repay(debtSwapParams.newDebtAsset, excess, 2, msg.sender);\n        }\n    }\n\n    function _flash(\n        FlashParams memory flashParams,\n        address asset,\n        uint256 amount\n    ) internal virtual {\n        bytes memory params = abi.encode(flashParams);\n        address[] memory assets = new address[](1);\n        assets[0] = asset;\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = amount;\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0; // no debt, 0 = no debt, 1 = stable, 2 = variable\n        // execute flash loan\n        POOL.flashLoan(\n            address(this),\n            assets,\n            amounts,\n            modes,\n            address(this),\n            params,\n            REFERRER\n        );\n    }\n\n    function _nestedFlash(\n        address asset,\n        uint256 amount,\n        FlashParams memory params\n    ) internal {\n        bytes memory innerParams = abi.encode(params);\n        address[] memory assets = new address[](1);\n        assets[0] = asset;\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = amount;\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0; // no debt, 0 = no debt, 1 = stable, 2 = variable\n        // execute flash loan\n        POOL.flashLoan(\n            address(this),\n            assets,\n            amounts,\n            modes,\n            address(this),\n            innerParams,\n            REFERRER\n        );\n    }\n\n    function executeOperation(\n        address[] memory assets,\n        uint256[] memory amounts,\n        uint256[] memory premiums,\n        address initiator,\n        bytes memory params\n    ) external override returns (bool) {\n        require(msg.sender == address(POOL), \"Callback only from POOL\");\n        require(initiator == address(this), \"Initiator only this contract\");\n\n        uint256 amount = amounts[0];\n        address asset = assets[0];\n        uint256 amountToReturn = amount + premiums[0];\n\n        FlashParams memory flashParams = abi.decode(params, (FlashParams));\n\n        // nested flashloan when using extra collateral\n        if (flashParams.nestedFlashloanDebtAsset != address(0)) {\n            (, , address aToken) = _getReserveData(asset);\n            // pull collateral from the user after flashloan because of potential reentrancy\n            IERC20WithPermit(aToken).safeTransferFrom(\n                flashParams.user,\n                address(this),\n                flashParams.debtRepayAmount\n            );\n            POOL.withdraw(asset, flashParams.debtRepayAmount, address(this));\n\n            FlashParams memory innerFlashParams = FlashParams({\n                debtAsset: flashParams.debtAsset,\n                debtRepayAmount: flashParams.debtRepayAmount,\n                debtRateMode: flashParams.debtRateMode,\n                nestedFlashloanDebtAsset: address(0),\n                nestedFlashloanDebtAmount: 0,\n                user: flashParams.user,\n                swapData: flashParams.swapData\n            });\n            _nestedFlash(\n                flashParams.nestedFlashloanDebtAsset,\n                flashParams.nestedFlashloanDebtAmount,\n                innerFlashParams\n            );\n\n            // revert if returned amount is not enough to repay the flashloan\n            require(\n                IERC20WithPermit(asset).balanceOf(address(this)) >=\n                    amountToReturn,\n                \"Insufficient amount to repay flashloan\"\n            );\n\n            IERC20WithPermit(asset).safeApprove(address(POOL), amountToReturn);\n            return true;\n        }\n\n        // Executing the original flashloan\n        {\n            // Swap debt\n            _buyOnOdos(\n                IERC20Detailed(asset),\n                IERC20Detailed(flashParams.debtAsset),\n                amount,\n                flashParams.debtRepayAmount,\n                flashParams.swapData\n            );\n\n            // Repay old debt\n            IERC20WithPermit(flashParams.debtAsset).safeApprove(\n                address(POOL),\n                flashParams.debtRepayAmount\n            );\n            POOL.repay(\n                flashParams.debtAsset,\n                flashParams.debtRepayAmount,\n                flashParams.debtRateMode,\n                flashParams.user\n            );\n\n            // Borrow new debt to repay flashloan\n            POOL.borrow(\n                asset,\n                amountToReturn,\n                2, // variable rate mode\n                REFERRER,\n                flashParams.user\n            );\n\n            // revert if returned amount is not enough to repay the flashloan\n            require(\n                IERC20WithPermit(asset).balanceOf(address(this)) >=\n                    amountToReturn,\n                \"Insufficient amount to repay flashloan\"\n            );\n\n            IERC20WithPermit(asset).safeApprove(address(POOL), amountToReturn);\n            return true;\n        }\n    }\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/OdosLiquiditySwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {IERC20Detailed} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\";\nimport {IPoolAddressesProvider} from \"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\";\nimport {SafeERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\";\nimport {BaseOdosSellAdapter} from \"./BaseOdosSellAdapter.sol\";\nimport {ReentrancyGuard} from \"../../dependencies/openzeppelin/ReentrancyGuard.sol\";\nimport {IOdosRouterV2} from \"contracts/odos/interface/IOdosRouterV2.sol\";\nimport {DataTypes} from \"contracts/dlend/core/protocol/libraries/types/DataTypes.sol\";\nimport {IAaveFlashLoanReceiver} from \"../curve/interfaces/IAaveFlashLoanReceiver.sol\";\nimport {IOdosLiquiditySwapAdapter} from \"./interfaces/IOdosLiquiditySwapAdapter.sol\";\nimport {IERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20.sol\";\n\n/**\n * @title OdosLiquiditySwapAdapter\n * @notice Adapter to swap liquidity using Odos\n */\ncontract OdosLiquiditySwapAdapter is\n    BaseOdosSellAdapter,\n    ReentrancyGuard,\n    IAaveFlashLoanReceiver,\n    IOdosLiquiditySwapAdapter\n{\n    using SafeERC20 for IERC20;\n\n    // unique identifier to track usage via flashloan events\n    uint16 public constant REFERRER = 43980; // uint16(uint256(keccak256(abi.encode('liquidity-swap-adapter'))) / type(uint16).max)\n\n    constructor(\n        IPoolAddressesProvider addressesProvider,\n        address pool,\n        IOdosRouterV2 swapRouter,\n        address owner\n    ) BaseOdosSellAdapter(addressesProvider, pool, swapRouter) {\n        transferOwnership(owner);\n        // set initial approval for all reserves\n        address[] memory reserves = POOL.getReservesList();\n        for (uint256 i = 0; i < reserves.length; i++) {\n            IERC20(reserves[i]).safeApprove(address(POOL), type(uint256).max);\n        }\n    }\n\n    /**\n     * @dev Implementation of the reserve data getter from the base adapter\n     * @param asset The address of the asset\n     * @return The address of the vToken, sToken and aToken\n     */\n    function _getReserveData(\n        address asset\n    ) internal view override returns (address, address, address) {\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(asset);\n        return (\n            reserveData.variableDebtTokenAddress,\n            reserveData.stableDebtTokenAddress,\n            reserveData.aTokenAddress\n        );\n    }\n\n    /**\n     * @dev Implementation of the supply function from the base adapter\n     * @param asset The address of the asset to be supplied\n     * @param amount The amount of the asset to be supplied\n     * @param to The address receiving the aTokens\n     * @param referralCode The referral code to pass to Aave\n     */\n    function _supply(\n        address asset,\n        uint256 amount,\n        address to,\n        uint16 referralCode\n    ) internal override {\n        POOL.supply(asset, amount, to, referralCode);\n    }\n\n    /// @inheritdoc IOdosLiquiditySwapAdapter\n    function swapLiquidity(\n        LiquiditySwapParams memory liquiditySwapParams,\n        PermitInput memory collateralATokenPermit\n    ) external nonReentrant {\n        // true if flashloan is needed to swap liquidity\n        if (!liquiditySwapParams.withFlashLoan) {\n            _swapAndDeposit(liquiditySwapParams, collateralATokenPermit);\n        } else {\n            // flashloan of the current collateral asset\n            _flash(liquiditySwapParams, collateralATokenPermit);\n        }\n    }\n\n    /**\n     * @dev Executes the collateral swap after receiving the flash-borrowed assets\n     * @dev Workflow:\n     * 1. Sell flash-borrowed asset for new collateral asset\n     * 2. Supply new collateral asset\n     * 3. Pull aToken collateral from user and withdraw from Pool\n     * 4. Repay flashloan\n     * @param assets The addresses of the flash-borrowed assets\n     * @param amounts The amounts of the flash-borrowed assets\n     * @param premiums The premiums of the flash-borrowed assets\n     * @param initiator The address of the flashloan initiator\n     * @param params The byte-encoded params passed when initiating the flashloan\n     * @return True if the execution of the operation succeeds, false otherwise\n     */\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        if (msg.sender != address(POOL)) {\n            revert CallerMustBePool(msg.sender, address(POOL));\n        }\n        if (initiator != address(this)) {\n            revert InitiatorMustBeThis(initiator, address(this));\n        }\n\n        (\n            LiquiditySwapParams memory liquiditySwapParams,\n            PermitInput memory collateralATokenPermit\n        ) = abi.decode(params, (LiquiditySwapParams, PermitInput));\n\n        address flashLoanAsset = assets[0];\n        uint256 flashLoanAmount = amounts[0];\n        uint256 flashLoanPremium = premiums[0];\n\n        // sell the flashLoanAmount minus the premium, so flashloan repayment is guaranteed\n        // flashLoan premium stays in the contract\n        uint256 amountReceived = _sellOnOdos(\n            IERC20Detailed(flashLoanAsset),\n            IERC20Detailed(liquiditySwapParams.newCollateralAsset),\n            flashLoanAmount - flashLoanPremium,\n            liquiditySwapParams.newCollateralAmount,\n            liquiditySwapParams.swapData\n        );\n\n        // supplies the received asset(newCollateralAsset) from swap to Aave Pool\n        _conditionalRenewAllowance(\n            liquiditySwapParams.newCollateralAsset,\n            amountReceived\n        );\n        _supply(\n            liquiditySwapParams.newCollateralAsset,\n            amountReceived,\n            liquiditySwapParams.user,\n            REFERRER\n        );\n\n        // pulls flashLoanAmount amount of flash-borrowed asset from the user\n        _pullATokenAndWithdraw(\n            flashLoanAsset,\n            liquiditySwapParams.user,\n            flashLoanAmount,\n            collateralATokenPermit\n        );\n\n        // flashloan repayment\n        _conditionalRenewAllowance(\n            flashLoanAsset,\n            flashLoanAmount + flashLoanPremium\n        );\n        return true;\n    }\n\n    /**\n     * @dev Swaps the collateral asset and supplies the received asset to the Aave Pool\n     * @dev Workflow:\n     * 1. Pull aToken collateral from user and withdraw from Pool\n     * 2. Sell asset for new collateral asset\n     * 3. Supply new collateral asset\n     * @param liquiditySwapParams struct describing the liquidity swap\n     * @param collateralATokenPermit Permit for aToken corresponding to old collateral asset from the user\n     * @return The amount received from the swap of new collateral asset, that is now supplied to the Aave Pool\n     */\n    function _swapAndDeposit(\n        LiquiditySwapParams memory liquiditySwapParams,\n        PermitInput memory collateralATokenPermit\n    ) internal returns (uint256) {\n        uint256 collateralAmountReceived = _pullATokenAndWithdraw(\n            liquiditySwapParams.collateralAsset,\n            liquiditySwapParams.user,\n            liquiditySwapParams.collateralAmountToSwap,\n            collateralATokenPermit\n        );\n\n        // sell(exact in) old collateral asset to new collateral asset\n        uint256 amountReceived = _sellOnOdos(\n            IERC20Detailed(liquiditySwapParams.collateralAsset),\n            IERC20Detailed(liquiditySwapParams.newCollateralAsset),\n            collateralAmountReceived,\n            liquiditySwapParams.newCollateralAmount,\n            liquiditySwapParams.swapData\n        );\n\n        // supply the received asset(newCollateralAsset) from swap to the Aave Pool\n        _conditionalRenewAllowance(\n            liquiditySwapParams.newCollateralAsset,\n            amountReceived\n        );\n        _supply(\n            liquiditySwapParams.newCollateralAsset,\n            amountReceived,\n            liquiditySwapParams.user,\n            REFERRER\n        );\n\n        return amountReceived;\n    }\n\n    /**\n     * @dev Triggers the flashloan passing encoded params for the collateral swap\n     * @param liquiditySwapParams struct describing the liquidity swap\n     * @param collateralATokenPermit optional permit for old collateral's aToken\n     */\n    function _flash(\n        LiquiditySwapParams memory liquiditySwapParams,\n        PermitInput memory collateralATokenPermit\n    ) internal virtual {\n        bytes memory params = abi.encode(\n            liquiditySwapParams,\n            collateralATokenPermit\n        );\n        address[] memory assets = new address[](1);\n        assets[0] = liquiditySwapParams.collateralAsset;\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = liquiditySwapParams.collateralAmountToSwap;\n        uint256[] memory interestRateModes = new uint256[](1);\n        interestRateModes[0] = 0;\n\n        POOL.flashLoan(\n            address(this),\n            assets,\n            amounts,\n            interestRateModes,\n            address(this),\n            params,\n            REFERRER\n        );\n    }\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/OdosRepayAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {DataTypes} from \"contracts/dlend/core/protocol/libraries/types/DataTypes.sol\";\nimport {IOdosRepayAdapter} from \"./interfaces/IOdosRepayAdapter.sol\";\nimport {BaseOdosSellAdapter} from \"./BaseOdosSellAdapter.sol\";\nimport {SafeERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\";\nimport {IERC20WithPermit} from \"contracts/dlend/core/interfaces/IERC20WithPermit.sol\";\nimport {IOdosRouterV2} from \"contracts/odos/interface/IOdosRouterV2.sol\";\nimport {IERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20.sol\";\nimport {IERC20Detailed} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\";\nimport {IPoolAddressesProvider} from \"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\";\n\n/**\n * @title OdosRepayAdapter\n * @notice Implements the logic for repaying a debt using a different asset as source\n */\ncontract OdosRepayAdapter is BaseOdosSellAdapter, IOdosRepayAdapter {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20WithPermit;\n\n    constructor(\n        IPoolAddressesProvider addressesProvider,\n        address pool,\n        IOdosRouterV2 _swapRouter,\n        address owner\n    ) BaseOdosSellAdapter(addressesProvider, pool, _swapRouter) {\n        transferOwnership(owner);\n    }\n\n    /**\n     * @dev Swaps collateral for another asset with Odos, and uses that asset to repay a debt.\n     * @param repayParams The parameters of the repay\n     * @param permitInput The parameters of the permit signature, to approve collateral aToken\n     * @return the amount repaid\n     */\n    function swapAndRepay(\n        RepayParams memory repayParams,\n        PermitInput memory permitInput\n    ) external returns (uint256) {\n        address collateralAsset = repayParams.collateralAsset;\n        address debtAsset = repayParams.debtAsset;\n\n        // The swapAndRepay will pull the tokens from the user aToken with approve() or permit()\n        uint256 collateralATokenAmount = _pullATokenAndWithdraw(\n            collateralAsset,\n            msg.sender,\n            repayParams.collateralAmount,\n            permitInput\n        );\n\n        // Swap collateral to get the debt asset\n        uint256 amountOut = _sellOnOdos(\n            IERC20Detailed(collateralAsset),\n            IERC20Detailed(debtAsset),\n            collateralATokenAmount,\n            repayParams.minAmountToReceive,\n            repayParams.swapData\n        );\n\n        // Check if the swap provides the necessary repay amount\n        if (amountOut < repayParams.repayAmount) {\n            revert InsufficientAmountToRepay(\n                amountOut,\n                repayParams.repayAmount\n            );\n        }\n\n        // Check and renew allowance if necessary\n        _conditionalRenewAllowance(debtAsset, amountOut);\n\n        // Repay the debt to the POOL\n        POOL.repay(\n            debtAsset,\n            repayParams.repayAmount,\n            repayParams.rateMode,\n            repayParams.user\n        );\n\n        // Send remaining debt asset to the msg.sender\n        uint256 remainingBalance = IERC20Detailed(debtAsset).balanceOf(\n            address(this)\n        );\n        if (remainingBalance > 0) {\n            IERC20(debtAsset).safeTransfer(msg.sender, remainingBalance);\n        }\n\n        return amountOut;\n    }\n\n    /**\n     * @dev Implementation of the reserve data getter from the base adapter\n     * @param asset The address of the asset\n     * @return The address of the vToken, sToken and aToken\n     */\n    function _getReserveData(\n        address asset\n    ) internal view override returns (address, address, address) {\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(asset);\n        return (\n            reserveData.variableDebtTokenAddress,\n            reserveData.stableDebtTokenAddress,\n            reserveData.aTokenAddress\n        );\n    }\n\n    /**\n     * @dev Implementation of the supply function from the base adapter\n     * @param asset The address of the asset to be supplied\n     * @param amount The amount of the asset to be supplied\n     * @param to The address receiving the aTokens\n     * @param referralCode The referral code to pass to Aave\n     */\n    function _supply(\n        address asset,\n        uint256 amount,\n        address to,\n        uint16 referralCode\n    ) internal override {\n        POOL.supply(asset, amount, to, referralCode);\n    }\n}\n"
    },
    "contracts/dlend/periphery/adapters/odos/OdosWithdrawSwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport {DataTypes} from \"contracts/dlend/core/protocol/libraries/types/DataTypes.sol\";\nimport {IERC20Detailed} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\";\nimport {IPoolAddressesProvider} from \"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\";\nimport {BaseOdosSellAdapter} from \"./BaseOdosSellAdapter.sol\";\nimport {SafeERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"../../dependencies/openzeppelin/ReentrancyGuard.sol\";\nimport {IOdosWithdrawSwapAdapter} from \"./interfaces/IOdosWithdrawSwapAdapter.sol\";\nimport {IOdosRouterV2} from \"contracts/odos/interface/IOdosRouterV2.sol\";\nimport {IERC20} from \"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20.sol\";\n\n/**\n * @title OdosWithdrawSwapAdapter\n * @notice Adapter to swap then withdraw using Odos\n */\ncontract OdosWithdrawSwapAdapter is\n    BaseOdosSellAdapter,\n    ReentrancyGuard,\n    IOdosWithdrawSwapAdapter\n{\n    using SafeERC20 for IERC20;\n\n    constructor(\n        IPoolAddressesProvider addressesProvider,\n        address pool,\n        IOdosRouterV2 swapRouter,\n        address owner\n    ) BaseOdosSellAdapter(addressesProvider, pool, swapRouter) {\n        transferOwnership(owner);\n    }\n\n    /**\n     * @dev Implementation of the reserve data getter from the base adapter\n     * @param asset The address of the asset\n     * @return The address of the vToken, sToken and aToken\n     */\n    function _getReserveData(\n        address asset\n    ) internal view override returns (address, address, address) {\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(asset);\n        return (\n            reserveData.variableDebtTokenAddress,\n            reserveData.stableDebtTokenAddress,\n            reserveData.aTokenAddress\n        );\n    }\n\n    /**\n     * @dev Implementation of the supply function from the base adapter\n     * @param asset The address of the asset to be supplied\n     * @param amount The amount of the asset to be supplied\n     * @param to The address receiving the aTokens\n     * @param referralCode The referral code to pass to Aave\n     */\n    function _supply(\n        address asset,\n        uint256 amount,\n        address to,\n        uint16 referralCode\n    ) internal override {\n        POOL.supply(asset, amount, to, referralCode);\n    }\n\n    /// @inheritdoc IOdosWithdrawSwapAdapter\n    function withdrawAndSwap(\n        WithdrawSwapParams memory withdrawSwapParams,\n        PermitInput memory permitInput\n    ) external nonReentrant {\n        // pulls liquidity asset from the user and withdraw\n        _pullATokenAndWithdraw(\n            withdrawSwapParams.oldAsset,\n            withdrawSwapParams.user,\n            withdrawSwapParams.oldAssetAmount,\n            permitInput\n        );\n\n        // sell(exact in) withdrawn asset from Aave Pool to new asset\n        uint256 amountReceived = _sellOnOdos(\n            IERC20Detailed(withdrawSwapParams.oldAsset),\n            IERC20Detailed(withdrawSwapParams.newAsset),\n            withdrawSwapParams.oldAssetAmount,\n            withdrawSwapParams.minAmountToReceive,\n            withdrawSwapParams.swapData\n        );\n\n        // transfer new asset to the user\n        IERC20(withdrawSwapParams.newAsset).safeTransfer(\n            withdrawSwapParams.user,\n            amountReceived\n        );\n    }\n}\n"
    },
    "contracts/dlend/periphery/dependencies/openzeppelin/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/odos/interface/IOdosRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\n/**\n * @dev Interface for Odos Router V2.\n * @dev Generated from original ABI: https://fraxscan.com/address/0x56c85a254dd12ee8d9c04049a4ab62769ce98210#code\n */\npragma solidity ^0.8.20;\n\ninterface IOdosRouterV2 {\n    struct swapTokenInfo {\n        address inputToken;\n        uint256 inputAmount;\n        address inputReceiver;\n        address outputToken;\n        uint256 outputQuote;\n        uint256 outputMin;\n        address outputReceiver;\n    }\n\n    struct inputTokenInfo {\n        address tokenAddress;\n        uint256 amountIn;\n        address receiver;\n    }\n\n    struct outputTokenInfo {\n        address tokenAddress;\n        uint256 relativeValue;\n        address receiver;\n    }\n\n    struct permit2Info {\n        address contractAddress;\n        uint256 nonce;\n        uint256 deadline;\n        bytes signature;\n    }\n\n    event Swap(\n        address sender,\n        uint256 inputAmount,\n        address inputToken,\n        uint256 amountOut,\n        address outputToken,\n        int256 slippage,\n        uint32 referralCode\n    );\n\n    event SwapMulti(\n        address sender,\n        uint256[] amountsIn,\n        address[] tokensIn,\n        uint256[] amountsOut,\n        address[] tokensOut,\n        uint32 referralCode\n    );\n\n    function FEE_DENOM() external view returns (uint256);\n\n    function REFERRAL_WITH_FEE_THRESHOLD() external view returns (uint256);\n\n    function addressList(uint256) external view returns (address);\n\n    function owner() external view returns (address);\n\n    function referralLookup(\n        uint32\n    )\n        external\n        view\n        returns (uint64 referralFee, address beneficiary, bool registered);\n\n    function registerReferralCode(\n        uint32 _referralCode,\n        uint64 _referralFee,\n        address _beneficiary\n    ) external;\n\n    function renounceOwnership() external;\n\n    function setSwapMultiFee(uint256 _swapMultiFee) external;\n\n    function swap(\n        swapTokenInfo calldata tokenInfo,\n        bytes calldata pathDefinition,\n        address executor,\n        uint32 referralCode\n    ) external payable returns (uint256 amountOut);\n\n    function swapCompact() external payable returns (uint256);\n\n    function swapMulti(\n        inputTokenInfo[] calldata inputs,\n        outputTokenInfo[] calldata outputs,\n        uint256 valueOutMin,\n        bytes calldata pathDefinition,\n        address executor,\n        uint32 referralCode\n    ) external payable returns (uint256[] memory amountsOut);\n\n    function swapMultiCompact()\n        external\n        payable\n        returns (uint256[] memory amountsOut);\n\n    function swapMultiFee() external view returns (uint256);\n\n    function swapMultiPermit2(\n        permit2Info calldata permit2,\n        inputTokenInfo[] calldata inputs,\n        outputTokenInfo[] calldata outputs,\n        uint256 valueOutMin,\n        bytes calldata pathDefinition,\n        address executor,\n        uint32 referralCode\n    ) external payable returns (uint256[] memory amountsOut);\n\n    function swapPermit2(\n        permit2Info calldata permit2,\n        swapTokenInfo calldata tokenInfo,\n        bytes calldata pathDefinition,\n        address executor,\n        uint32 referralCode\n    ) external returns (uint256 amountOut);\n\n    function swapRouterFunds(\n        inputTokenInfo[] calldata inputs,\n        outputTokenInfo[] calldata outputs,\n        uint256 valueOutMin,\n        bytes calldata pathDefinition,\n        address executor\n    ) external returns (uint256[] memory amountsOut);\n\n    function transferOwnership(address newOwner) external;\n\n    function transferRouterFunds(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        address dest\n    ) external;\n\n    function writeAddressList(address[] calldata addresses) external;\n\n    receive() external payable;\n}\n"
    },
    "contracts/odos/OdosSwapUtils.sol": {
      "content": "// SPDX-License-Identifier: GNU AGPLv3\npragma solidity ^0.8.20;\n\nimport \"./interface/IOdosRouterV2.sol\";\nimport \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\";\n\n/**\n * @title OdosSwapUtils\n * @notice Library for handling Odos swaps in liquidator contracts\n */\nlibrary OdosSwapUtils {\n    using SafeTransferLib for ERC20;\n\n    /// @notice Custom error for failed swap with no revert reason\n    error SwapFailed();\n    /// @notice Custom error when actual output amount is less than expected\n    error InsufficientOutput(uint256 expected, uint256 actual);\n\n    /**\n     * @notice Performs an swap operation using Odos router with swap data\n     * @param router Odos router contract\n     * @param inputToken Input token\n     * @param maxIn Maximum input amount\n     * @param exactOut Exact output amount\n     * @param swapData Encoded swap path data\n     */\n    function excuteSwapOperation(\n        IOdosRouterV2 router,\n        address inputToken,\n        uint256 maxIn,\n        uint256 exactOut,\n        bytes memory swapData\n    ) internal returns (uint256) {\n        ERC20(inputToken).approve(address(router), maxIn);\n\n        (bool success, bytes memory result) = address(router).call(swapData);\n        if (!success) {\n            // Decode the revert reason if present\n            if (result.length > 0) {\n                // First try to decode the standard revert reason\n                assembly {\n                    let resultLength := mload(result)\n                    revert(add(32, result), resultLength)\n                }\n            }\n            revert SwapFailed();\n        }\n\n        uint256 actualAmountOut;\n        assembly {\n            actualAmountOut := mload(add(result, 32))\n        }\n\n        if (actualAmountOut < exactOut) {\n            revert InsufficientOutput(exactOut, actualAmountOut);\n        }\n\n        return actualAmountOut;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}