{
  "address": "0xCBfe96823292253239ea719eb538ec2DAA83Fb6A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtBase",
          "type": "uint256"
        }
      ],
      "name": "CollateralLessThanDebt",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedTargetLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtBase",
          "type": "uint256"
        }
      ],
      "name": "DenominatorIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedTargetLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtBase",
          "type": "uint256"
        }
      ],
      "name": "FailedGettingCollateralTokenDepositAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedTargetLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtBase",
          "type": "uint256"
        }
      ],
      "name": "FailedGettingDebtTokenRepayAmountDenominator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedTargetLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtBase",
          "type": "uint256"
        }
      ],
      "name": "FailedGettingDebtTokenRepayAmountNumerator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InputCollateralTokenAmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InputDebtTokenAmountIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "leverageBps",
          "type": "uint256"
        }
      ],
      "name": "InvalidLeverage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawalFeeBps",
          "type": "uint256"
        }
      ],
      "name": "InvalidWithdrawalFeeBps",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtBase",
          "type": "uint256"
        }
      ],
      "name": "TotalCollateralBaseIsLessThanTotalDebtBase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalCollateralBaseIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalCollateralBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDebtBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentLeverageBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetLeverageBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "subsidyBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralTokenPriceInBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtTokenPriceInBase",
              "type": "uint256"
            }
          ],
          "internalType": "struct DLoopCoreLogic.QuoteRebalanceParams",
          "name": "p",
          "type": "tuple"
        }
      ],
      "name": "quoteRebalanceAmountToReachTargetLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inputTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "estimatedOutputTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "int8",
          "name": "direction",
          "type": "int8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subsidyBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralTokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralTokenPriceInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtTokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtTokenPriceInBase",
          "type": "uint256"
        }
      ],
      "name": "quoteRebalanceAmountToReachTargetLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inputTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "estimatedOutputTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "int8",
          "name": "direction",
          "type": "int8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6bec36354dc50383dbc4fd2e6c9384d37f857515fb6ebe4d64b0c940efac78a6",
  "receipt": {
    "to": null,
    "from": "0xAD5BDAD791f19c1aF34bb0E71F453cf8A19f34D6",
    "contractAddress": "0xCBfe96823292253239ea719eb538ec2DAA83Fb6A",
    "transactionIndex": 2,
    "gasUsed": "606522",
    "logsBloom": "0x
    "blockHash": "0x5bf1abdea530f6688e5e3d6cda24d608929b5d343f383353f49c94d0ee47140f",
    "transactionHash": "0x6bec36354dc50383dbc4fd2e6c9384d37f857515fb6ebe4d64b0c940efac78a6",
    "logs": [],
    "blockNumber": 51227831,
    "cumulativeGasUsed": "1011877",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e3037099ae49567c32f4ef7ad4bafabc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"}],\"name\":\"CollateralLessThanDebt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTargetLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"}],\"name\":\"DenominatorIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTargetLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"}],\"name\":\"FailedGettingCollateralTokenDepositAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTargetLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"}],\"name\":\"FailedGettingDebtTokenRepayAmountDenominator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTargetLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"}],\"name\":\"FailedGettingDebtTokenRepayAmountNumerator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputCollateralTokenAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputDebtTokenAmountIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leverageBps\",\"type\":\"uint256\"}],\"name\":\"InvalidLeverage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeBps\",\"type\":\"uint256\"}],\"name\":\"InvalidWithdrawalFeeBps\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"}],\"name\":\"TotalCollateralBaseIsLessThanTotalDebtBase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalCollateralBaseIsZero\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subsidyBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenPriceInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtTokenPriceInBase\",\"type\":\"uint256\"}],\"internalType\":\"struct DLoopCoreLogic.QuoteRebalanceParams\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"quoteRebalanceAmountToReachTargetLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedOutputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"direction\",\"type\":\"int8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subsidyBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenPriceInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtTokenPriceInBase\",\"type\":\"uint256\"}],\"name\":\"quoteRebalanceAmountToReachTargetLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedOutputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"int8\",\"name\":\"direction\",\"type\":\"int8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"quoteRebalanceAmountToReachTargetLeverage(DLoopCoreLogic.QuoteRebalanceParams)\":{\"details\":\"Struct-based overload that forwards to the parameterized implementation. Using a struct reduces stack usage.\"},\"quoteRebalanceAmountToReachTargetLeverage(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Quotes the rebalance amount to reach the target leverage in token unit\",\"params\":{\"collateralTokenDecimals\":\"The collateral token decimals\",\"collateralTokenPriceInBase\":\"The collateral token price in base currency\",\"currentLeverageBps\":\"The current leverage in basis points unit\",\"debtTokenDecimals\":\"The debt token decimals\",\"debtTokenPriceInBase\":\"The debt token price in base currency\",\"subsidyBps\":\"The subsidy in basis points unit\",\"targetLeverageBps\":\"The target leverage in basis points unit\",\"totalCollateralBase\":\"The total collateral base\",\"totalDebtBase\":\"The total debt base\"},\"returns\":{\"direction\":\"The direction of the rebalance (1 for increase, -1 for decrease, 0 means no rebalance)\",\"estimatedOutputTokenAmount\":\"The estimated output token amount after the rebalance (in token unit)\",\"inputTokenAmount\":\"The amount of token to call increaseLeverage or decreaseLeverage (in token unit)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This library contains the stateless implementation of the DLoopCore logic\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/dloop/core/DLoopCoreLogic.sol\":\"DLoopCoreLogic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/common/BasisPointConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nlibrary BasisPointConstants {\\n    // Shared definitions of how we represent percentages and basis points\\n    uint16 public constant ONE_BPS = 100; // 1 basis point with 2 decimals\\n    uint32 public constant ONE_PERCENT_BPS = ONE_BPS * 100;\\n    uint32 public constant ONE_HUNDRED_PERCENT_BPS = ONE_PERCENT_BPS * 100;\\n}\\n\",\"keccak256\":\"0xcaa3c2f2eaf2de426875dafae0956015204c7cf85939010129192c2da4aeb54e\",\"license\":\"MIT\"},\"contracts/common/Compare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nlibrary Compare {\\n    /**\\n     * @dev Returns true if observed and expected differ by no more than the tolerance (absolute comparison).\\n     *      This is useful for allowing small rounding differences (e.g., 1 wei) in balance deltas.\\n     * @param observed The observed value (e.g., balance delta actually seen)\\n     * @param expected The expected value\\n     * @param tolerance The allowed absolute difference between observed and expected\\n     */\\n    function isWithinTolerance(uint256 observed, uint256 expected, uint256 tolerance) internal pure returns (bool) {\\n        if (observed > expected) {\\n            return observed - expected <= tolerance;\\n        }\\n        return expected - observed <= tolerance;\\n    }\\n\\n    /**\\n     * @dev Direction of expected balance change between two observations\\n     */\\n    enum BalanceDirection {\\n        Increase,\\n        Decrease\\n    }\\n\\n    struct BalanceCheckResult {\\n        bool directionOk;\\n        uint256 observedDelta;\\n        bool toleranceOk;\\n    }\\n\\n    /**\\n     * @dev Checks a balance change from before to after against an expected delta and tolerance.\\n     *      This helper allows callers to keep custom error types local while sharing the core logic.\\n     * @param beforeBalance The balance before the operation\\n     * @param afterBalance The balance after the operation\\n     * @param expectedDelta The expected absolute change amount\\n     * @param tolerance The allowed absolute difference between observed and expected\\n     * @param direction The expected direction of change (Increase or Decrease)\\n     * @return result Struct containing: directionOk, observedDelta, toleranceOk\\n     */\\n    function checkBalanceDelta(\\n        uint256 beforeBalance,\\n        uint256 afterBalance,\\n        uint256 expectedDelta,\\n        uint256 tolerance,\\n        BalanceDirection direction\\n    ) internal pure returns (BalanceCheckResult memory result) {\\n        if (direction == BalanceDirection.Increase) {\\n            result.directionOk = afterBalance > beforeBalance;\\n            if (result.directionOk) {\\n                result.observedDelta = afterBalance - beforeBalance;\\n            }\\n        } else {\\n            result.directionOk = afterBalance < beforeBalance;\\n            if (result.directionOk) {\\n                result.observedDelta = beforeBalance - afterBalance;\\n            }\\n        }\\n\\n        if (!result.directionOk) {\\n            // Short-circuit: when direction is not satisfied, tolerance check is irrelevant\\n            result.toleranceOk = false;\\n            return result;\\n        }\\n\\n        result.toleranceOk = isWithinTolerance(result.observedDelta, expectedDelta, tolerance);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3c324563611cb278ba500d6c370268b3159bc895c2b5523a933a620e5b26a78e\",\"license\":\"MIT\"},\"contracts/common/WithdrawalFeeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { BasisPointConstants } from \\\"./BasisPointConstants.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary WithdrawalFeeMath {\\n    uint256 internal constant _SCALE = BasisPointConstants.ONE_HUNDRED_PERCENT_BPS;\\n\\n    function calculateWithdrawalFee(uint256 grossAmount, uint256 feeBps) internal pure returns (uint256) {\\n        if (grossAmount == 0 || feeBps == 0) {\\n            return 0;\\n        }\\n        if (feeBps >= _SCALE) {\\n            return grossAmount;\\n        }\\n        return Math.mulDiv(grossAmount, feeBps, _SCALE);\\n    }\\n\\n    function netAfterFee(uint256 grossAmount, uint256 feeBps) internal pure returns (uint256) {\\n        if (grossAmount == 0) {\\n            return 0;\\n        }\\n        if (feeBps == 0) {\\n            return grossAmount;\\n        }\\n        if (feeBps >= _SCALE) {\\n            return 0;\\n        }\\n\\n        uint256 fee = calculateWithdrawalFee(grossAmount, feeBps);\\n        if (fee >= grossAmount) {\\n            return 0;\\n        }\\n        return grossAmount - fee;\\n    }\\n\\n    function grossFromNet(uint256 netAmount, uint256 feeBps) internal pure returns (uint256) {\\n        if (netAmount == 0 || feeBps == 0) {\\n            return netAmount;\\n        }\\n        if (feeBps >= _SCALE) {\\n            return 0;\\n        }\\n\\n        uint256 grossAmount = Math.mulDiv(netAmount, _SCALE, _SCALE - feeBps, Math.Rounding.Ceil);\\n\\n        if (grossAmount > 0) {\\n            uint256 alternativeNet = netAfterFee(grossAmount - 1, feeBps);\\n            if (alternativeNet >= netAmount) {\\n                grossAmount -= 1;\\n            }\\n        }\\n\\n        return grossAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x93cc559266dc6cea6515a7580a2b0a36aa2ea486429c402946fb3c4cfcf5be5f\",\"license\":\"MIT\"},\"contracts/vaults/dloop/core/DLoopCoreLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { BasisPointConstants } from \\\"contracts/common/BasisPointConstants.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Compare } from \\\"contracts/common/Compare.sol\\\";\\nimport { WithdrawalFeeMath } from \\\"contracts/common/WithdrawalFeeMath.sol\\\";\\n\\n/**\\n * This library contains the stateless implementation of the DLoopCore logic\\n */\\nlibrary DLoopCoreLogic {\\n    /**\\n     * @dev Aggregated inputs for quoting rebalance amounts. Using a struct reduces stack pressure.\\n     */\\n    struct QuoteRebalanceParams {\\n        uint256 totalCollateralBase;\\n        uint256 totalDebtBase;\\n        uint256 currentLeverageBps;\\n        uint256 targetLeverageBps;\\n        uint256 subsidyBps;\\n        uint256 collateralTokenDecimals;\\n        uint256 collateralTokenPriceInBase;\\n        uint256 debtTokenDecimals;\\n        uint256 debtTokenPriceInBase;\\n    }\\n    error CollateralLessThanDebt(uint256 totalCollateralBase, uint256 totalDebtBase);\\n    error InvalidLeverage(uint256 leverageBps);\\n    error TotalCollateralBaseIsZero();\\n    error TotalCollateralBaseIsLessThanTotalDebtBase(uint256 totalCollateralBase, uint256 totalDebtBase);\\n    error InputCollateralTokenAmountIsZero();\\n    error InputDebtTokenAmountIsZero();\\n    error InvalidWithdrawalFeeBps(uint256 withdrawalFeeBps);\\n    error DenominatorIsZero(uint256 expectedTargetLeverageBps, uint256 totalCollateralBase, uint256 totalDebtBase);\\n    error FailedGettingCollateralTokenDepositAmount(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase\\n    );\\n    error FailedGettingDebtTokenRepayAmountNumerator(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase\\n    );\\n    error FailedGettingDebtTokenRepayAmountDenominator(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase\\n    );\\n\\n    /**\\n     * @dev Gets the current leverage in basis points\\n     * @param totalCollateralBase The total collateral in base currency\\n     * @param totalDebtBase The total debt in base currency\\n     * @return uint256 The current leverage in basis points\\n     */\\n    function getCurrentLeverageBps(uint256 totalCollateralBase, uint256 totalDebtBase) internal pure returns (uint256) {\\n        if (totalCollateralBase < totalDebtBase) {\\n            revert CollateralLessThanDebt(totalCollateralBase, totalDebtBase);\\n        }\\n        if (totalCollateralBase == 0) {\\n            return 0;\\n        }\\n        if (totalCollateralBase == totalDebtBase) {\\n            return type(uint256).max; // infinite leverage\\n        }\\n        // The leverage will be 1 if totalDebtBase is 0 (no more debt)\\n        // In this case, totalCollateralBase > totalDebtBase, thus the denominator is always positive\\n        uint256 leverageBps = ((totalCollateralBase * BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) /\\n            (totalCollateralBase - totalDebtBase));\\n        if (leverageBps < BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert InvalidLeverage(leverageBps);\\n        }\\n        return leverageBps;\\n    }\\n\\n    /**\\n     * @dev Gets the current subsidy in basis points\\n     * @param currentLeverageBps The current leverage in basis points\\n     * @param targetLeverageBps The target leverage in basis points\\n     * @param maxSubsidyBps The maximum subsidy in basis points\\n     * @param minDeviationBps The minimum deviation of leverage from the target leverage in basis points\\n     * @return uint256 The current subsidy in basis points\\n     */\\n    function getCurrentSubsidyBps(\\n        uint256 currentLeverageBps,\\n        uint256 targetLeverageBps,\\n        uint256 maxSubsidyBps,\\n        uint256 minDeviationBps\\n    ) internal pure returns (uint256) {\\n        uint256 subsidyBps;\\n        if (currentLeverageBps > targetLeverageBps) {\\n            uint256 deviationBps = currentLeverageBps - targetLeverageBps;\\n            if (deviationBps < minDeviationBps) {\\n                return 0;\\n            }\\n            subsidyBps = Math.mulDiv(deviationBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS, targetLeverageBps);\\n        } else {\\n            uint256 deviationBps = targetLeverageBps - currentLeverageBps;\\n            if (deviationBps < minDeviationBps) {\\n                return 0;\\n            }\\n            subsidyBps = Math.mulDiv(deviationBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS, targetLeverageBps);\\n        }\\n        if (subsidyBps > maxSubsidyBps) {\\n            return maxSubsidyBps;\\n        }\\n        return subsidyBps;\\n    }\\n\\n    /**\\n     * @dev Converts an amount in base currency to the actual amount in the token\\n     * @param amountInBase Amount in base currency\\n     * @param tokenDecimals The decimals of the token\\n     * @param tokenPriceInBase The price of the token in base currency\\n     * @return amountInToken Amount in the token\\n     */\\n    function convertFromBaseCurrencyToToken(\\n        uint256 amountInBase,\\n        uint256 tokenDecimals,\\n        uint256 tokenPriceInBase\\n    ) internal pure returns (uint256) {\\n        // The price decimals is cancelled out in the division (as the amount and price are in the same unit)\\n        return Math.mulDiv(amountInBase, 10 ** tokenDecimals, tokenPriceInBase);\\n    }\\n\\n    /**\\n     * @dev Converts an amount in the token to the actual amount in base currency\\n     * @param amountInToken Amount in the token\\n     * @param tokenDecimals The decimals of the token\\n     * @param tokenPriceInBase The price of the token in base currency\\n     * @return amountInBase Amount in base currency\\n     */\\n    function convertFromTokenAmountToBaseCurrency(\\n        uint256 amountInToken,\\n        uint256 tokenDecimals,\\n        uint256 tokenPriceInBase\\n    ) internal pure returns (uint256) {\\n        // The token decimals is cancelled out in the division (as the amount and price are in the same unit)\\n        return Math.mulDiv(amountInToken, tokenPriceInBase, 10 ** tokenDecimals);\\n    }\\n\\n    /**\\n     * @dev Returns whether the current leverage is too imbalanced\\n     * @param currentLeverageBps The current leverage in basis points\\n     * @param lowerBoundTargetLeverageBps The lower bound of the target leverage in basis points\\n     * @param upperBoundTargetLeverageBps The upper bound of the target leverage in basis points\\n     * @return bool True if leverage is too imbalanced, false otherwise\\n     */\\n    function isTooImbalanced(\\n        uint256 currentLeverageBps,\\n        uint256 lowerBoundTargetLeverageBps,\\n        uint256 upperBoundTargetLeverageBps\\n    ) internal pure returns (bool) {\\n        // If there is no deposit yet, we don't need to rebalance, thus it is not too imbalanced\\n        return\\n            currentLeverageBps != 0 &&\\n            (currentLeverageBps < lowerBoundTargetLeverageBps || currentLeverageBps > upperBoundTargetLeverageBps);\\n    }\\n\\n    /**\\n     * @dev Calculates the unleveraged amount of the assets with the current leverage\\n     * @param leveragedAssets Amount of leveraged assets\\n     * @param leverageBps The leverage in basis points\\n     * @return unleveragedAssets Amount of unleveraged assets\\n     */\\n    function getUnleveragedAssetsWithLeverage(\\n        uint256 leveragedAssets,\\n        uint256 leverageBps\\n    ) internal pure returns (uint256) {\\n        return Math.mulDiv(leveragedAssets, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS, leverageBps);\\n    }\\n\\n    /**\\n     * @dev Calculates the leveraged amount of the assets with the target leverage\\n     * @param assets Amount of assets\\n     * @param leverageBps The leverage in basis points\\n     * @return leveragedAssets Amount of leveraged assets\\n     */\\n    function getLeveragedAssetsWithLeverage(uint256 assets, uint256 leverageBps) internal pure returns (uint256) {\\n        return Math.mulDiv(assets, leverageBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS);\\n    }\\n\\n    /**\\n     * @dev Gets the repay amount that keeps the current leverage\\n     * @param targetWithdrawAmount The target withdraw amount\\n     * @param leverageBpsBeforeRepayDebt The leverage in basis points before repaying debt\\n     * @param collateralTokenDecimals The decimals of the collateral token\\n     * @param collateralTokenPriceInBase The price of the collateral token in base currency\\n     * @param debtTokenDecimals The decimals of the debt token\\n     * @param debtTokenPriceInBase The price of the debt token in base currency\\n     * @return repayAmount The repay amount that keeps the current leverage\\n     */\\n    function getRepayAmountThatKeepCurrentLeverage(\\n        uint256 targetWithdrawAmount,\\n        uint256 leverageBpsBeforeRepayDebt,\\n        uint256 collateralTokenDecimals,\\n        uint256 collateralTokenPriceInBase,\\n        uint256 debtTokenDecimals,\\n        uint256 debtTokenPriceInBase\\n    ) internal pure returns (uint256 repayAmount) {\\n        /* Formula definition:\\n         * - C1: totalCollateralBase before repay (in base currency)\\n         * - D1: totalDebtBase before repay (in base currency)\\n         * - C2: totalCollateralBase after repay (in base currency)\\n         * - D2: totalDebtBase after repay (in base currency)\\n         * - T: target leverage\\n         * - x: withdraw amount in base currency\\n         * - y: repay amount in base currency\\n         *\\n         * We have:\\n         *        C1 / (C1-D1) = C2 / (C2-D2)\\n         *        C2 = C1-x\\n         *        D2 = D1-y\\n         *        C1 / (C1-D1) = T <=> C1 = (C1-D1) * T <=> C1 = C1*T - D1*T <=> C1*T - C1 = D1*T <=> C1 = D1*T/(T-1)\\n         *\\n         * Formula expression:\\n         *        C1 / (C1-D1) = (C1-x) / (C1-x-D1+y)\\n         *    <=> C1 * (C1-x-D1+y) = (C1-x) * (C1-D1)\\n         *    <=> C1^2 - C1*x - C1*D1 + C1*y = C1^2 - C1*D1 - C1*x + D1*x\\n         *    <=> C1^2 - C1*x - C1*D1 + C1*y = C1^2 - C1*x - C1*D1 + D1*x\\n         *    <=> C1*y = x*D1\\n         *    <=> y = x*D1 / C1\\n         *    <=> y = x*D1 / [D1*T / (T-1)]\\n         *    <=> y = x * (T-1)/T\\n         *\\n         * Suppose that T' = T * ONE_HUNDRED_PERCENT_BPS, then:\\n         *\\n         *  => T = T' / ONE_HUNDRED_PERCENT_BPS\\n         * where T' is the target leverage in basis points unit\\n         *\\n         * We have:\\n         *      y = x * (T-1)/T\\n         *  <=> y = x * (T' / ONE_HUNDRED_PERCENT_BPS - 1) / (T' / ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> y = x * (T' - ONE_HUNDRED_PERCENT_BPS) / T'\\n         */\\n\\n        // Short-circuit when leverageBpsBeforeRepayDebt == 0\\n        if (leverageBpsBeforeRepayDebt == 0) {\\n            // no collateral means no debt yet, so nothing to repay\\n            return 0;\\n        }\\n\\n        // Convert the target withdraw amount to base\\n        uint256 targetWithdrawAmountInBase = convertFromTokenAmountToBaseCurrency(\\n            targetWithdrawAmount,\\n            collateralTokenDecimals,\\n            collateralTokenPriceInBase\\n        );\\n\\n        // Calculate the repay amount in base\\n        uint256 repayAmountInBase = Math.mulDiv(\\n            targetWithdrawAmountInBase,\\n            leverageBpsBeforeRepayDebt - BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\\n            leverageBpsBeforeRepayDebt\\n        );\\n\\n        return convertFromBaseCurrencyToToken(repayAmountInBase, debtTokenDecimals, debtTokenPriceInBase);\\n    }\\n\\n    /**\\n     * @dev Gets the borrow amount that keeps the current leverage\\n     * @param suppliedCollateralAmount The actual supplied amount of collateral asset\\n     * @param leverageBpsBeforeSupply Leverage in basis points before supplying\\n     * @param targetLeverageBps The target leverage in basis points\\n     * @param collateralTokenDecimals The decimals of the collateral token\\n     * @param collateralTokenPriceInBase The price of the collateral token in base currency\\n     * @param debtTokenDecimals The decimals of the debt token\\n     * @param debtTokenPriceInBase The price of the debt token in base currency\\n     * @return expectedBorrowAmount The expected borrow amount that keeps the current leverage\\n     */\\n    function getBorrowAmountThatKeepCurrentLeverage(\\n        uint256 suppliedCollateralAmount,\\n        uint256 leverageBpsBeforeSupply,\\n        uint256 targetLeverageBps,\\n        uint256 collateralTokenDecimals,\\n        uint256 collateralTokenPriceInBase,\\n        uint256 debtTokenDecimals,\\n        uint256 debtTokenPriceInBase\\n    ) internal pure returns (uint256 expectedBorrowAmount) {\\n        /* Formula definition:\\n         * - C1: totalCollateralBase before supply (in base currency)\\n         * - D1: totalDebtBase before supply (in base currency)\\n         * - C2: totalCollateralBase after supply (in base currency)\\n         * - D2: totalDebtBase after supply (in base currency)\\n         * - T: target leverage\\n         * - x: supply amount in base currency\\n         * - y: borrow amount in base currency\\n         *\\n         * We have:\\n         *      C1 / (C1-D1) = C2 / (C2-D2)\\n         *      C2 = C1+x\\n         *      D2 = D1+y\\n         *      C1 / (C1-D1) = T <=> C1 = (C1-D1) * T <=> C1 = C1*T - D1*T <=> C1*T - C1 = D1*T <=> C1 = D1*T/(T-1)\\n         *\\n         * Formula expression:\\n         *      C1 / (C1-D1) = (C1+x) / (C1+x-D1-y)\\n         *  <=> C1 * (C1+x-D1-y) = (C1+x) * (C1-D1)\\n         *  <=> C1^2 + C1*x - C1*D1 - C1*y = C1^2 - C1*D1 + C1*x - D1*x\\n         *  <=> C1*y = x*D1\\n         *  <=> y = x*D1 / C1\\n         *  <=> y = x * (T-1)/T\\n         *\\n         * Suppose that:\\n         *      T' = T * ONE_HUNDRED_PERCENT_BPS, then:\\n         *   => T = T' / ONE_HUNDRED_PERCENT_BPS\\n         * where:\\n         *      - T' is the target leverage in basis points unit\\n         *\\n         * This is the formula to calculate the borrow amount that keeps the current leverage:\\n         *      y = x * (T-1)/T\\n         *  <=> y = x * (T' / ONE_HUNDRED_PERCENT_BPS - 1) / (T' / ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> y = x * (T' - ONE_HUNDRED_PERCENT_BPS) / T'\\n         */\\n\\n        if (leverageBpsBeforeSupply == 0) {\\n            // This is the case when there is no deposit yet, so we use the target leverage\\n            leverageBpsBeforeSupply = targetLeverageBps;\\n        }\\n\\n        // Convert the actual supplied amount to base\\n        uint256 suppliedCollateralAmountInBase = convertFromTokenAmountToBaseCurrency(\\n            suppliedCollateralAmount,\\n            collateralTokenDecimals,\\n            collateralTokenPriceInBase\\n        );\\n\\n        // Calculate the borrow amount in base currency that keeps the current leverage\\n        uint256 borrowAmountInBase = Math.mulDiv(\\n            suppliedCollateralAmountInBase,\\n            leverageBpsBeforeSupply - BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\\n            leverageBpsBeforeSupply\\n        );\\n\\n        return convertFromBaseCurrencyToToken(borrowAmountInBase, debtTokenDecimals, debtTokenPriceInBase);\\n    }\\n\\n    /**\\n     * @dev Gets the collateral token amount to reach the target leverage\\n     *      - This method is only being called for increasing the leverage quote in quoteRebalanceAmountToReachTargetLeverage()\\n     *      - It will failed if the current leverage is above the target leverage (which requires the user to call decreaseLeverage)\\n     * @param expectedTargetLeverageBps The expected target leverage in basis points unit\\n     * @param totalCollateralBase The total collateral base\\n     * @param totalDebtBase The total debt base\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @return requiredCollateralDepositAmountInBase The collateral deposit amount in base currency\\n     */\\n    function getCollateralTokenDepositAmountToReachTargetLeverage(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 subsidyBps\\n    ) internal pure returns (uint256 requiredCollateralDepositAmountInBase) {\\n        /**\\n         * Find the amount of collateral to be deposited and the corresponding amount of debt token to be borrowed to rebalance\\n         *\\n         * The amount of debt token to be borrowed is a bit more than the deposited collateral to pay for the rebalancing subsidy\\n         * - Rebalancing caller will receive the debt token as the subsidy\\n         *\\n         * Formula definition:\\n         * - C: totalCollateralBase\\n         * - D: totalDebtBase\\n         * - T: target leverage\\n         * - k: subsidy (0.01 means 1%)\\n         * - x: change amount of collateral in base currency\\n         * - y: change amount of debt in base currency\\n         *\\n         * We have:\\n         *      y = x*(1+k)   (borrow a bit more debt than the deposited collateral to pay for the rebalancing subsidy)\\n         *\\n         * Because this is a deposit collateral and borrow debt process, the formula is:\\n         *      (C + x) / (C + x - D - y) = T\\n         *  <=> C + x = T * (C + x - D - y)\\n         *  <=> C + x = T * (C + x - D - x*(1+k))\\n         *  <=> C + x = T * (C + x - D - x - x*k)\\n         *  <=> C + x = T * (C - D - x*k)\\n         *  <=> C + x = T*C - T*D - T*x*k\\n         *  <=> x + T*x*k = T*C - T*D - C\\n         *  <=> x*(1 + T*k) = T*(C - D) - C\\n         *  <=> x = (T*(C - D) - C) / (1 + T*k)\\n         *\\n         * Suppose that:\\n         *      TT = T * ONE_HUNDRED_PERCENT_BPS\\n         *      kk = k * ONE_HUNDRED_PERCENT_BPS\\n         * then:\\n         *      T = TT / ONE_HUNDRED_PERCENT_BPS\\n         *      k = kk / ONE_HUNDRED_PERCENT_BPS\\n         * where:\\n         *      - TT is the target leverage in basis points unit\\n         *      - kk is the subsidy in basis points unit\\n         *\\n         * We have:\\n         *      x = (T*(C - D) - C) / (1 + T*k)\\n         *  <=> x = (TT*(C - D)/ONE_HUNDRED_PERCENT_BPS - C) / (1 + TT*kk/ONE_HUNDRED_PERCENT_BPS^2)\\n         *  <=> x = (TT*(C - D) - C*ONE_HUNDRED_PERCENT_BPS) / (ONE_HUNDRED_PERCENT_BPS + TT*kk/ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> x = (TT*(C - D) - C*ONE_HUNDRED_PERCENT_BPS) / denominator\\n         * where:\\n         *      denominator = ONE_HUNDRED_PERCENT_BPS + TT*kk/ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * If x < 0, the transaction will be reverted due to the underflow/overflow\\n         *\\n         * If x = 0, it means the user should not rebalance, so the direction is 0\\n         *\\n         * Finally, we have y = (1+k)*x:\\n         *   => y = (1+k) * x\\n         *  <=> y = (1 + kk/ONE_HUNDRED_PERCENT_BPS) * x\\n         *  <=> y = (ONE_HUNDRED_PERCENT_BPS + kk) * x / ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * The value of y here is for reference (the expected amount of debt to borrow)\\n         */\\n        if (totalCollateralBase == 0) {\\n            revert TotalCollateralBaseIsZero();\\n        }\\n        if (totalCollateralBase < totalDebtBase) {\\n            revert TotalCollateralBaseIsLessThanTotalDebtBase(totalCollateralBase, totalDebtBase);\\n        }\\n\\n        // Now, totalCollateralBase is guaranteed to be greater than totalDebtBase\\n        // Use trySub to avoid overflow/underflow\\n        (bool success, uint256 numerator) = Math.trySub(\\n            expectedTargetLeverageBps * (totalCollateralBase - totalDebtBase),\\n            totalCollateralBase * BasisPointConstants.ONE_HUNDRED_PERCENT_BPS\\n        );\\n        if (!success) {\\n            revert FailedGettingCollateralTokenDepositAmount(\\n                expectedTargetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase\\n            );\\n        }\\n\\n        uint256 denominator = BasisPointConstants.ONE_HUNDRED_PERCENT_BPS +\\n            Math.mulDiv(expectedTargetLeverageBps, subsidyBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS);\\n\\n        // Use ceilDiv as we want to round up required collateral deposit amount in base currency\\n        // to avoid getting the new leverage above the target leverage, which will revert the\\n        // rebalance process (due to post-process assertion)\\n        // The logic is to deposit a bit more collateral, and borrow a bit more debt (due to rounding),\\n        // which will guarantee the new leverage cannot be more than the target leverage, avoid\\n        // unexpected post-process assertion revert.\\n        // This denominator cannot be zero because it is equal to: 100% + x\\n        // where is x is uint256, thus is always >= 100%, thus is always positive\\n        requiredCollateralDepositAmountInBase = Math.ceilDiv(numerator, denominator);\\n\\n        return requiredCollateralDepositAmountInBase;\\n    }\\n\\n    /**\\n     * @dev Gets the debt amount in base currency to be borrowed to increase the leverage\\n     * @param inputCollateralDepositAmountInBase The collateral deposit amount in base currency\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @return outputDebtBorrowAmountInBase The debt amount in base currency to be borrowed\\n     */\\n    function getDebtBorrowAmountInBaseToIncreaseLeverage(\\n        uint256 inputCollateralDepositAmountInBase,\\n        uint256 subsidyBps\\n    ) internal pure returns (uint256 outputDebtBorrowAmountInBase) {\\n        /**\\n         * The formula is:\\n         *      y = (1+k) * x\\n         *  <=> y = (1 + kk/ONE_HUNDRED_PERCENT_BPS) * x\\n         *  <=> y = (ONE_HUNDRED_PERCENT_BPS + kk) * x / ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * where:\\n         *      - y is the debt amount in base currency to be borrowed\\n         *      - x is the collateral amount in base currency to be deposited\\n         *      - kk is the subsidy in basis points unit\\n         */\\n\\n        // Use rounding down with mulDiv with Rounding.Floor as we want to borrow a bit less, to avoid\\n        // getting the new leverage above the target leverage, which will revert the\\n        // rebalance process (due to post-process assertion)\\n        // Borrow a bit less debt (rounding), given the same deposit amount of collateral token\\n        // means the new leverage should be lower than the actual leverage (with decimal without rounding)\\n        // As we calculate the estimated final leverage is reaching the target leverage,\\n        // if we round up, the new leverage can be more than the target leverage (given\\n        // the same deposit amount of collateral token), which will revert the rebalance process (due to post-process assertion)\\n        return\\n            Math.mulDiv(\\n                inputCollateralDepositAmountInBase,\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS + subsidyBps,\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\\n                Math.Rounding.Floor\\n            );\\n    }\\n\\n    /**\\n     * @dev Gets the debt token amount to be borrowed to increase the leverage, given the input collateral token amount\\n     * @param inputCollateralDepositTokenAmount The collateral deposit amount in token unit\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @param collateralTokenDecimals The collateral token decimals\\n     * @param collateralTokenPriceInBase The collateral token price in base currency\\n     * @param debtTokenDecimals The debt token decimals\\n     * @param debtTokenPriceInBase The debt token price in base currency\\n     * @return outputDebtBorrowTokenAmount The debt token amount to be borrowed in token unit\\n     */\\n    function getDebtBorrowTokenAmountToIncreaseLeverage(\\n        uint256 inputCollateralDepositTokenAmount,\\n        uint256 subsidyBps,\\n        uint256 collateralTokenDecimals,\\n        uint256 collateralTokenPriceInBase,\\n        uint256 debtTokenDecimals,\\n        uint256 debtTokenPriceInBase\\n    ) internal pure returns (uint256 outputDebtBorrowTokenAmount) {\\n        // Make sure the input collateral token amount is not zero\\n        if (inputCollateralDepositTokenAmount == 0) {\\n            revert InputCollateralTokenAmountIsZero();\\n        }\\n\\n        // Calculate everything before transferring, supplying and borrowing to avoid\\n        // any potential impact from the child contract implementation\\n\\n        // Calculate the amount of collateral token in base currency to deposit\\n        uint256 inputCollateralDepositAmountInBase = convertFromTokenAmountToBaseCurrency(\\n            inputCollateralDepositTokenAmount,\\n            collateralTokenDecimals,\\n            collateralTokenPriceInBase\\n        );\\n\\n        // The amount of debt token to borrow is equal to the amount of collateral token deposited\\n        // plus the subsidy (bonus for the caller)\\n        uint256 borrowedDebtTokenInBase = getDebtBorrowAmountInBaseToIncreaseLeverage(\\n            inputCollateralDepositAmountInBase,\\n            subsidyBps\\n        );\\n\\n        // Convert the amount of debt token in base currency to token unit\\n        outputDebtBorrowTokenAmount = convertFromBaseCurrencyToToken(\\n            borrowedDebtTokenInBase,\\n            debtTokenDecimals,\\n            debtTokenPriceInBase\\n        );\\n\\n        return outputDebtBorrowTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Gets the debt amount in base currency to reach the target leverage\\n     *      - This method is only being called for decreasing the leverage quote in quoteRebalanceAmountToReachTargetLeverage()\\n     *      - It will failed if the current leverage is below the target leverage (which requires the user to call increaseLeverage)\\n     * @param expectedTargetLeverageBps The expected target leverage in basis points unit\\n     * @param totalCollateralBase The total collateral base\\n     * @param totalDebtBase The total debt base\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @return requiredDebtRepayAmountInBase The debt amount in base currency to be repaid\\n     */\\n    function getDebtRepayAmountInBaseToReachTargetLeverage(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 subsidyBps\\n    ) internal pure returns (uint256 requiredDebtRepayAmountInBase) {\\n        /**\\n         * Find the amount of debt to be repaid and the corresponding amount of collateral to be withdraw to rebalance\\n         *\\n         * The amount of collateral to be withdraw to rebalance which is a bit more than the repay amount of debt token\\n         * to pay for the rebalancing subsidy\\n         * - Rebalancing caller will receive the collateral token as the subsidy\\n         *\\n         * Formula definition:\\n         * - C: totalCollateralBase\\n         * - D: totalDebtBase\\n         * - T: target leverage\\n         * - k: subsidy (0.01 means 1%)\\n         * - x: change amount of collateral in base currency\\n         * - y: change amount of debt in base currency\\n         *\\n         * We have:\\n         *      x = y*(1+k)   (withdraw a bit more collateral than the debt to pay for the rebalancing subsidy)\\n         *\\n         * Because this is a repay debt and withdraw collateral process, the formula is:\\n         *      (C - x) / (C - x - D + y) = T\\n         *  <=> C - y*(1+k) = T * (C - y*(1+k) - D + y)\\n         *  <=> C - y*(1+k) = T * (C - y - y*k - D + y)\\n         *  <=> C - y*(1+k) = T * (C - D - y*k)\\n         *  <=> y*(1+k) = C - T * (C - D - y*k)\\n         *  <=> y*(1+k) = C - T*C + T*D + T*y*k\\n         *  <=> y*(1+k) - T*y*k = C - T*C + T*D\\n         *  <=> y*(1 + k - T*k) = C - T*C + T*D\\n         *  <=> y = (C - T*C + T*D) / (1 + k - T*k)\\n         *\\n         * Suppose that:\\n         *      TT = T * ONE_HUNDRED_PERCENT_BPS\\n         *      kk = k * ONE_HUNDRED_PERCENT_BPS\\n         * then:\\n         *      T = TT / ONE_HUNDRED_PERCENT_BPS\\n         *      k = kk / ONE_HUNDRED_PERCENT_BPS\\n         * where:\\n         *      - TT is the target leverage in basis points unit\\n         *      - kk is the subsidy in basis points unit\\n         *\\n         * We have:\\n         *      y = (C - T*C + T*D) / (1 + k - T*k)\\n         *  <=> y = (C - TT*C/ONE_HUNDRED_PERCENT_BPS + TT*D/ONE_HUNDRED_PERCENT_BPS) / (1 + kk/ONE_HUNDRED_PERCENT_BPS - TT*kk/ONE_HUNDRED_PERCENT_BPS^2)\\n         *  <=> y = (C*ONE_HUNDRED_PERCENT_BPS - TT*C + TT*D) / (ONE_HUNDRED_PERCENT_BPS + kk - TT*kk/ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> y = (C*ONE_HUNDRED_PERCENT_BPS - TT*C + TT*D) / denominator\\n         *  <=> y = (C*ONE_HUNDRED_PERCENT_BPS - TT*(C - D)) / denominator\\n         * where:\\n         *      denominator = ONE_HUNDRED_PERCENT_BPS + kk - TT*kk/ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * If y < 0, the transaction will be reverted due to the underflow/overflow\\n         *\\n         * If y = 0, it means the user should not rebalance, so the direction is 0\\n         *\\n         * Finally, we have x = (1+k)*y:\\n         *   => x = (1+k) * y\\n         *  <=> x = (1 + kk/ONE_HUNDRED_PERCENT_BPS) * y\\n         *  <=> x = (ONE_HUNDRED_PERCENT_BPS + kk) * y / ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * The value of x here is for reference (the expected amount of collateral to withdraw)\\n         */\\n        if (totalCollateralBase == 0) {\\n            revert TotalCollateralBaseIsZero();\\n        }\\n        if (totalCollateralBase < totalDebtBase) {\\n            revert TotalCollateralBaseIsLessThanTotalDebtBase(totalCollateralBase, totalDebtBase);\\n        }\\n\\n        // Now, totalCollateralBase is greater than totalDebtBase, thus: totalCollateralBase - totalDebtBase > 0\\n        // Use trySub to avoid overflow/underflow\\n        (bool successNumerator, uint256 numerator) = Math.trySub(\\n            totalCollateralBase * BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\\n            expectedTargetLeverageBps * (totalCollateralBase - totalDebtBase)\\n        );\\n        if (!successNumerator) {\\n            revert FailedGettingDebtTokenRepayAmountNumerator(\\n                expectedTargetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase\\n            );\\n        }\\n\\n        (bool successDenominator, uint256 denominator) = Math.trySub(\\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS + subsidyBps,\\n            Math.mulDiv(expectedTargetLeverageBps, subsidyBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS)\\n        );\\n        if (!successDenominator) {\\n            revert FailedGettingDebtTokenRepayAmountDenominator(\\n                expectedTargetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase\\n            );\\n        }\\n\\n        if (denominator == 0) {\\n            revert DenominatorIsZero(expectedTargetLeverageBps, totalCollateralBase, totalDebtBase);\\n        }\\n\\n        // Do not use ceilDiv as we want to round down required debt repay amount in base currency\\n        // to avoid getting the new leverage below the target leverage, which will revert the\\n        // rebalance process (due to post-process assertion)\\n        // The logic is to repay a bit less, and withdraw a bit more collateral (due to rounding),\\n        // which will guarantee the new leverage cannot be less than the target leverage, avoid\\n        // unexpected post-process assertion revert.\\n        requiredDebtRepayAmountInBase = numerator / denominator;\\n\\n        return requiredDebtRepayAmountInBase;\\n    }\\n\\n    /**\\n     * @dev Gets the collateral token amount to be withdraw to repay the debt token\\n     * @param inputDebtRepayAmountInBase The debt amount in base currency to be repaid\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @return outputCollateralTokenAmount The collateral token amount to be withdraw\\n     */\\n    function getCollateralWithdrawAmountInBaseToDecreaseLeverage(\\n        uint256 inputDebtRepayAmountInBase,\\n        uint256 subsidyBps\\n    ) internal pure returns (uint256 outputCollateralTokenAmount) {\\n        /**\\n         * The formula is:\\n         *      x = (1+k) * y\\n         *  <=> x = (1 + kk/ONE_HUNDRED_PERCENT_BPS) * y\\n         *  <=> x = (ONE_HUNDRED_PERCENT_BPS + kk) * y / ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * where:\\n         *      - x is the collateral amount in base currency to be withdraw\\n         *      - y is the debt amount in base currency to be repaid\\n         *      - kk is the subsidy in basis points unit\\n         */\\n\\n        // Use rounding up with mulDiv with Rounding.Ceil as we want to withdraw a bit more, to avoid\\n        // getting the new leverage below the target leverage, which will revert the\\n        // rebalance process (due to post-process assertion)\\n        // Withdraw a bit more collateral (rounding), given the same repay amount of debt token\\n        // means the new leverage should be higher than the actual leverage (with decimal without rounding)\\n        // As we calculate the estimated final leverage is reaching the target leverage,\\n        // if we round down, the new leverage can be less than the target leverage (given\\n        // the same repay amount of debt token), which will revert the rebalance process (due to post-process assertion)\\n        return\\n            Math.mulDiv(\\n                inputDebtRepayAmountInBase,\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS + subsidyBps,\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\\n                Math.Rounding.Ceil\\n            );\\n    }\\n\\n    /**\\n     * @dev Gets the collateral token amount to be withdraw to repay the debt token\\n     * @param inputDebtRepayTokenAmount The debt amount in token unit to be repaid\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @param collateralTokenDecimals The collateral token decimals\\n     * @param collateralTokenPriceInBase The collateral token price in base currency\\n     * @param debtTokenDecimals The debt token decimals\\n     * @param debtTokenPriceInBase The debt token price in base currency\\n     * @return outputCollateralWithdrawTokenAmount The collateral token amount to be withdraw in token unit\\n     */\\n    function getCollateralWithdrawTokenAmountToDecreaseLeverage(\\n        uint256 inputDebtRepayTokenAmount,\\n        uint256 subsidyBps,\\n        uint256 collateralTokenDecimals,\\n        uint256 collateralTokenPriceInBase,\\n        uint256 debtTokenDecimals,\\n        uint256 debtTokenPriceInBase\\n    ) internal pure returns (uint256 outputCollateralWithdrawTokenAmount) {\\n        // Make sure the input debt token amount is not zero\\n        if (inputDebtRepayTokenAmount == 0) {\\n            revert InputDebtTokenAmountIsZero();\\n        }\\n\\n        // Calculate everything before transferring, repaying and withdrawing to avoid\\n        // any potential impact from the child contract implementation\\n\\n        // Calculate the amount of debt token in base currency to repay\\n        uint256 inputDebtRepayAmountInBase = convertFromTokenAmountToBaseCurrency(\\n            inputDebtRepayTokenAmount,\\n            debtTokenDecimals,\\n            debtTokenPriceInBase\\n        );\\n\\n        // The amount of collateral asset to withdraw is equal to the amount of debt token repaid\\n        // plus the subsidy (bonus for the caller)\\n        uint256 withdrawCollateralTokenInBase = getCollateralWithdrawAmountInBaseToDecreaseLeverage(\\n            inputDebtRepayAmountInBase,\\n            subsidyBps\\n        );\\n\\n        // Convert the amount of collateral token in base currency to token unit\\n        outputCollateralWithdrawTokenAmount = convertFromBaseCurrencyToToken(\\n            withdrawCollateralTokenInBase,\\n            collateralTokenDecimals,\\n            collateralTokenPriceInBase\\n        );\\n\\n        return outputCollateralWithdrawTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Quotes the rebalance amount to reach the target leverage in token unit\\n     * @param totalCollateralBase The total collateral base\\n     * @param totalDebtBase The total debt base\\n     * @param currentLeverageBps The current leverage in basis points unit\\n     * @param targetLeverageBps The target leverage in basis points unit\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @param collateralTokenDecimals The collateral token decimals\\n     * @param collateralTokenPriceInBase The collateral token price in base currency\\n     * @param debtTokenDecimals The debt token decimals\\n     * @param debtTokenPriceInBase The debt token price in base currency\\n     * @return inputTokenAmount The amount of token to call increaseLeverage or decreaseLeverage (in token unit)\\n     * @return estimatedOutputTokenAmount The estimated output token amount after the rebalance (in token unit)\\n     * @return direction The direction of the rebalance (1 for increase, -1 for decrease, 0 means no rebalance)\\n     */\\n    function quoteRebalanceAmountToReachTargetLeverage(\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 currentLeverageBps,\\n        uint256 targetLeverageBps,\\n        uint256 subsidyBps,\\n        uint256 collateralTokenDecimals,\\n        uint256 collateralTokenPriceInBase,\\n        uint256 debtTokenDecimals,\\n        uint256 debtTokenPriceInBase\\n    ) public pure returns (uint256 inputTokenAmount, uint256 estimatedOutputTokenAmount, int8 direction) {\\n        if (totalCollateralBase == 0) {\\n            // No collateral means no debt and no leverage, so no rebalance is needed\\n            return (0, 0, 0);\\n        }\\n\\n        // If the current leverage is below the target leverage, the user should increase the leverage\\n        if (currentLeverageBps < targetLeverageBps) {\\n            // In this case, the input amount is the collateral amount to be deposit\\n            // and the output amount is the debt amount to be borrow\\n            uint256 inputCollateralAmountInBase = getCollateralTokenDepositAmountToReachTargetLeverage(\\n                targetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase,\\n                subsidyBps\\n            );\\n            inputTokenAmount = convertFromBaseCurrencyToToken(\\n                inputCollateralAmountInBase,\\n                collateralTokenDecimals,\\n                collateralTokenPriceInBase\\n            );\\n            uint256 estimatedDebtAmountInBase = getDebtBorrowAmountInBaseToIncreaseLeverage(\\n                inputCollateralAmountInBase,\\n                subsidyBps\\n            );\\n            estimatedOutputTokenAmount = convertFromBaseCurrencyToToken(\\n                estimatedDebtAmountInBase,\\n                debtTokenDecimals,\\n                debtTokenPriceInBase\\n            );\\n            direction = 1;\\n            return (inputTokenAmount, estimatedOutputTokenAmount, direction);\\n        }\\n        // If the current leverage is above the target leverage, the user should decrease the leverage\\n        else if (currentLeverageBps > targetLeverageBps) {\\n            // In this case, the input amount is the debt amount to be repaid\\n            // and the output amount is the collateral amount to be withdraw\\n            uint256 inputDebtAmountInBase = getDebtRepayAmountInBaseToReachTargetLeverage(\\n                targetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase,\\n                subsidyBps\\n            );\\n            inputTokenAmount = convertFromBaseCurrencyToToken(\\n                inputDebtAmountInBase,\\n                debtTokenDecimals,\\n                debtTokenPriceInBase\\n            );\\n            uint256 estimatedCollateralAmountInBase = getCollateralWithdrawAmountInBaseToDecreaseLeverage(\\n                inputDebtAmountInBase,\\n                subsidyBps\\n            );\\n            estimatedOutputTokenAmount = convertFromBaseCurrencyToToken(\\n                estimatedCollateralAmountInBase,\\n                collateralTokenDecimals,\\n                collateralTokenPriceInBase\\n            );\\n            direction = -1;\\n            return (inputTokenAmount, estimatedOutputTokenAmount, direction);\\n        }\\n\\n        // If the current leverage is equal to the target leverage, the user should not rebalance\\n        return (0, 0, 0);\\n    }\\n\\n    /**\\n     * @dev Gets the gross amount required for a given net amount\\n     * @param netAmount The net amount\\n     * @param withdrawalFeeBps The withdrawal fee in basis points\\n     * @return grossAmount The gross amount\\n     */\\n    function getGrossAmountRequiredForNet(\\n        uint256 netAmount,\\n        uint256 withdrawalFeeBps\\n    ) internal pure returns (uint256 grossAmount) {\\n        if (withdrawalFeeBps >= BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert InvalidWithdrawalFeeBps(withdrawalFeeBps);\\n        }\\n        return WithdrawalFeeMath.grossFromNet(netAmount, withdrawalFeeBps);\\n    }\\n\\n    /**\\n     * @dev Gets the net amount after fee for a given gross amount\\n     * @param grossAmount The gross amount\\n     * @param withdrawalFeeBps The withdrawal fee in basis points\\n     * @return netAmount The net amount\\n     */\\n    function getNetAmountAfterFee(\\n        uint256 grossAmount,\\n        uint256 withdrawalFeeBps\\n    ) internal pure returns (uint256 netAmount) {\\n        if (withdrawalFeeBps > BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert InvalidWithdrawalFeeBps(withdrawalFeeBps);\\n        }\\n        return WithdrawalFeeMath.netAfterFee(grossAmount, withdrawalFeeBps);\\n    }\\n\\n    /**\\n     * @dev Struct-based overload that forwards to the parameterized implementation. Using a struct reduces stack usage.\\n     */\\n    function quoteRebalanceAmountToReachTargetLeverage(\\n        QuoteRebalanceParams memory p\\n    ) public pure returns (uint256 inputTokenAmount, uint256 estimatedOutputTokenAmount, int8 direction) {\\n        return\\n            quoteRebalanceAmountToReachTargetLeverage(\\n                p.totalCollateralBase,\\n                p.totalDebtBase,\\n                p.currentLeverageBps,\\n                p.targetLeverageBps,\\n                p.subsidyBps,\\n                p.collateralTokenDecimals,\\n                p.collateralTokenPriceInBase,\\n                p.debtTokenDecimals,\\n                p.debtTokenPriceInBase\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe98ea26b013268162b80ea30013ce70aef686b6edf3a14d5ac68c377592591ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610a0161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630acd808614610045578063c9a47a9b1461007a575b600080fd5b61005861005336600461070e565b61008d565b60408051938452602084019290925260000b9082015260600160405180910390f35b610058610088366004610789565b6100d5565b60008060006100c8846000015185602001518660400151876060015188608001518960a001518a60c001518b60e001518c61010001516100d5565b9250925092509193909250565b60008060008b6000036100f057506000915081905080610191565b888a101561013b5760006101068a8e8e8c6101a0565b90506101138189896102e5565b93506000610121828b610306565b905061012e8188886102e5565b9350600192505050610191565b888a11156101875760006101518a8e8e8c610367565b905061015e8187876102e5565b9350600061016c828b6104e9565b9050610179818a8a6102e5565b935060001992505050610191565b5060009150819050805b99509950999650505050505050565b6000836000036101c357604051631350309560e11b815260040160405180910390fd5b828410156101f357604051639d79443b60e01b815260048101859052602481018490526044015b60405180910390fd5b60008061024461020386886107fe565b61020d9089610811565b610218606480610828565b6102279061ffff16606461084e565b6102379063ffffffff1689610811565b8103908111159190820290565b915091508161027757604051634dfbe16f60e01b81526004810188905260248101879052604481018690526064016101ea565b60006102a38886610289606480610828565b6102989061ffff16606461084e565b63ffffffff16610541565b6102ae606480610828565b6102bd9061ffff16606461084e565b63ffffffff166102cd919061086e565b90506102d982826105f6565b98975050505050505050565b60006102fc846102f685600a61095d565b84610541565b90505b9392505050565b600061035e8383610318606480610828565b6103279061ffff16606461084e565b63ffffffff16610337919061086e565b610342606480610828565b6103519061ffff16606461084e565b63ffffffff16600061062c565b90505b92915050565b60008360000361038a57604051631350309560e11b815260040160405180910390fd5b828410156103b557604051639d79443b60e01b815260048101859052602481018490526044016101ea565b6000806103f96103c6606480610828565b6103d59061ffff16606461084e565b6103e59063ffffffff1688610811565b6103ef87896107fe565b610237908a610811565b915091508161042c57604051637e642edf60e11b81526004810188905260248101879052604481018690526064016101ea565b60008061046d8661043e606480610828565b61044d9061ffff16606461084e565b63ffffffff1661045d919061086e565b6102378b89610289606480610828565b91509150816104a0576040516338d523c560e11b8152600481018a905260248101899052604481018890526064016101ea565b806000036104d257604051630d0c1aa960e01b8152600481018a905260248101899052604481018890526064016101ea565b6104dc818461097f565b9998505050505050505050565b600061035e83836104fb606480610828565b61050a9061ffff16606461084e565b63ffffffff1661051a919061086e565b610525606480610828565b6105349061ffff16606461084e565b63ffffffff16600161062c565b60008060006105508686610679565b91509150816000036105755783818161056b5761056b610969565b04925050506102ff565b81841161058c5761058c6003851502601118610697565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010185841190960395909502919093039390930492909217029150509392505050565b60008160000361060a5761060a6012610697565b81600184038161061c5761061c610969565b046001018315155b029392505050565b600061065b61063a836106a9565b801561065657506000848061065157610651610969565b868809115b151590565b610666868686610541565b610670919061086e565b95945050505050565b60008060001983850993909202808410938190039390930393915050565b634e487b71600052806020526024601cfd5b600060028260038111156106bf576106bf610993565b6106c991906109a9565b60ff166001149050919050565b604051610120810167ffffffffffffffff8111828210171561070857634e487b7160e01b600052604160045260246000fd5b60405290565b6000610120828403121561072157600080fd5b6107296106d6565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152508091505092915050565b60008060008060008060008060006101208a8c0312156107a857600080fd5b505087359960208901359950604089013598606081013598506080810135975060a0810135965060c0810135955060e08101359450610100013592509050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610361576103616107e8565b8082028115828204841417610361576103616107e8565b61ffff818116838216028082169190828114610846576108466107e8565b505092915050565b63ffffffff818116838216028082169190828114610846576108466107e8565b80820180821115610361576103616107e8565b600181815b808511156108bc5781600019048211156108a2576108a26107e8565b808516156108af57918102915b93841c9390800290610886565b509250929050565b6000826108d357506001610361565b816108e057506000610361565b81600181146108f657600281146109005761091c565b6001915050610361565b60ff841115610911576109116107e8565b50506001821b610361565b5060208310610133831016604e8410600b841016171561093f575081810a610361565b6109498383610881565b8060001904821115610624576106246107e8565b600061035e83836108c4565b634e487b7160e01b600052601260045260246000fd5b60008261098e5761098e610969565b500490565b634e487b7160e01b600052602160045260246000fd5b600060ff8316806109bc576109bc610969565b8060ff8416069150509291505056fea2646970667358221220cb76ed0bfabd19f76376f57ddfee5f239f5c5da134263c174f05e3ce11c41cad64736f6c63430008160033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630acd808614610045578063c9a47a9b1461007a575b600080fd5b61005861005336600461070e565b61008d565b60408051938452602084019290925260000b9082015260600160405180910390f35b610058610088366004610789565b6100d5565b60008060006100c8846000015185602001518660400151876060015188608001518960a001518a60c001518b60e001518c61010001516100d5565b9250925092509193909250565b60008060008b6000036100f057506000915081905080610191565b888a101561013b5760006101068a8e8e8c6101a0565b90506101138189896102e5565b93506000610121828b610306565b905061012e8188886102e5565b9350600192505050610191565b888a11156101875760006101518a8e8e8c610367565b905061015e8187876102e5565b9350600061016c828b6104e9565b9050610179818a8a6102e5565b935060001992505050610191565b5060009150819050805b99509950999650505050505050565b6000836000036101c357604051631350309560e11b815260040160405180910390fd5b828410156101f357604051639d79443b60e01b815260048101859052602481018490526044015b60405180910390fd5b60008061024461020386886107fe565b61020d9089610811565b610218606480610828565b6102279061ffff16606461084e565b6102379063ffffffff1689610811565b8103908111159190820290565b915091508161027757604051634dfbe16f60e01b81526004810188905260248101879052604481018690526064016101ea565b60006102a38886610289606480610828565b6102989061ffff16606461084e565b63ffffffff16610541565b6102ae606480610828565b6102bd9061ffff16606461084e565b63ffffffff166102cd919061086e565b90506102d982826105f6565b98975050505050505050565b60006102fc846102f685600a61095d565b84610541565b90505b9392505050565b600061035e8383610318606480610828565b6103279061ffff16606461084e565b63ffffffff16610337919061086e565b610342606480610828565b6103519061ffff16606461084e565b63ffffffff16600061062c565b90505b92915050565b60008360000361038a57604051631350309560e11b815260040160405180910390fd5b828410156103b557604051639d79443b60e01b815260048101859052602481018490526044016101ea565b6000806103f96103c6606480610828565b6103d59061ffff16606461084e565b6103e59063ffffffff1688610811565b6103ef87896107fe565b610237908a610811565b915091508161042c57604051637e642edf60e11b81526004810188905260248101879052604481018690526064016101ea565b60008061046d8661043e606480610828565b61044d9061ffff16606461084e565b63ffffffff1661045d919061086e565b6102378b89610289606480610828565b91509150816104a0576040516338d523c560e11b8152600481018a905260248101899052604481018890526064016101ea565b806000036104d257604051630d0c1aa960e01b8152600481018a905260248101899052604481018890526064016101ea565b6104dc818461097f565b9998505050505050505050565b600061035e83836104fb606480610828565b61050a9061ffff16606461084e565b63ffffffff1661051a919061086e565b610525606480610828565b6105349061ffff16606461084e565b63ffffffff16600161062c565b60008060006105508686610679565b91509150816000036105755783818161056b5761056b610969565b04925050506102ff565b81841161058c5761058c6003851502601118610697565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010185841190960395909502919093039390930492909217029150509392505050565b60008160000361060a5761060a6012610697565b81600184038161061c5761061c610969565b046001018315155b029392505050565b600061065b61063a836106a9565b801561065657506000848061065157610651610969565b868809115b151590565b610666868686610541565b610670919061086e565b95945050505050565b60008060001983850993909202808410938190039390930393915050565b634e487b71600052806020526024601cfd5b600060028260038111156106bf576106bf610993565b6106c991906109a9565b60ff166001149050919050565b604051610120810167ffffffffffffffff8111828210171561070857634e487b7160e01b600052604160045260246000fd5b60405290565b6000610120828403121561072157600080fd5b6107296106d6565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152508091505092915050565b60008060008060008060008060006101208a8c0312156107a857600080fd5b505087359960208901359950604089013598606081013598506080810135975060a0810135965060c0810135955060e08101359450610100013592509050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610361576103616107e8565b8082028115828204841417610361576103616107e8565b61ffff818116838216028082169190828114610846576108466107e8565b505092915050565b63ffffffff818116838216028082169190828114610846576108466107e8565b80820180821115610361576103616107e8565b600181815b808511156108bc5781600019048211156108a2576108a26107e8565b808516156108af57918102915b93841c9390800290610886565b509250929050565b6000826108d357506001610361565b816108e057506000610361565b81600181146108f657600281146109005761091c565b6001915050610361565b60ff841115610911576109116107e8565b50506001821b610361565b5060208310610133831016604e8410600b841016171561093f575081810a610361565b6109498383610881565b8060001904821115610624576106246107e8565b600061035e83836108c4565b634e487b7160e01b600052601260045260246000fd5b60008261098e5761098e610969565b500490565b634e487b7160e01b600052602160045260246000fd5b600060ff8316806109bc576109bc610969565b8060ff8416069150509291505056fea2646970667358221220cb76ed0bfabd19f76376f57ddfee5f239f5c5da134263c174f05e3ce11c41cad64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "quoteRebalanceAmountToReachTargetLeverage(DLoopCoreLogic.QuoteRebalanceParams)": {
        "details": "Struct-based overload that forwards to the parameterized implementation. Using a struct reduces stack usage."
      },
      "quoteRebalanceAmountToReachTargetLeverage(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Quotes the rebalance amount to reach the target leverage in token unit",
        "params": {
          "collateralTokenDecimals": "The collateral token decimals",
          "collateralTokenPriceInBase": "The collateral token price in base currency",
          "currentLeverageBps": "The current leverage in basis points unit",
          "debtTokenDecimals": "The debt token decimals",
          "debtTokenPriceInBase": "The debt token price in base currency",
          "subsidyBps": "The subsidy in basis points unit",
          "targetLeverageBps": "The target leverage in basis points unit",
          "totalCollateralBase": "The total collateral base",
          "totalDebtBase": "The total debt base"
        },
        "returns": {
          "direction": "The direction of the rebalance (1 for increase, -1 for decrease, 0 means no rebalance)",
          "estimatedOutputTokenAmount": "The estimated output token amount after the rebalance (in token unit)",
          "inputTokenAmount": "The amount of token to call increaseLeverage or decreaseLeverage (in token unit)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This library contains the stateless implementation of the DLoopCore logic",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}