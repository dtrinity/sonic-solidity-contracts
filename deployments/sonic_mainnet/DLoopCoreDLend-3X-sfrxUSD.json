{
  "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "contract ERC20",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "debtToken",
              "type": "address"
            },
            {
              "internalType": "contract IPoolAddressesProvider",
              "name": "lendingPoolAddressesProvider",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "targetLeverageBps",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lowerBoundTargetLeverageBps",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "upperBoundTargetLeverageBps",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "maxSubsidyBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minDeviationBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawalFeeBps",
              "type": "uint256"
            },
            {
              "internalType": "contract IRewardsController",
              "name": "rewardsController",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dLendAssetToClaimFor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "targetStaticATokenWrapper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxTreasuryFeeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialTreasuryFeeBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeThreshold",
              "type": "uint256"
            }
          ],
          "internalType": "struct DLoopCoreDLend.InitParams",
          "name": "p",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetPriceIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CannotRescueRestrictedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtBase",
          "type": "uint256"
        }
      ],
      "name": "CollateralLessThanDebt",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentLeverageBps",
          "type": "uint256"
        }
      ],
      "name": "DecreaseLeverageOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedCollateralTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReceivedCollateralTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseLeverageReceiveLessThanMinAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxRedeem",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ERC4626ExceededMaxWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ExchangeAmountTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeeBps",
          "type": "uint256"
        }
      ],
      "name": "FeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentLeverageBps",
          "type": "uint256"
        }
      ],
      "name": "IncreaseLeverageOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedDebtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReceivedDebtTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseLeverageReceiveLessThanMinAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InputCollateralTokenAmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InputDebtTokenAmountIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requiredAllowance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientAllowanceOfCollateralAssetToSupply",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requiredAllowance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientAllowanceOfDebtAssetToRepay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "InvalidCollateralToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "InvalidDebtToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "leverageBps",
          "type": "uint256"
        }
      ],
      "name": "InvalidLeverage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lowerBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetLeverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upperBound",
          "type": "uint256"
        }
      ],
      "name": "InvalidLeverageBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRewardsController",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetLeverageBps",
          "type": "uint256"
        }
      ],
      "name": "InvalidTargetLeverage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawalFeeBps",
          "type": "uint256"
        }
      ],
      "name": "InvalidWithdrawalFeeBps",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetLeverageBps",
          "type": "uint256"
        }
      ],
      "name": "LeverageBelowTarget",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetLeverageBps",
          "type": "uint256"
        }
      ],
      "name": "LeverageExceedsTarget",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTreasuryFeeBps",
          "type": "uint256"
        }
      ],
      "name": "MaxTreasuryFeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimedAmountsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardTokensLength",
          "type": "uint256"
        }
      ],
      "name": "RewardAmountsLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "TokenBalanceNotDecreasedAfterRepay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "TokenBalanceNotDecreasedAfterSupply",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "TokenBalanceNotIncreasedAfterBorrow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "TokenBalanceNotIncreasedAfterWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lowerBoundTargetLeverageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upperBoundTargetLeverageBps",
          "type": "uint256"
        }
      ],
      "name": "TooImbalanced",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treasuryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFeeExceedsRewardAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treasuryFeeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTreasuryFeeBps",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowedAmountBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedAmountAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedBorrowedAmount",
          "type": "uint256"
        }
      ],
      "name": "UnexpectedBorrowAmountFromPool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "UnexpectedRepayAmountToPool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalanceAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedTokenBalance",
          "type": "uint256"
        }
      ],
      "name": "UnexpectedSupplyAmountToPool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawableAmountBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawableAmountAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedWithdrawableAmount",
          "type": "uint256"
        }
      ],
      "name": "UnexpectedWithdrawAmountFromPool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawalFeeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWithdrawalFeeBps",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalFeeIsGreaterThanMaxFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroExchangeAssetAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroExchangeThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroReceiverAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRewardTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroTreasuryAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldController",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "DLendRewardsControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputDebtTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minReceivedCollateralTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaidDebtTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnCollateralTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseLeverage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldExchangeThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExchangeThreshold",
          "type": "uint256"
        }
      ],
      "name": "ExchangeThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFeeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFeeBps",
          "type": "uint256"
        }
      ],
      "name": "FeeBpsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputCollateralTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minReceivedDebtTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "suppliedCollateralTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowedDebtTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseLeverage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "LeftoverCollateralTokensTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "LeftoverDebtTokensTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "lowerBoundTargetLeverageBps",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "upperBoundTargetLeverageBps",
          "type": "uint32"
        }
      ],
      "name": "LeverageBoundsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxSubsidyBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxSubsidyBps",
          "type": "uint256"
        }
      ],
      "name": "MaxSubsidyBpsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinDeviationBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinDeviationBps",
          "type": "uint256"
        }
      ],
      "name": "MinDeviationBpsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchangeAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "rewardTokens",
          "type": "address[]"
        }
      ],
      "name": "RewardCompounded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTreasuryFeeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTreasuryFeeBps",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFeeBpsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldWithdrawalFeeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWithdrawalFeeBps",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalFeeBpsSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AAVE_PRICE_ORACLE_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BALANCE_DIFF_TOLERANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DLOOP_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEVERAGE_DIFF_TOLERANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAWAL_FEE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESCUER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESCUER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDS_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VARIABLE_LENDING_INTERST_RATE_MODE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "compoundRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "convertFromBaseCurrencyToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInToken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "convertFromTokenAmountToBaseCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coreState",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "lendingPoolAddressesProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dLendAssetToClaimFor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "targetStaticATokenWrapper",
          "type": "address"
        },
        {
          "internalType": "contract IRewardsController",
          "name": "dLendRewardsController",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputDebtTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReceivedCollateralTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetPriceFromOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getCollateralValueInTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentLeverageBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentSubsidyBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebtTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getDebtValueInTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultMaxSubsidyBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLendingOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLendingPool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLendingPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralAndDebtOfUserInBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtBase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getTreasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputCollateralTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReceivedDebtTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isRescuableToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTooImbalanced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lowerBoundTargetLeverageBps",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSubsidyBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTreasuryFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDeviationBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDLendRewardsController",
          "type": "address"
        }
      ],
      "name": "setDLendRewardsController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newExchangeThreshold",
          "type": "uint256"
        }
      ],
      "name": "setExchangeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_lowerBoundTargetLeverageBps",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_upperBoundTargetLeverageBps",
          "type": "uint32"
        }
      ],
      "name": "setLeverageBounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSubsidyBps",
          "type": "uint256"
        }
      ],
      "name": "setMaxSubsidyBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDeviationBps",
          "type": "uint256"
        }
      ],
      "name": "setMinDeviationBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTreasuryFeeBps",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newWithdrawalFeeBps",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetLeverageBps",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upperBoundTargetLeverageBps",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
  "receipt": {
    "to": null,
    "from": "0xAD5BDAD791f19c1aF34bb0E71F453cf8A19f34D6",
    "contractAddress": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
    "transactionIndex": 0,
    "gasUsed": "5559510",
    "logsBloom": "0x
    "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0",
    "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 51227838,
        "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
        "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x6e3aaeed2986e1faf3948bf7432f5c2ebcf5848384724380cff0b38c1bf05ded",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x6e3aaeed2986e1faf3948bf7432f5c2ebcf5848384724380cff0b38c1bf05ded"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 51227838,
        "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
        "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x6e3aaeed2986e1faf3948bf7432f5c2ebcf5848384724380cff0b38c1bf05ded"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 51227838,
        "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
        "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6e3aaeed2986e1faf3948bf7432f5c2ebcf5848384724380cff0b38c1bf05ded",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 51227838,
        "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
        "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 51227838,
        "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
        "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 51227838,
        "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
        "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x51785d261c3b3e8c2cfe2d0e108b9ab2b1fb703ff9e9e49aba4ebdc85c36152b",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 51227838,
        "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
        "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x8879d5d645eb76dcb2fbe49d1d300cf073cc071082c27a267e488d83d176b403",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x8879d5d645eb76dcb2fbe49d1d300cf073cc071082c27a267e488d83d176b403"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 51227838,
        "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
        "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xcf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a050",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x8879d5d645eb76dcb2fbe49d1d300cf073cc071082c27a267e488d83d176b403"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 51227838,
        "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
        "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8879d5d645eb76dcb2fbe49d1d300cf073cc071082c27a267e488d83d176b403",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 51227838,
        "transactionHash": "0x5137978b32853bf59bb1cd7e0801b5af003e6dd9c7941ce63a9062b9a6ab38de",
        "address": "0x27E19D5f9f5F9d8c8Fa81Fd39c7f131aF52eeC34",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xcf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a050",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x634514d7e185ee2421d1d4ee121edfdf168eec38d09a0b453db94c96968ba6e0"
      }
    ],
    "blockNumber": 51227838,
    "cumulativeGasUsed": "5559510",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "name": "dLOOP 3X sfrxUSD dLEND",
      "symbol": "3X-sfrxUSD",
      "collateralToken": "0x5Bff88cA1442c2496f7E475E9e7786383Bc070c0",
      "debtToken": "0x53a6aBb52B2F968fA80dF6A894e4f1b1020DA975",
      "lendingPoolAddressesProvider": "0x1f8d8a3575d049aA0C195AA947483738811bAdcb",
      "targetLeverageBps": 3000000,
      "lowerBoundTargetLeverageBps": 2000000,
      "upperBoundTargetLeverageBps": 4000000,
      "maxSubsidyBps": 20000,
      "minDeviationBps": 20000,
      "withdrawalFeeBps": 4000,
      "rewardsController": "0xCBCab2e82F1377d2cc5c2682d135c38E17FEbe65",
      "dLendAssetToClaimFor": "0x8dBf873B77280333a0328cf12d9e93d1A3AC1c06",
      "targetStaticATokenWrapper": "0x36E178ba804514D80EA87D78B96db87408B8059e",
      "treasury": "0xE83c188a7BE46B90715C757A06cF917175f30262",
      "maxTreasuryFeeBps": "1000",
      "initialTreasuryFeeBps": "500",
      "initialExchangeThreshold": "10000000000000000000"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "98ba743570b2b0c089d12aa2e805891b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract ERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"lendingPoolAddressesProvider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"targetLeverageBps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lowerBoundTargetLeverageBps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"upperBoundTargetLeverageBps\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxSubsidyBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeviationBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewardsController\",\"name\":\"rewardsController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dLendAssetToClaimFor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetStaticATokenWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTreasuryFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialTreasuryFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeThreshold\",\"type\":\"uint256\"}],\"internalType\":\"struct DLoopCoreDLend.InitParams\",\"name\":\"p\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetPriceIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CannotRescueRestrictedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"}],\"name\":\"CollateralLessThanDebt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLeverageBps\",\"type\":\"uint256\"}],\"name\":\"DecreaseLeverageOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedCollateralTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceivedCollateralTokenAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseLeverageReceiveLessThanMinAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ExchangeAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeBps\",\"type\":\"uint256\"}],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLeverageBps\",\"type\":\"uint256\"}],\"name\":\"IncreaseLeverageOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedDebtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceivedDebtTokenAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseLeverageReceiveLessThanMinAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputCollateralTokenAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputDebtTokenAmountIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requiredAllowance\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowanceOfCollateralAssetToSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requiredAllowance\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowanceOfDebtAssetToRepay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidCollateralToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidDebtToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leverageBps\",\"type\":\"uint256\"}],\"name\":\"InvalidLeverage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"}],\"name\":\"InvalidLeverageBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardsController\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetLeverageBps\",\"type\":\"uint256\"}],\"name\":\"InvalidTargetLeverage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeBps\",\"type\":\"uint256\"}],\"name\":\"InvalidWithdrawalFeeBps\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetLeverageBps\",\"type\":\"uint256\"}],\"name\":\"LeverageBelowTarget\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetLeverageBps\",\"type\":\"uint256\"}],\"name\":\"LeverageExceedsTarget\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTreasuryFeeBps\",\"type\":\"uint256\"}],\"name\":\"MaxTreasuryFeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedAmountsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokensLength\",\"type\":\"uint256\"}],\"name\":\"RewardAmountsLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedTokenBalance\",\"type\":\"uint256\"}],\"name\":\"TokenBalanceNotDecreasedAfterRepay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedTokenBalance\",\"type\":\"uint256\"}],\"name\":\"TokenBalanceNotDecreasedAfterSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedTokenBalance\",\"type\":\"uint256\"}],\"name\":\"TokenBalanceNotIncreasedAfterBorrow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedTokenBalance\",\"type\":\"uint256\"}],\"name\":\"TokenBalanceNotIncreasedAfterWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBoundTargetLeverageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBoundTargetLeverageBps\",\"type\":\"uint256\"}],\"name\":\"TooImbalanced\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"TreasuryFeeExceedsRewardAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTreasuryFeeBps\",\"type\":\"uint256\"}],\"name\":\"TreasuryFeeTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmountBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmountAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedBorrowedAmount\",\"type\":\"uint256\"}],\"name\":\"UnexpectedBorrowAmountFromPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedTokenBalance\",\"type\":\"uint256\"}],\"name\":\"UnexpectedRepayAmountToPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedTokenBalance\",\"type\":\"uint256\"}],\"name\":\"UnexpectedSupplyAmountToPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableAmountBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableAmountAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedWithdrawableAmount\",\"type\":\"uint256\"}],\"name\":\"UnexpectedWithdrawAmountFromPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawalFeeBps\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFeeIsGreaterThanMaxFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroExchangeAssetAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroExchangeThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroReceiverAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRewardTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTreasuryAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"DLendRewardsControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputDebtTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minReceivedCollateralTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaidDebtTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnCollateralTokenAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseLeverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldExchangeThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExchangeThreshold\",\"type\":\"uint256\"}],\"name\":\"ExchangeThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeBps\",\"type\":\"uint256\"}],\"name\":\"FeeBpsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputCollateralTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minReceivedDebtTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"suppliedCollateralTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowedDebtTokenAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseLeverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"LeftoverCollateralTokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"LeftoverDebtTokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"lowerBoundTargetLeverageBps\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"upperBoundTargetLeverageBps\",\"type\":\"uint32\"}],\"name\":\"LeverageBoundsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxSubsidyBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSubsidyBps\",\"type\":\"uint256\"}],\"name\":\"MaxSubsidyBpsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinDeviationBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinDeviationBps\",\"type\":\"uint256\"}],\"name\":\"MinDeviationBpsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"RewardCompounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTreasuryFeeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTreasuryFeeBps\",\"type\":\"uint256\"}],\"name\":\"TreasuryFeeBpsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWithdrawalFeeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawalFeeBps\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFeeBpsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE_PRICE_ORACLE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BALANCE_DIFF_TOLERANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DLOOP_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEVERAGE_DIFF_TOLERANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESCUER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESCUER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VARIABLE_LENDING_INTERST_RATE_MODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"compoundRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"convertFromBaseCurrencyToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"convertFromTokenAmountToBaseCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreState\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"lendingPoolAddressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dLendAssetToClaimFor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetStaticATokenWrapper\",\"type\":\"address\"},{\"internalType\":\"contract IRewardsController\",\"name\":\"dLendRewardsController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputDebtTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceivedCollateralTokenAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPriceFromOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCollateralValueInTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLeverageBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSubsidyBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDebtValueInTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultMaxSubsidyBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalCollateralAndDebtOfUserInBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputCollateralTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceivedDebtTokenAmount\",\"type\":\"uint256\"}],\"name\":\"increaseLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isRescuableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTooImbalanced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundTargetLeverageBps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSubsidyBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTreasuryFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeviationBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDLendRewardsController\",\"type\":\"address\"}],\"name\":\"setDLendRewardsController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newExchangeThreshold\",\"type\":\"uint256\"}],\"name\":\"setExchangeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_lowerBoundTargetLeverageBps\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_upperBoundTargetLeverageBps\",\"type\":\"uint32\"}],\"name\":\"setLeverageBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSubsidyBps\",\"type\":\"uint256\"}],\"name\":\"setMaxSubsidyBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeviationBps\",\"type\":\"uint256\"}],\"name\":\"setMinDeviationBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTreasuryFeeBps\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWithdrawalFeeBps\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLeverageBps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundTargetLeverageBps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Read the documentation of DLoopCoreBase for more details      - This contract implement dLEND-specific lending operations for DLoopCoreBase\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"compoundRewards(uint256,address[],address)\":{\"details\":\"Compounds multiple rewards\",\"params\":{\"amount\":\"The amount to compound\",\"receiver\":\"The address to receive the compounded rewards\",\"rewardTokens\":\"The reward tokens to claim\"}},\"constructor\":{\"details\":\"Constructor for the DLoopCoreDLend contract using struct to avoid stack-too-deep\"},\"convertFromBaseCurrencyToToken(uint256,address)\":{\"details\":\"Converts an amount in base currency to the actual amount in the token\",\"params\":{\"amountInBase\":\"Amount in base currency\",\"token\":\"Address of the token\"},\"returns\":{\"_0\":\"amountInToken Amount in the token\"}},\"convertFromTokenAmountToBaseCurrency(uint256,address)\":{\"details\":\"Converts an amount in the token to the actual amount in base currency\",\"params\":{\"amountInToken\":\"Amount in the token\",\"token\":\"Address of the token\"},\"returns\":{\"_0\":\"amountInBase Amount in base currency\"}},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"decreaseLeverage(uint256,uint256)\":{\"details\":\"Requires spending debt token from the user's wallet to repay debt to the pool.      Will send the withdrawn collateral asset to the user's wallet.\",\"params\":{\"inputDebtTokenAmount\":\"The amount of debt token to repay\",\"minReceivedCollateralTokenAmount\":\"The minimum amount of collateral asset to receive\"}},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"getAssetPriceFromOracle(address)\":{\"details\":\"Gets the asset price from the oracle\",\"params\":{\"asset\":\"Address of the asset\"},\"returns\":{\"_0\":\"uint256 Price of the asset\"}},\"getCollateralTokenAddress()\":{\"returns\":{\"_0\":\"address The address of the collateral token\"}},\"getCollateralValueInTokenAmount(address,address)\":{\"details\":\"Get the collateral value in token amount in the underlying pool\",\"params\":{\"token\":\"The address of the token\",\"user\":\"The address of the user\"},\"returns\":{\"collateralTokenAmount\":\"The collateral token amount\"}},\"getCurrentLeverageBps()\":{\"details\":\"Calculates leverage based on total collateral and debt values\",\"returns\":{\"_0\":\"uint256 The current leverage in basis points\"}},\"getCurrentSubsidyBps()\":{\"details\":\"Calculates subsidy based on leverage deviation from target\",\"returns\":{\"_0\":\"uint256 The current subsidy in basis points\"}},\"getDebtTokenAddress()\":{\"returns\":{\"_0\":\"address The address of the debt token\"}},\"getDebtValueInTokenAmount(address,address)\":{\"details\":\"Get the debt value in token amount in the underlying pool\",\"params\":{\"token\":\"The address of the token\",\"user\":\"The address of the user\"},\"returns\":{\"debtTokenAmount\":\"The debt token amount\"}},\"getDefaultMaxSubsidyBps()\":{\"returns\":{\"_0\":\"uint256 The default maximum subsidy in basis points\"}},\"getLendingOracle()\":{\"details\":\"Gets the lending oracle\",\"returns\":{\"_0\":\"IPriceOracleGetter The lending oracle interface\"}},\"getLendingPool()\":{\"details\":\"Gets the lending pool\",\"returns\":{\"_0\":\"ILendingPool The lending pool interface\"}},\"getLendingPoolAddress()\":{\"details\":\"Gets the lending pool address\",\"returns\":{\"_0\":\"address The lending pool address\"}},\"getOracleAddress()\":{\"details\":\"Gets the oracle address\",\"returns\":{\"_0\":\"address The oracle address\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTotalCollateralAndDebtOfUserInBase(address)\":{\"details\":\"Gets the total collateral and debt of a user in base currency\",\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"totalCollateralBase\":\"Total collateral in base currency\",\"totalDebtBase\":\"Total debt in base currency\"}},\"getTreasuryFee(uint256)\":{\"details\":\"Calculates the treasury fee for a given amount\",\"params\":{\"amount\":\"The amount to calculate the treasury fee for\"},\"returns\":{\"_0\":\"The treasury fee in the same unit as the amount\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseLeverage(uint256,uint256)\":{\"details\":\"Requires spending collateral token from the user's wallet to supply to the pool.      Will send the borrowed debt token to the user's wallet.\",\"params\":{\"inputCollateralTokenAmount\":\"The amount of collateral token to deposit\",\"minReceivedDebtTokenAmount\":\"The minimum amount of debt token to receive\"}},\"isRescuableToken(address)\":{\"details\":\"Do not rescue the aToken, variable debt token and stable debt token of the collateral token      - Implement this method from RescuableVault\",\"params\":{\"token\":\"Address of the token to check\"},\"returns\":{\"_0\":\"bool True if the token is a restricted rescue token, false otherwise\"}},\"isTooImbalanced()\":{\"details\":\"Returns whether the current leverage is too imbalanced\",\"returns\":{\"_0\":\"bool True if leverage is too imbalanced, false otherwise\"}},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}.\"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}.\"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}.\"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Only callable by accounts with the pauser role\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}.\"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}.\"},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"rescueToken(address,address,uint256)\":{\"details\":\"Rescues tokens accidentally sent to the contract (except for the collateral token and debt token)\",\"params\":{\"amount\":\"Amount of tokens to rescue\",\"receiver\":\"Address to receive the rescued tokens\",\"token\":\"Address of the token to rescue\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setDLendRewardsController(address)\":{\"details\":\"Only callable by accounts with the dLoop admin role.\",\"params\":{\"_newDLendRewardsController\":\"The address of the new rewards controller.\"}},\"setExchangeThreshold(uint256)\":{\"details\":\"Sets the minimum threshold for exchange operations\",\"params\":{\"newExchangeThreshold\":\"New minimum threshold amount\"}},\"setLeverageBounds(uint32,uint32)\":{\"details\":\"Sets the lower and upper bounds of target leverage\",\"params\":{\"_lowerBoundTargetLeverageBps\":\"New lower bound of target leverage in basis points\",\"_upperBoundTargetLeverageBps\":\"New upper bound of target leverage in basis points\"}},\"setMaxSubsidyBps(uint256)\":{\"details\":\"Only callable by accounts with the admin role\",\"params\":{\"_maxSubsidyBps\":\"New maximum subsidy in basis points\"}},\"setMinDeviationBps(uint256)\":{\"details\":\"Only callable by accounts with the admin role\",\"params\":{\"_minDeviationBps\":\"New minimum deviation of leverage from the target leverage in basis points\"}},\"setTreasury(address)\":{\"details\":\"Sets the treasury address\",\"params\":{\"newTreasury\":\"The new treasury address\"}},\"setTreasuryFeeBps(uint256)\":{\"details\":\"Sets the treasury fee in basis points\",\"params\":{\"newTreasuryFeeBps\":\"New treasury fee in basis points (100 = 1bps = 0.01%)\"}},\"setWithdrawalFeeBps(uint256)\":{\"details\":\"Only callable by accounts with the admin role\",\"params\":{\"newWithdrawalFeeBps\":\"The new withdrawal fee in basis points\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"Override of totalAssets from ERC4626\",\"returns\":{\"_0\":\"uint256 Total assets in the vault\"}},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"unpause()\":{\"details\":\"Only callable by accounts with the pauser role\"},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"title\":\"DLoopCoreDLend\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decreaseLeverage(uint256,uint256)\":{\"notice\":\"Decreases the leverage of the user by repaying debt and withdrawing collateral\"},\"getCollateralTokenAddress()\":{\"notice\":\"Gets the address of the collateral token\"},\"getCurrentLeverageBps()\":{\"notice\":\"Gets the current leverage in basis points\"},\"getCurrentSubsidyBps()\":{\"notice\":\"Gets the current subsidy in basis points\"},\"getDebtTokenAddress()\":{\"notice\":\"Gets the address of the debt token\"},\"getDefaultMaxSubsidyBps()\":{\"notice\":\"Gets the default maximum subsidy in basis points\"},\"increaseLeverage(uint256,uint256)\":{\"notice\":\"Increases the leverage of the user by supplying collateral token and borrowing more debt token\"},\"pause()\":{\"notice\":\"Pauses the contract\"},\"setDLendRewardsController(address)\":{\"notice\":\"Sets the address of the dLEND RewardsController contract.\"},\"setMaxSubsidyBps(uint256)\":{\"notice\":\"Sets the maximum subsidy in basis points\"},\"setMinDeviationBps(uint256)\":{\"notice\":\"Sets the minimum deviation of leverage from the target leverage in basis points\"},\"setWithdrawalFeeBps(uint256)\":{\"notice\":\"Sets the withdrawal fee in basis points\"},\"unpause()\":{\"notice\":\"Unpauses the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol\":\"DLoopCoreDLend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a6b4f6b7798ab80929d491b89d5427a9b3338c0fd1acd0ba325f69c6f1646af\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC4626.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x23460d4a98e568bde8b7ecaa2316853778032106b489c03be29db1abb0e712c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, IERC20Metadata, ERC20} from \\\"../ERC20.sol\\\";\\nimport {SafeERC20} from \\\"../utils/SafeERC20.sol\\\";\\nimport {IERC4626} from \\\"../../../interfaces/IERC4626.sol\\\";\\nimport {Math} from \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC-4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC-20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC-20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation introduces configurable virtual assets and shares to help developers mitigate that risk.\\n * The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals\\n * and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which\\n * itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default\\n * offset (0) makes it non-profitable even if an attacker is able to capture value from multiple user deposits, as a result\\n * of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains.\\n * With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the\\n * underlying math can be found xref:ROOT:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC-20 or ERC-777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool ok, uint8 assetDecimals) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeCall(IERC20Metadata.decimals, ())\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function asset() public view virtual returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function totalAssets() public view virtual returns (uint256) {\\n        return IERC20(asset()).balanceOf(address(this));\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Ceil);\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Ceil);\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\\n        uint256 maxAssets = maxDeposit(receiver);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\\n        uint256 maxShares = maxMint(receiver);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxAssets = maxWithdraw(owner);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /// @inheritdoc IERC4626\\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxShares = maxRedeem(owner);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If asset() is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(IERC20(asset()), caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If asset() is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(IERC20(asset()), receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8796151c7e8fdd75a70d747201065f6d0d969d6a728a2b51804ed1e0c927a8c9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/common/BasisPointConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nlibrary BasisPointConstants {\\n    // Shared definitions of how we represent percentages and basis points\\n    uint16 public constant ONE_BPS = 100; // 1 basis point with 2 decimals\\n    uint32 public constant ONE_PERCENT_BPS = ONE_BPS * 100;\\n    uint32 public constant ONE_HUNDRED_PERCENT_BPS = ONE_PERCENT_BPS * 100;\\n}\\n\",\"keccak256\":\"0xcaa3c2f2eaf2de426875dafae0956015204c7cf85939010129192c2da4aeb54e\",\"license\":\"MIT\"},\"contracts/common/Compare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nlibrary Compare {\\n    /**\\n     * @dev Returns true if observed and expected differ by no more than the tolerance (absolute comparison).\\n     *      This is useful for allowing small rounding differences (e.g., 1 wei) in balance deltas.\\n     * @param observed The observed value (e.g., balance delta actually seen)\\n     * @param expected The expected value\\n     * @param tolerance The allowed absolute difference between observed and expected\\n     */\\n    function isWithinTolerance(uint256 observed, uint256 expected, uint256 tolerance) internal pure returns (bool) {\\n        if (observed > expected) {\\n            return observed - expected <= tolerance;\\n        }\\n        return expected - observed <= tolerance;\\n    }\\n\\n    /**\\n     * @dev Direction of expected balance change between two observations\\n     */\\n    enum BalanceDirection {\\n        Increase,\\n        Decrease\\n    }\\n\\n    struct BalanceCheckResult {\\n        bool directionOk;\\n        uint256 observedDelta;\\n        bool toleranceOk;\\n    }\\n\\n    /**\\n     * @dev Checks a balance change from before to after against an expected delta and tolerance.\\n     *      This helper allows callers to keep custom error types local while sharing the core logic.\\n     * @param beforeBalance The balance before the operation\\n     * @param afterBalance The balance after the operation\\n     * @param expectedDelta The expected absolute change amount\\n     * @param tolerance The allowed absolute difference between observed and expected\\n     * @param direction The expected direction of change (Increase or Decrease)\\n     * @return result Struct containing: directionOk, observedDelta, toleranceOk\\n     */\\n    function checkBalanceDelta(\\n        uint256 beforeBalance,\\n        uint256 afterBalance,\\n        uint256 expectedDelta,\\n        uint256 tolerance,\\n        BalanceDirection direction\\n    ) internal pure returns (BalanceCheckResult memory result) {\\n        if (direction == BalanceDirection.Increase) {\\n            result.directionOk = afterBalance > beforeBalance;\\n            if (result.directionOk) {\\n                result.observedDelta = afterBalance - beforeBalance;\\n            }\\n        } else {\\n            result.directionOk = afterBalance < beforeBalance;\\n            if (result.directionOk) {\\n                result.observedDelta = beforeBalance - afterBalance;\\n            }\\n        }\\n\\n        if (!result.directionOk) {\\n            // Short-circuit: when direction is not satisfied, tolerance check is irrelevant\\n            result.toleranceOk = false;\\n            return result;\\n        }\\n\\n        result.toleranceOk = isWithinTolerance(result.observedDelta, expectedDelta, tolerance);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3c324563611cb278ba500d6c370268b3159bc895c2b5523a933a620e5b26a78e\",\"license\":\"MIT\"},\"contracts/common/Erc20Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nlibrary Erc20Helper {\\n    /**\\n     * @dev Checks if a token is an ERC-20\\n     * @param token Address of the token\\n     * @return bool True if the token is an ERC-20, false otherwise\\n     */\\n    function isERC20(address token) internal view returns (bool) {\\n        try ERC20(token).totalSupply() returns (uint256) {\\n            try ERC20(token).balanceOf(address(this)) returns (uint256) {\\n                return true;\\n            } catch {\\n                return false;\\n            }\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf95a78963f98fd249dbe21ce83cb6d49e5b819b4eab58b484b4e2f197e2614c4\",\"license\":\"MIT\"},\"contracts/common/Rescuable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { ERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title Rescuable\\n * @dev A helper contract for rescuing tokens accidentally sent to the contract\\n *      - The derived contract must implement the isRescuableToken() function\\n */\\nabstract contract Rescuable {\\n    error CannotRescueRestrictedToken(address token);\\n\\n    using SafeERC20 for ERC20;\\n\\n    /* Virtual Methods - Required to be implemented by derived contracts */\\n\\n    /**\\n     * @dev Checks if the token is a restricted rescue token\\n     * @param token Address of the token to check\\n     * @return bool True if the token is a restricted rescue token, false otherwise\\n     */\\n    function isRescuableToken(address token) public view virtual returns (bool);\\n\\n    /* Rescue Functions */\\n\\n    /**\\n     * @dev Rescues tokens accidentally sent to the contract\\n     * @param token Address of the token to rescue\\n     * @param receiver Address to receive the rescued tokens\\n     * @param amount Amount of tokens to rescue\\n     */\\n    function _rescueToken(address token, address receiver, uint256 amount) internal {\\n        if (isRescuableToken(token)) {\\n            revert CannotRescueRestrictedToken(token);\\n        }\\n\\n        // Rescue the token\\n        ERC20(token).safeTransfer(receiver, amount);\\n    }\\n\\n    // Rescue native token\\n    function _rescueNative(address receiver, uint256 amount) internal {\\n        // Transfer the native token to the receiver\\n        Address.sendValue(payable(receiver), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7fd542379cbad2c79b37ba52ff24c5b7c99f2b8c17d9cdc39e2ea9c91d11f7d6\",\"license\":\"MIT\"},\"contracts/common/WithdrawalFeeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { BasisPointConstants } from \\\"./BasisPointConstants.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary WithdrawalFeeMath {\\n    uint256 internal constant _SCALE = BasisPointConstants.ONE_HUNDRED_PERCENT_BPS;\\n\\n    function calculateWithdrawalFee(uint256 grossAmount, uint256 feeBps) internal pure returns (uint256) {\\n        if (grossAmount == 0 || feeBps == 0) {\\n            return 0;\\n        }\\n        if (feeBps >= _SCALE) {\\n            return grossAmount;\\n        }\\n        return Math.mulDiv(grossAmount, feeBps, _SCALE);\\n    }\\n\\n    function netAfterFee(uint256 grossAmount, uint256 feeBps) internal pure returns (uint256) {\\n        if (grossAmount == 0) {\\n            return 0;\\n        }\\n        if (feeBps == 0) {\\n            return grossAmount;\\n        }\\n        if (feeBps >= _SCALE) {\\n            return 0;\\n        }\\n\\n        uint256 fee = calculateWithdrawalFee(grossAmount, feeBps);\\n        if (fee >= grossAmount) {\\n            return 0;\\n        }\\n        return grossAmount - fee;\\n    }\\n\\n    function grossFromNet(uint256 netAmount, uint256 feeBps) internal pure returns (uint256) {\\n        if (netAmount == 0 || feeBps == 0) {\\n            return netAmount;\\n        }\\n        if (feeBps >= _SCALE) {\\n            return 0;\\n        }\\n\\n        uint256 grossAmount = Math.mulDiv(netAmount, _SCALE, _SCALE - feeBps, Math.Rounding.Ceil);\\n\\n        if (grossAmount > 0) {\\n            uint256 alternativeNet = netAfterFee(grossAmount - 1, feeBps);\\n            if (alternativeNet >= netAmount) {\\n                grossAmount -= 1;\\n            }\\n        }\\n\\n        return grossAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x93cc559266dc6cea6515a7580a2b0a36aa2ea486429c402946fb3c4cfcf5be5f\",\"license\":\"MIT\"},\"contracts/vaults/dloop/core/DLoopCoreBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { BasisPointConstants } from \\\"contracts/common/BasisPointConstants.sol\\\";\\nimport { ERC4626, ERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport { Erc20Helper } from \\\"contracts/common/Erc20Helper.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { DLoopCoreLogic } from \\\"./DLoopCoreLogic.sol\\\";\\nimport { Compare } from \\\"contracts/common/Compare.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @title DLoopCoreBase\\n * @dev A contract that executes leveraged operations on a lending pool using a collateral token and a debt token\\n *      - A leveraged position is created by supplying a collateral token to the lending pool and borrowing a debt token\\n *      - The leverage ratio will be changed if the collateral and debt values are changed (due to price changes)\\n *      - The leverage can be increased by supplying more collateral token or decreasing the debt token\\n *      - The leverage can be decreased by withdrawing collateral token or increasing the debt token\\n *      - In order to keep the vault balanced, user can call increaseLeverage or decreaseLeverage to increase or decrease the leverage\\n *        when it is away from the target leverage\\n *      - There is a subsidy for the caller when increasing the leverage.\\n *      - The withdrawal fee is being applied when calling redeem and withdraw. The fee is not being transferred to a fee receiver, instead\\n *        it is being shared to the current shares holders. It means, the vault of the vault's share will be a bit increased after a user's withdrawal.\\n *      - The withdrawal fee is not applied for decreaseLeverage(), as this operation is not a vault withdrawal, instead, it repay and withdraw\\n *        from the underlying pool to rebalance the vault position, not vault's shares are being burned.\\n *\\n * @notice Withdrawal fee retention (no external transfers)\\n * @dev The withdrawal fee is retained by the vault and is not sent to any external recipient.\\n *      Users receive net assets after fee; the difference remains in the vault and accrues to remaining shares.\\n *      - previewWithdraw treats `assets` as the desired net and converts to gross using:\\n *        gross = assets * ONE_HUNDRED_PERCENT_BPS / (ONE_HUNDRED_PERCENT_BPS - withdrawalFeeBps).\\n *      - previewRedeem returns the net assets after applying the fee.\\n *      - During _withdraw, only the net amount is transferred to `receiver`; the fee stays in the vault balance.\\n */\\nabstract contract DLoopCoreBase is ERC4626, AccessControl, ReentrancyGuard, Pausable {\\n    using SafeERC20 for ERC20;\\n\\n    /* Core state */\\n\\n    uint32 public lowerBoundTargetLeverageBps;\\n    uint32 public upperBoundTargetLeverageBps;\\n    uint256 public maxSubsidyBps;\\n    uint256 public minDeviationBps;\\n    uint256 public withdrawalFeeBps;\\n\\n    /* Constants */\\n\\n    bytes32 public constant DLOOP_ADMIN_ROLE = keccak256(\\\"DLOOP_ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    uint32 public immutable targetLeverageBps; // ie. 30000 = 300% in basis points, means 3x leverage\\n    ERC20 public immutable collateralToken;\\n    ERC20 public immutable debtToken;\\n\\n    uint256 public constant BALANCE_DIFF_TOLERANCE = 1;\\n    uint256 public constant LEVERAGE_DIFF_TOLERANCE = 1;\\n    uint256 public constant MAX_WITHDRAWAL_FEE_BPS = 10 * BasisPointConstants.ONE_PERCENT_BPS; // 100%\\n\\n    /* Events */\\n\\n    event IncreaseLeverage(\\n        address indexed caller,\\n        uint256 inputCollateralTokenAmount,\\n        uint256 minReceivedDebtTokenAmount,\\n        uint256 suppliedCollateralTokenAmount,\\n        uint256 borrowedDebtTokenAmount\\n    );\\n\\n    event DecreaseLeverage(\\n        address indexed caller,\\n        uint256 inputDebtTokenAmount,\\n        uint256 minReceivedCollateralTokenAmount,\\n        uint256 repaidDebtTokenAmount,\\n        uint256 withdrawnCollateralTokenAmount\\n    );\\n\\n    event MaxSubsidyBpsSet(uint256 oldMaxSubsidyBps, uint256 newMaxSubsidyBps);\\n\\n    event MinDeviationBpsSet(uint256 oldMinDeviationBps, uint256 newMinDeviationBps);\\n\\n    event LeverageBoundsSet(uint32 lowerBoundTargetLeverageBps, uint32 upperBoundTargetLeverageBps);\\n\\n    event WithdrawalFeeBpsSet(uint256 oldWithdrawalFeeBps, uint256 newWithdrawalFeeBps);\\n\\n    event LeftoverCollateralTokensTransferred(address indexed token, uint256 amount, address indexed receiver);\\n\\n    event LeftoverDebtTokensTransferred(address indexed token, uint256 amount, address indexed receiver);\\n\\n    /* Errors */\\n\\n    error TooImbalanced(\\n        uint256 currentLeverageBps,\\n        uint256 lowerBoundTargetLeverageBps,\\n        uint256 upperBoundTargetLeverageBps\\n    );\\n    error InsufficientAllowanceOfDebtAssetToRepay(\\n        address owner,\\n        address spender,\\n        address debtAsset,\\n        uint256 requiredAllowance\\n    );\\n    error InsufficientAllowanceOfCollateralAssetToSupply(\\n        address owner,\\n        address spender,\\n        address collateralAsset,\\n        uint256 requiredAllowance\\n    );\\n    error DecreaseLeverageOutOfRange(\\n        uint256 newLeverageBps,\\n        uint256 targetLeverageBps, // lower bound\\n        uint256 currentLeverageBps // upper bound\\n    );\\n    error IncreaseLeverageOutOfRange(\\n        uint256 newLeverageBps,\\n        uint256 targetLeverageBps, // upper bound\\n        uint256 currentLeverageBps // lower bound\\n    );\\n    error TokenBalanceNotDecreasedAfterRepay(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error UnexpectedRepayAmountToPool(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error TokenBalanceNotDecreasedAfterSupply(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error UnexpectedSupplyAmountToPool(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error TokenBalanceNotIncreasedAfterBorrow(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error UnexpectedBorrowAmountFromPool(\\n        address token,\\n        uint256 borrowedAmountBefore,\\n        uint256 borrowedAmountAfter,\\n        uint256 expectedBorrowedAmount\\n    );\\n    error TokenBalanceNotIncreasedAfterWithdraw(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error UnexpectedWithdrawAmountFromPool(\\n        address token,\\n        uint256 withdrawableAmountBefore,\\n        uint256 withdrawableAmountAfter,\\n        uint256 expectedWithdrawableAmount\\n    );\\n    error InvalidLeverageBounds(uint256 lowerBound, uint256 targetLeverage, uint256 upperBound);\\n    error AssetPriceIsZero(address asset);\\n    error LeverageExceedsTarget(uint256 currentLeverageBps, uint256 targetLeverageBps);\\n    error LeverageBelowTarget(uint256 currentLeverageBps, uint256 targetLeverageBps);\\n    error IncreaseLeverageReceiveLessThanMinAmount(uint256 receivedDebtTokenAmount, uint256 minReceivedDebtTokenAmount);\\n    error DecreaseLeverageReceiveLessThanMinAmount(\\n        uint256 receivedCollateralTokenAmount,\\n        uint256 minReceivedCollateralTokenAmount\\n    );\\n    error ZeroShares();\\n    error WithdrawalFeeIsGreaterThanMaxFee(uint256 withdrawalFeeBps, uint256 maxWithdrawalFeeBps);\\n    error InvalidTargetLeverage(uint256 targetLeverageBps);\\n    error InvalidCollateralToken(address token);\\n    error InvalidDebtToken(address token);\\n\\n    /**\\n     * @dev Constructor for the DLoopCore contract\\n     * @param _name Name of the vault token\\n     * @param _symbol Symbol of the vault token\\n     * @param _collateralToken Address of the collateral token\\n     * @param _debtToken Address of the debt token\\n     * @param _targetLeverageBps Target leverage in basis points\\n     * @param _lowerBoundTargetLeverageBps Lower bound of target leverage in basis points\\n     * @param _upperBoundTargetLeverageBps Upper bound of target leverage in basis points\\n     * @param _maxSubsidyBps Maximum subsidy in basis points\\n     * @param _minDeviationBps Minimum deviation of leverage from the target leverage in basis points\\n     * @param _withdrawalFeeBps Initial withdrawal fee in basis points\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        ERC20 _collateralToken,\\n        ERC20 _debtToken,\\n        uint32 _targetLeverageBps,\\n        uint32 _lowerBoundTargetLeverageBps,\\n        uint32 _upperBoundTargetLeverageBps,\\n        uint256 _maxSubsidyBps,\\n        uint256 _minDeviationBps,\\n        uint256 _withdrawalFeeBps\\n    ) ERC20(_name, _symbol) ERC4626(_collateralToken) {\\n        debtToken = _debtToken;\\n        collateralToken = _collateralToken;\\n\\n        if (_targetLeverageBps < BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert InvalidTargetLeverage(_targetLeverageBps);\\n        }\\n\\n        if (_lowerBoundTargetLeverageBps >= _targetLeverageBps || _targetLeverageBps >= _upperBoundTargetLeverageBps) {\\n            revert InvalidLeverageBounds(\\n                _lowerBoundTargetLeverageBps,\\n                _targetLeverageBps,\\n                _upperBoundTargetLeverageBps\\n            );\\n        }\\n\\n        // Make sure collateral token is ERC-20\\n        if (!Erc20Helper.isERC20(address(_collateralToken))) {\\n            revert InvalidCollateralToken(address(_collateralToken));\\n        }\\n\\n        // Make sure debt token is ERC-20\\n        if (!Erc20Helper.isERC20(address(_debtToken))) {\\n            revert InvalidDebtToken(address(_debtToken));\\n        }\\n\\n        targetLeverageBps = _targetLeverageBps;\\n        lowerBoundTargetLeverageBps = _lowerBoundTargetLeverageBps;\\n        upperBoundTargetLeverageBps = _upperBoundTargetLeverageBps;\\n        maxSubsidyBps = _maxSubsidyBps;\\n        minDeviationBps = _minDeviationBps;\\n        withdrawalFeeBps = _withdrawalFeeBps;\\n\\n        _setRoleAdmin(DLOOP_ADMIN_ROLE, DLOOP_ADMIN_ROLE);\\n        _setRoleAdmin(PAUSER_ROLE, DLOOP_ADMIN_ROLE);\\n        _grantRole(DLOOP_ADMIN_ROLE, _msgSender());\\n        _grantRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /* Virtual Methods - Required to be implemented by derived contracts */\\n\\n    /**\\n     * @dev Gets the total collateral and debt of a user in base currency\\n     * @param user Address of the user\\n     * @return totalCollateralBase Total collateral in base currency\\n     * @return totalDebtBase Total debt in base currency\\n     */\\n    function getTotalCollateralAndDebtOfUserInBase(\\n        address user\\n    ) public view returns (uint256 totalCollateralBase, uint256 totalDebtBase) {\\n        // Collateral side: balance of the aToken corresponding to collateralToken\\n        uint256 collateralBalanceInTokenAmount = getCollateralValueInTokenAmount(address(collateralToken), user);\\n        totalCollateralBase = convertFromTokenAmountToBaseCurrency(\\n            collateralBalanceInTokenAmount,\\n            address(collateralToken)\\n        );\\n\\n        // Debt side: sum of variable + stable debt token balances corresponding to debtToken\\n        uint256 debtBalanceInTokenAmount = getDebtValueInTokenAmount(address(debtToken), user);\\n        totalDebtBase = convertFromTokenAmountToBaseCurrency(debtBalanceInTokenAmount, address(debtToken));\\n        return (totalCollateralBase, totalDebtBase);\\n    }\\n\\n    /**\\n     * @dev Get the collateral value in token amount in the underlying pool\\n     * @param token The address of the token\\n     * @param user The address of the user\\n     * @return collateralTokenAmount The collateral token amount\\n     */\\n    function getCollateralValueInTokenAmount(\\n        address token,\\n        address user\\n    ) public view virtual returns (uint256 collateralTokenAmount);\\n\\n    /**\\n     * @dev Get the debt value in token amount in the underlying pool\\n     * @param token The address of the token\\n     * @param user The address of the user\\n     * @return debtTokenAmount The debt token amount\\n     */\\n    function getDebtValueInTokenAmount(\\n        address token,\\n        address user\\n    ) public view virtual returns (uint256 debtTokenAmount);\\n\\n    /**\\n     * @dev Gets the asset price from the oracle\\n     * @param asset Address of the asset\\n     * @return uint256 Price of the asset\\n     */\\n    function _getAssetPriceFromOracleImplementation(address asset) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Supply tokens to the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to supply\\n     * @param onBehalfOf Address to supply on behalf of\\n     */\\n    function _supplyToPoolImplementation(address token, uint256 amount, address onBehalfOf) internal virtual;\\n\\n    /**\\n     * @dev Borrow tokens from the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to borrow\\n     * @param onBehalfOf Address to borrow on behalf of\\n     */\\n    function _borrowFromPoolImplementation(address token, uint256 amount, address onBehalfOf) internal virtual;\\n\\n    /**\\n     * @dev Repay debt to the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to repay\\n     * @param onBehalfOf Address to repay on behalf of\\n     */\\n    function _repayDebtToPoolImplementation(address token, uint256 amount, address onBehalfOf) internal virtual;\\n\\n    /**\\n     * @dev Withdraw tokens from the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to withdraw\\n     * @param onBehalfOf Address to withdraw on behalf of\\n     */\\n    function _withdrawFromPoolImplementation(address token, uint256 amount, address onBehalfOf) internal virtual;\\n\\n    /* Wrapper Functions */\\n\\n    /**\\n     * @dev Supply tokens to the lending pool, and make sure the output is as expected\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to supply\\n     * @param onBehalfOf Address to supply on behalf of\\n     * @return uint256 The amount of tokens supplied\\n     */\\n    function _supplyToPool(address token, uint256 amount, address onBehalfOf) internal returns (uint256) {\\n        // At this step, we assume that the funds from the depositor are already in the vault\\n\\n        uint256 tokenBalanceBeforeSupply = ERC20(token).balanceOf(onBehalfOf);\\n\\n        _supplyToPoolImplementation(token, amount, onBehalfOf);\\n\\n        uint256 tokenBalanceAfterSupply = ERC20(token).balanceOf(onBehalfOf);\\n\\n        Compare.BalanceCheckResult memory check = Compare.checkBalanceDelta(\\n            tokenBalanceBeforeSupply,\\n            tokenBalanceAfterSupply,\\n            amount,\\n            BALANCE_DIFF_TOLERANCE,\\n            Compare.BalanceDirection.Decrease\\n        );\\n        if (!check.directionOk) {\\n            revert TokenBalanceNotDecreasedAfterSupply(\\n                token,\\n                tokenBalanceBeforeSupply,\\n                tokenBalanceAfterSupply,\\n                amount\\n            );\\n        }\\n        if (!check.toleranceOk) {\\n            revert UnexpectedSupplyAmountToPool(token, tokenBalanceBeforeSupply, tokenBalanceAfterSupply, amount);\\n        }\\n\\n        // Return the observed value to avoid the case when the actual amount is 1 wei different from the expected amount\\n        return check.observedDelta;\\n    }\\n\\n    /**\\n     * @dev Borrow tokens from the lending pool, and make sure the output is as expected\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to borrow\\n     * @param onBehalfOf Address to borrow on behalf of\\n     * @return uint256 The amount of tokens borrowed\\n     */\\n    function _borrowFromPool(address token, uint256 amount, address onBehalfOf) internal returns (uint256) {\\n        // At this step, we assume that the funds from the depositor are already in the vault\\n\\n        uint256 tokenBalanceBeforeBorrow = ERC20(token).balanceOf(onBehalfOf);\\n\\n        _borrowFromPoolImplementation(token, amount, onBehalfOf);\\n\\n        uint256 tokenBalanceAfterBorrow = ERC20(token).balanceOf(onBehalfOf);\\n\\n        Compare.BalanceCheckResult memory check = Compare.checkBalanceDelta(\\n            tokenBalanceBeforeBorrow,\\n            tokenBalanceAfterBorrow,\\n            amount,\\n            BALANCE_DIFF_TOLERANCE,\\n            Compare.BalanceDirection.Increase\\n        );\\n        if (!check.directionOk) {\\n            revert TokenBalanceNotIncreasedAfterBorrow(\\n                token,\\n                tokenBalanceBeforeBorrow,\\n                tokenBalanceAfterBorrow,\\n                amount\\n            );\\n        }\\n        if (!check.toleranceOk) {\\n            revert UnexpectedBorrowAmountFromPool(token, tokenBalanceBeforeBorrow, tokenBalanceAfterBorrow, amount);\\n        }\\n\\n        // Return the observed value to avoid the case when the actual amount is 1 wei different from the expected amount\\n        return check.observedDelta;\\n    }\\n\\n    /**\\n     * @dev Repay debt to the lending pool, and make sure the output is as expected\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to repay\\n     * @param onBehalfOf Address to repay on behalf of\\n     * @return uint256 The amount of tokens repaid\\n     */\\n    function _repayDebtToPool(address token, uint256 amount, address onBehalfOf) internal returns (uint256) {\\n        // Get the debt position before repaying\\n        uint256 debtPositionBeforeRepay = getDebtValueInTokenAmount(token, onBehalfOf);\\n\\n        // Cap the amount to repay to the debt position to avoid\\n        // later balance assertion\\n        amount = Math.min(amount, debtPositionBeforeRepay);\\n\\n        // At this step, we assume that the funds from the depositor are already in the vault\\n\\n        uint256 tokenBalanceBeforeRepay = ERC20(token).balanceOf(onBehalfOf);\\n\\n        _repayDebtToPoolImplementation(token, amount, onBehalfOf);\\n\\n        uint256 tokenBalanceAfterRepay = ERC20(token).balanceOf(onBehalfOf);\\n\\n        Compare.BalanceCheckResult memory check = Compare.checkBalanceDelta(\\n            tokenBalanceBeforeRepay,\\n            tokenBalanceAfterRepay,\\n            amount,\\n            BALANCE_DIFF_TOLERANCE,\\n            Compare.BalanceDirection.Decrease\\n        );\\n        if (!check.directionOk) {\\n            revert TokenBalanceNotDecreasedAfterRepay(token, tokenBalanceBeforeRepay, tokenBalanceAfterRepay, amount);\\n        }\\n        if (!check.toleranceOk) {\\n            revert UnexpectedRepayAmountToPool(token, tokenBalanceBeforeRepay, tokenBalanceAfterRepay, amount);\\n        }\\n\\n        // Return the observed value to avoid the case when the actual amount is 1 wei different from the expected amount\\n        return check.observedDelta;\\n    }\\n\\n    /**\\n     * @dev Withdraw tokens from the lending pool, and make sure the output is as expected\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to withdraw\\n     * @param onBehalfOf Address to withdraw on behalf of\\n     * @return uint256 The amount of tokens withdrawn\\n     */\\n    function _withdrawFromPool(address token, uint256 amount, address onBehalfOf) internal returns (uint256) {\\n        // Get the collateral position before withdrawing\\n        uint256 collateralPositionBeforeWithdraw = getCollateralValueInTokenAmount(token, onBehalfOf);\\n\\n        // Cap the amount to withdraw to the collateral position to avoid\\n        // later balance assertion\\n        amount = Math.min(amount, collateralPositionBeforeWithdraw);\\n\\n        // At this step, we assume that the funds from the depositor are already in the vault\\n\\n        uint256 tokenBalanceBeforeWithdraw = ERC20(token).balanceOf(onBehalfOf);\\n\\n        _withdrawFromPoolImplementation(token, amount, onBehalfOf);\\n\\n        uint256 tokenBalanceAfterWithdraw = ERC20(token).balanceOf(onBehalfOf);\\n\\n        Compare.BalanceCheckResult memory check = Compare.checkBalanceDelta(\\n            tokenBalanceBeforeWithdraw,\\n            tokenBalanceAfterWithdraw,\\n            amount,\\n            BALANCE_DIFF_TOLERANCE,\\n            Compare.BalanceDirection.Increase\\n        );\\n        if (!check.directionOk) {\\n            revert TokenBalanceNotIncreasedAfterWithdraw(\\n                token,\\n                tokenBalanceBeforeWithdraw,\\n                tokenBalanceAfterWithdraw,\\n                amount\\n            );\\n        }\\n        if (!check.toleranceOk) {\\n            revert UnexpectedWithdrawAmountFromPool(\\n                token,\\n                tokenBalanceBeforeWithdraw,\\n                tokenBalanceAfterWithdraw,\\n                amount\\n            );\\n        }\\n\\n        // Return the observed value to avoid the case when the actual amount is 1 wei different from the expected amount\\n        return check.observedDelta;\\n    }\\n\\n    /* Helper Functions */\\n\\n    /**\\n     * @dev Gets the asset price from the oracle\\n     * @param asset Address of the asset\\n     * @return uint256 Price of the asset\\n     */\\n    function getAssetPriceFromOracle(address asset) public view returns (uint256) {\\n        uint256 assetPrice = _getAssetPriceFromOracleImplementation(asset);\\n\\n        // Sanity check\\n        if (assetPrice == 0) {\\n            revert AssetPriceIsZero(asset);\\n        }\\n\\n        return assetPrice;\\n    }\\n\\n    /**\\n     * @dev Converts an amount in base currency to the actual amount in the token\\n     * @param amountInBase Amount in base currency\\n     * @param token Address of the token\\n     * @return amountInToken Amount in the token\\n     */\\n    function convertFromBaseCurrencyToToken(uint256 amountInBase, address token) public view returns (uint256) {\\n        return\\n            DLoopCoreLogic.convertFromBaseCurrencyToToken(\\n                amountInBase,\\n                ERC20(token).decimals(),\\n                getAssetPriceFromOracle(token)\\n            );\\n    }\\n\\n    /**\\n     * @dev Converts an amount in the token to the actual amount in base currency\\n     * @param amountInToken Amount in the token\\n     * @param token Address of the token\\n     * @return amountInBase Amount in base currency\\n     */\\n    function convertFromTokenAmountToBaseCurrency(uint256 amountInToken, address token) public view returns (uint256) {\\n        return\\n            DLoopCoreLogic.convertFromTokenAmountToBaseCurrency(\\n                amountInToken,\\n                ERC20(token).decimals(),\\n                getAssetPriceFromOracle(token)\\n            );\\n    }\\n\\n    /**\\n     * @dev Override of totalAssets from ERC4626\\n     * @return uint256 Total assets in the vault\\n     */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        // We override this function to return the total assets in the vault\\n        // with respect to the position in the lending pool\\n        // The dLend interest will be distributed to the dToken\\n        (uint256 totalCollateralBase, ) = getTotalCollateralAndDebtOfUserInBase(address(this));\\n        // The price decimals is cancelled out in the division (as the amount and price are in the same unit)\\n        return convertFromBaseCurrencyToToken(totalCollateralBase, address(collateralToken));\\n    }\\n\\n    /* Safety */\\n\\n    /**\\n     * @dev Returns whether the current leverage is too imbalanced\\n     * @return bool True if leverage is too imbalanced, false otherwise\\n     */\\n    function isTooImbalanced() public view returns (bool) {\\n        return\\n            DLoopCoreLogic.isTooImbalanced(\\n                getCurrentLeverageBps(),\\n                lowerBoundTargetLeverageBps,\\n                upperBoundTargetLeverageBps\\n            );\\n    }\\n\\n    /* Deposit and Mint */\\n\\n    /**\\n     * @dev Deposits assets into the vault\\n     *      - It will send the borrowed debt token and the minted shares to the receiver\\n     *      - The minted shares represent the position of the supplied collateral assets in the lending pool\\n     * @param caller Address of the caller\\n     * @param receiver Address to receive the minted shares\\n     * @param assets Amount of assets to deposit\\n     * @param shares Amount of shares to mint\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal override nonReentrant {\\n        if (shares == 0) {\\n            revert ZeroShares();\\n        }\\n        /**\\n         * Example of how this function works:\\n         *\\n         * Suppose that the target leverage is 3x, and the baseLTVAsCollateral is 70%\\n         * - The collateral token is WETH\\n         * - The debt here is dUSD\\n         * - The current collateral token balance is 0 WETH\\n         * - The current debt token balance is 0 dUSD\\n         * - The current shares supply is 0\\n         * - Assume that the price of WETH is 2000 dUSD\\n         *\\n         * 1. User deposits 300 WETH\\n         * 2. The vault supplies 300 WETH to the lending pool\\n         * 3. The vault borrows 400,000 dUSD (300 * 2000 * 66.6666666%) from the lending pool\\n         *    - 66.666% is to keep the target leverage 3x\\n         * 4. The vault sends 400,000 dUSD to the receiver\\n         * 5. The vault mints 300 shares to the user (representing 300 WETH position in the lending pool)\\n         *\\n         * The current leverage is: (300 * 2000) / (300 * 2000 - 400,000) = 3x\\n         */\\n\\n        // Make sure the current leverage is within the target range\\n        if (isTooImbalanced()) {\\n            revert TooImbalanced(getCurrentLeverageBps(), lowerBoundTargetLeverageBps, upperBoundTargetLeverageBps);\\n        }\\n\\n        uint256 debtAssetBorrowed = _supplyAndBorrowFromPoolImplementation(caller, assets);\\n\\n        // Transfer the debt asset to the receiver\\n        debtToken.safeTransfer(receiver, debtAssetBorrowed);\\n\\n        // Mint the vault's shares to the depositor\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Handles the logic of supplying collateral token and borrowing debt token\\n     * @param caller Address of the caller\\n     * @param supplyAssetAmount Amount of assets to supply\\n     * @return borrowedDebtTokenAmount Amount of debt asset to borrow\\n     */\\n    function _supplyAndBorrowFromPoolImplementation(\\n        address caller,\\n        uint256 supplyAssetAmount // supply amount\\n    ) private returns (uint256 borrowedDebtTokenAmount) {\\n        // Get current leverage before transferring, supplying and borrowing\\n        // to avoid unexpected impact from the child contract implementation\\n        // IMPORTANT: this is the leverage before supplying\\n        uint256 currentLeverageBpsBeforeSupply = getCurrentLeverageBps();\\n\\n        // If do not have enough allowance, revert with the error message\\n        // This is to early-revert with instruction in the error message\\n        if (collateralToken.allowance(caller, address(this)) < supplyAssetAmount) {\\n            revert InsufficientAllowanceOfCollateralAssetToSupply(\\n                caller,\\n                address(this),\\n                address(collateralToken),\\n                supplyAssetAmount\\n            );\\n        }\\n\\n        // Transfer the assets to the vault (need the allowance before calling this function)\\n        collateralToken.safeTransferFrom(caller, address(this), supplyAssetAmount);\\n\\n        // At this step, the fund from the depositor is already in the vault\\n\\n        // In this case, the vault is user of the lending pool\\n        // So, we need to supply the collateral token to the pool on behalf of the vault\\n        // and then borrow the debt token from the pool on behalf of the vault\\n\\n        // Supply the collateral token to the lending pool\\n        uint256 actualSupplyAssetAmount = _supplyToPool(\\n            address(collateralToken),\\n            supplyAssetAmount,\\n            address(this) // the vault is the supplier\\n        );\\n\\n        // Get the amount of debt token to borrow that keeps the current leverage\\n        uint256 debtTokenAmountToBorrow = DLoopCoreLogic.getBorrowAmountThatKeepCurrentLeverage(\\n            actualSupplyAssetAmount,\\n            currentLeverageBpsBeforeSupply,\\n            targetLeverageBps,\\n            ERC20(collateralToken).decimals(),\\n            getAssetPriceFromOracle(address(collateralToken)),\\n            ERC20(debtToken).decimals(),\\n            getAssetPriceFromOracle(address(debtToken))\\n        );\\n\\n        // Borrow the max amount of debt token\\n        borrowedDebtTokenAmount = _borrowFromPool(\\n            address(debtToken),\\n            debtTokenAmountToBorrow,\\n            address(this) // the vault is the borrower\\n        );\\n\\n        // Transfer the unused collateral token to the caller\\n        if (actualSupplyAssetAmount < supplyAssetAmount - BALANCE_DIFF_TOLERANCE) {\\n            uint256 unusedCollateralTokenAmount = supplyAssetAmount - actualSupplyAssetAmount;\\n            collateralToken.safeTransfer(caller, unusedCollateralTokenAmount);\\n            emit LeftoverCollateralTokensTransferred(address(collateralToken), unusedCollateralTokenAmount, caller);\\n        }\\n\\n        return borrowedDebtTokenAmount;\\n    }\\n\\n    /* Withdraw and Redeem */\\n\\n    /**\\n     * @dev Withdraws collateral assets from the vault\\n     *      - It requires to spend the debt token to repay the debt\\n     *      - It will send the withdrawn collateral assets to the receiver and burn the shares\\n     *      - The burned shares represent the position of the withdrawn assets in the lending pool\\n     *      - The shares and assets are now reflected the charged withdrawal fee, thus no need to apply withdrawal fee again\\n     * @param caller Address of the caller\\n     * @param receiver Address to receive the withdrawn assets\\n     * @param owner Address of the owner\\n     * @param assets Amount of assets to remove from the lending pool\\n     * @param shares Amount of shares to burn\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal override nonReentrant {\\n        /**\\n         * Example of how this function works:\\n         *\\n         * Suppose that the target leverage is 3x, and the baseLTVAsCollateral is 70%\\n         * - The collateral token is WETH\\n         * - The debt here is dUSD\\n         * - The current shares supply is 300\\n         * - The current leverage is 3x\\n         * - The current collateral token balance is 300 WETH\\n         * - The current debt token balance is 400,000 dUSD (300 * 2000 * 66.6666666%)\\n         * - Assume that the price of WETH is 2000 dUSD\\n         *\\n         * 1. User has 100 shares\\n         * 2. User wants to withdraw 100 WETH\\n         * 3. The vault burns 100 shares\\n         * 4. The vault transfers 133,333 dUSD (100 * 2000 * 66.6666666%) from the user to the vault\\n         *    - 66.6666% is to keep the target leverage 3x\\n         * 5. The vault repays 133,333 dUSD to the lending pool\\n         *    - The debt is now 266,667 dUSD (400,000 - 133,333)\\n         * 6. The vault withdraws 100 WETH from the lending pool\\n         *    - The collateral is now 200 WETH (300 - 100)\\n         * 7. The vault sends 100 WETH to the receiver\\n         *\\n         * The current leverage is: (200 * 2000) / (200 * 2000 - 266,667) = 3x\\n         */\\n\\n        // Note that we need the allowance before calling this function\\n        // - Allowance for the message sender to spend the shares on behalf of the owner\\n        // - Allowance for the vault to burn the shares\\n\\n        // If the owner is not the caller, then we need to spend the allowance\\n        // so that the caller can spend the shares on behalf of the owner\\n        if (owner != caller) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // Burn the shares\\n        _burn(owner, shares);\\n\\n        // Make sure the current leverage is within the target range\\n        if (isTooImbalanced()) {\\n            revert TooImbalanced(getCurrentLeverageBps(), lowerBoundTargetLeverageBps, upperBoundTargetLeverageBps);\\n        }\\n\\n        // Withdraw the collateral from the lending pool\\n        // After this step, the _withdrawFromPool wrapper function will also assert that\\n        // the withdrawn amount is exactly the amount requested.\\n        (uint256 withdrawnCollateralTokenAmount, ) = _repayDebtAndWithdrawFromPoolImplementation(caller, assets);\\n\\n        // Transfer the net asset to the receiver\\n        collateralToken.safeTransfer(receiver, withdrawnCollateralTokenAmount);\\n\\n        // Emit ERC4626 Withdraw with amount actually sent\\n        emit Withdraw(caller, receiver, owner, withdrawnCollateralTokenAmount, shares);\\n    }\\n\\n    /**\\n     * @dev Handles the logic for repaying debt and withdrawing collateral from the pool\\n     *      - It calculates the required debt token to repay to keep the current leverage\\n     *        given the expected withdraw amount\\n     *      - Then performs the actual repay and withdraw\\n     * @param caller Address of the caller\\n     * @param collateralTokenToWithdraw The amount of collateral token to withdraw\\n     * @return withdrawnCollateralTokenAmount The amount of collateral token withdrawn\\n     * @return actualRepaidDebtTokenAmount The amount of debt token repaid\\n     */\\n    function _repayDebtAndWithdrawFromPoolImplementation(\\n        address caller,\\n        uint256 collateralTokenToWithdraw\\n    ) private returns (uint256 withdrawnCollateralTokenAmount, uint256 actualRepaidDebtTokenAmount) {\\n        // Get the current leverage before repaying the debt (IMPORTANT: this is the leverage before repaying the debt)\\n        // It is used to calculate the expected withdrawable amount that keeps the current leverage\\n        uint256 leverageBpsBeforeRepayDebt = getCurrentLeverageBps();\\n\\n        // Get the amount of debt token to repay to keep the current leverage\\n        uint256 estimatedRepaidDebtTokenAmount = DLoopCoreLogic.getRepayAmountThatKeepCurrentLeverage(\\n            collateralTokenToWithdraw,\\n            leverageBpsBeforeRepayDebt,\\n            ERC20(collateralToken).decimals(),\\n            getAssetPriceFromOracle(address(collateralToken)),\\n            ERC20(debtToken).decimals(),\\n            getAssetPriceFromOracle(address(debtToken))\\n        );\\n\\n        // If don't have enough allowance, revert with the error message\\n        // This is to early-revert with instruction in the error message\\n        if (debtToken.allowance(caller, address(this)) < estimatedRepaidDebtTokenAmount) {\\n            revert InsufficientAllowanceOfDebtAssetToRepay(\\n                caller,\\n                address(this),\\n                address(debtToken),\\n                estimatedRepaidDebtTokenAmount\\n            );\\n        }\\n\\n        // Transfer the debt token to the vault to repay the debt\\n        debtToken.safeTransferFrom(caller, address(this), estimatedRepaidDebtTokenAmount);\\n\\n        // In this case, the vault is user of the lending pool\\n        // So, we need to repay the debt to the pool on behalf of the vault\\n        // and then withdraw the collateral from the pool on behalf of the vault\\n\\n        // Repay the debt to withdraw the collateral\\n        // Update the repaid debt token amount to the actual amount as this\\n        // variable is also the return value of this function\\n        actualRepaidDebtTokenAmount = _repayDebtToPool(\\n            address(debtToken),\\n            estimatedRepaidDebtTokenAmount,\\n            address(this) // the vault is the borrower\\n        );\\n\\n        // Withdraw the collateral\\n        // At this step, the _withdrawFromPool wrapper function will also assert that\\n        // the withdrawn amount is exactly the amount requested.\\n        withdrawnCollateralTokenAmount = _withdrawFromPool(\\n            address(collateralToken),\\n            collateralTokenToWithdraw,\\n            address(this) // the vault is the receiver\\n        );\\n\\n        // Transfer the unused debt token to the caller\\n        if (actualRepaidDebtTokenAmount < estimatedRepaidDebtTokenAmount - BALANCE_DIFF_TOLERANCE) {\\n            uint256 unusedDebtTokenAmount = estimatedRepaidDebtTokenAmount - actualRepaidDebtTokenAmount;\\n            debtToken.safeTransfer(caller, unusedDebtTokenAmount);\\n            emit LeftoverDebtTokensTransferred(address(debtToken), unusedDebtTokenAmount, caller);\\n        }\\n\\n        return (withdrawnCollateralTokenAmount, actualRepaidDebtTokenAmount);\\n    }\\n\\n    /* Withdrawal fee */\\n\\n    /**\\n     * @notice Sets the withdrawal fee in basis points\\n     * @dev Only callable by accounts with the admin role\\n     * @param newWithdrawalFeeBps The new withdrawal fee in basis points\\n     */\\n    function setWithdrawalFeeBps(\\n        uint256 newWithdrawalFeeBps\\n    ) public onlyRole(DLOOP_ADMIN_ROLE) nonReentrant whenNotPaused {\\n        if (newWithdrawalFeeBps > MAX_WITHDRAWAL_FEE_BPS) {\\n            revert WithdrawalFeeIsGreaterThanMaxFee(newWithdrawalFeeBps, MAX_WITHDRAWAL_FEE_BPS);\\n        }\\n        uint256 oldWithdrawalFeeBps = withdrawalFeeBps;\\n        withdrawalFeeBps = newWithdrawalFeeBps;\\n        emit WithdrawalFeeBpsSet(oldWithdrawalFeeBps, newWithdrawalFeeBps);\\n    }\\n\\n    /* Rebalance */\\n\\n    /**\\n     * @notice Increases the leverage of the user by supplying collateral token and borrowing more debt token\\n     * @dev Requires spending collateral token from the user's wallet to supply to the pool.\\n     *      Will send the borrowed debt token to the user's wallet.\\n     * @param inputCollateralTokenAmount The amount of collateral token to deposit\\n     * @param minReceivedDebtTokenAmount The minimum amount of debt token to receive\\n     */\\n    function increaseLeverage(\\n        uint256 inputCollateralTokenAmount,\\n        uint256 minReceivedDebtTokenAmount\\n    ) public nonReentrant whenNotPaused {\\n        /**\\n         * Example of how this function works:\\n         *\\n         * Suppose that the target leverage is 3x, and the baseLTVAsCollateral is 70%\\n         * - The collateral token is WETH\\n         * - The debt here is dUSD\\n         * - Assume that the price of WETH is 2000 dUSD\\n         * - The current leverage is 1.25x\\n         *   - Total collateral: 100 WETH (100 * 2000 = 200,000 dUSD)\\n         *   - Total debt: 40,000 dUSD\\n         *   - Leverage: 200,000 / (200,000 - 40,000) = 1.25x\\n         *   - Assume that there is 0 collateral token in the vault\\n         *\\n         * 1. User call increaseLeverage with 50 WETH\\n         * 2. The vault transfers 50 WETH from the user's wallet to the vault\\n         * 3. The vault supplies 50 WETH to the lending pool\\n         * 4. The vault borrows 100,000 dUSD (50 * 2000) from the lending pool\\n         * 5. The vault sends 100,000 dUSD to the user\\n         *\\n         * The current leverage is now increased:\\n         *    - Total collateral: 150 WETH (150 * 2000 = 300,000 dUSD)\\n         *    - Total debt: 140,000 dUSD\\n         *    - Leverage: 300,000 / (300,000 - 140,000) = 1.875x\\n         */\\n\\n        // Make sure only increase the leverage if it is below the target leverage\\n        uint256 currentLeverageBpsBeforeIncreaseLeverage = getCurrentLeverageBps();\\n        if (currentLeverageBpsBeforeIncreaseLeverage >= targetLeverageBps) {\\n            revert LeverageExceedsTarget(currentLeverageBpsBeforeIncreaseLeverage, targetLeverageBps);\\n        }\\n\\n        // Get the amount of debt token to borrow to increase the leverage, given the input collateral token amount\\n        uint256 borrowedDebtTokenAmount = DLoopCoreLogic.getDebtBorrowTokenAmountToIncreaseLeverage(\\n            inputCollateralTokenAmount,\\n            getCurrentSubsidyBps(),\\n            ERC20(collateralToken).decimals(),\\n            getAssetPriceFromOracle(address(collateralToken)),\\n            ERC20(debtToken).decimals(),\\n            getAssetPriceFromOracle(address(debtToken))\\n        );\\n\\n        // Transfer the input collateral token from the caller to the vault\\n        collateralToken.safeTransferFrom(msg.sender, address(this), inputCollateralTokenAmount);\\n\\n        // Supply the collateral token to the lending pool\\n        uint256 actualSuppliedCollateralTokenAmount = _supplyToPool(\\n            address(collateralToken),\\n            inputCollateralTokenAmount,\\n            address(this)\\n        );\\n\\n        // At this step, the _borrowFromPool wrapper function will also assert that\\n        // the borrowed amount is exactly the amount requested, thus we can safely\\n        // have the slippage check before calling this function\\n        // Update the debt token amount borrowed to the actual amount\\n        uint256 actualBorrowedDebtTokenAmount = _borrowFromPool(\\n            address(debtToken),\\n            borrowedDebtTokenAmount,\\n            address(this)\\n        );\\n\\n        // Slippage protection, to make sure the user receives at least minReceivedDebtTokenAmount\\n        // At this step, we check against the actual amount borrowed from the pool\\n        if (actualBorrowedDebtTokenAmount < minReceivedDebtTokenAmount) {\\n            revert IncreaseLeverageReceiveLessThanMinAmount(actualBorrowedDebtTokenAmount, minReceivedDebtTokenAmount);\\n        }\\n\\n        // Make sure new current leverage is increased and not above the target leverage\\n        uint256 newCurrentLeverageBps = getCurrentLeverageBps();\\n        if (\\n            newCurrentLeverageBps > targetLeverageBps ||\\n            newCurrentLeverageBps <= currentLeverageBpsBeforeIncreaseLeverage\\n        ) {\\n            revert IncreaseLeverageOutOfRange(\\n                newCurrentLeverageBps,\\n                targetLeverageBps,\\n                currentLeverageBpsBeforeIncreaseLeverage\\n            );\\n        }\\n\\n        if (actualBorrowedDebtTokenAmount > 0) {\\n            // Transfer the debt token to the user\\n            debtToken.safeTransfer(msg.sender, actualBorrowedDebtTokenAmount);\\n        }\\n\\n        emit IncreaseLeverage(\\n            msg.sender,\\n            inputCollateralTokenAmount,\\n            minReceivedDebtTokenAmount,\\n            actualSuppliedCollateralTokenAmount, // Supplied collateral token amount\\n            actualBorrowedDebtTokenAmount // Borrowed debt token amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Decreases the leverage of the user by repaying debt and withdrawing collateral\\n     * @dev Requires spending debt token from the user's wallet to repay debt to the pool.\\n     *      Will send the withdrawn collateral asset to the user's wallet.\\n     * @param inputDebtTokenAmount The amount of debt token to repay\\n     * @param minReceivedCollateralTokenAmount The minimum amount of collateral asset to receive\\n     */\\n    function decreaseLeverage(\\n        uint256 inputDebtTokenAmount,\\n        uint256 minReceivedCollateralTokenAmount\\n    ) public nonReentrant whenNotPaused {\\n        /**\\n         * Example of how this function works:\\n         *\\n         * Suppose that the target leverage is 3x, and the baseLTVAsCollateral is 70%\\n         * - The collateral token is WETH\\n         * - The debt here is dUSD\\n         * - Assume that the price of WETH is 2000 dUSD\\n         * - The current leverage is 4x\\n         *   - Total collateral: 100 WETH (100 * 2000 = 200,000 dUSD)\\n         *   - Total debt: 150,000 dUSD\\n         *   - Leverage: 200,000 / (200,000 - 150,000) = 4x\\n         *\\n         * 1. User call decreaseLeverage with 20,000 dUSD\\n         * 2. The vault transfers 20,000 dUSD from the user's wallet to the vault\\n         * 3. The vault repays 20,000 dUSD to the lending pool\\n         * 4. The vault withdraws 10 WETH (20,000 / 2000) from the lending pool\\n         * 5. The vault sends 10 WETH to the user\\n         *\\n         * The current leverage is now decreased:\\n         *    - Total collateral: 90 WETH (90 * 2000 = 180,000 dUSD)\\n         *    - Total debt: 130,000 dUSD\\n         *    - Leverage: 180,000 / (180,000 - 130,000) = 3.6x\\n         */\\n\\n        // Make sure only decrease the leverage if it is above the target leverage\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n        if (currentLeverageBps <= targetLeverageBps) {\\n            revert LeverageBelowTarget(currentLeverageBps, targetLeverageBps);\\n        }\\n\\n        // Get the amount of collateral token to withdraw to decrease the leverage, given the input debt token amount\\n        uint256 withdrawnCollateralTokenAmount = DLoopCoreLogic.getCollateralWithdrawTokenAmountToDecreaseLeverage(\\n            inputDebtTokenAmount,\\n            getCurrentSubsidyBps(),\\n            ERC20(collateralToken).decimals(),\\n            getAssetPriceFromOracle(address(collateralToken)),\\n            ERC20(debtToken).decimals(),\\n            getAssetPriceFromOracle(address(debtToken))\\n        );\\n\\n        // Transfer the additional debt token from the caller to the vault\\n        debtToken.safeTransferFrom(msg.sender, address(this), inputDebtTokenAmount);\\n\\n        // Repay the debt token to the lending pool\\n        _repayDebtToPool(address(debtToken), inputDebtTokenAmount, address(this));\\n\\n        // At this step, the _withdrawFromPool wrapper function will also assert that\\n        // the withdrawn amount is exactly the amount requested, thus we can safely\\n        // have the slippage check before calling this function\\n        // Update the withdrawn collateral token amount to the actual amount\\n        uint256 actualWithdrawnCollateralTokenAmount = _withdrawFromPool(\\n            address(collateralToken),\\n            withdrawnCollateralTokenAmount,\\n            address(this)\\n        );\\n\\n        // Slippage protection, to make sure the user receives at least minReceivedAmount\\n        // At this step, we check against the actual amount withdrawn from the pool\\n        if (actualWithdrawnCollateralTokenAmount < minReceivedCollateralTokenAmount) {\\n            revert DecreaseLeverageReceiveLessThanMinAmount(\\n                actualWithdrawnCollateralTokenAmount,\\n                minReceivedCollateralTokenAmount\\n            );\\n        }\\n\\n        // Make sure new current leverage is decreased and not below the target leverage\\n        uint256 newCurrentLeverageBps = getCurrentLeverageBps();\\n        if (newCurrentLeverageBps < targetLeverageBps || newCurrentLeverageBps >= currentLeverageBps) {\\n            revert DecreaseLeverageOutOfRange(newCurrentLeverageBps, targetLeverageBps, currentLeverageBps);\\n        }\\n\\n        if (actualWithdrawnCollateralTokenAmount > 0) {\\n            // Transfer the collateral asset to the user\\n            collateralToken.safeTransfer(msg.sender, actualWithdrawnCollateralTokenAmount);\\n        }\\n\\n        emit DecreaseLeverage(\\n            msg.sender,\\n            inputDebtTokenAmount,\\n            minReceivedCollateralTokenAmount,\\n            inputDebtTokenAmount, // Repaid debt token amount\\n            actualWithdrawnCollateralTokenAmount // Withdrawn collateral token amount\\n        );\\n    }\\n\\n    /* Informational */\\n\\n    /**\\n     * @notice Gets the current leverage in basis points\\n     * @dev Calculates leverage based on total collateral and debt values\\n     * @return uint256 The current leverage in basis points\\n     */\\n    function getCurrentLeverageBps() public view returns (uint256) {\\n        (uint256 totalCollateralBase, uint256 totalDebtBase) = getTotalCollateralAndDebtOfUserInBase(address(this));\\n\\n        return DLoopCoreLogic.getCurrentLeverageBps(totalCollateralBase, totalDebtBase);\\n    }\\n\\n    /**\\n     * @notice Gets the current subsidy in basis points\\n     * @dev Calculates subsidy based on leverage deviation from target\\n     * @return uint256 The current subsidy in basis points\\n     */\\n    function getCurrentSubsidyBps() public view returns (uint256) {\\n        return\\n            DLoopCoreLogic.getCurrentSubsidyBps(\\n                getCurrentLeverageBps(),\\n                targetLeverageBps,\\n                maxSubsidyBps,\\n                minDeviationBps\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the address of the collateral token\\n     * @return address The address of the collateral token\\n     */\\n    function getCollateralTokenAddress() public view returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /**\\n     * @notice Gets the address of the debt token\\n     * @return address The address of the debt token\\n     */\\n    function getDebtTokenAddress() public view returns (address) {\\n        return address(debtToken);\\n    }\\n\\n    /**\\n     * @notice Gets the default maximum subsidy in basis points\\n     * @return uint256 The default maximum subsidy in basis points\\n     */\\n    function getDefaultMaxSubsidyBps() public view returns (uint256) {\\n        return maxSubsidyBps;\\n    }\\n\\n    /* Admin */\\n\\n    /**\\n     * @notice Sets the maximum subsidy in basis points\\n     * @dev Only callable by accounts with the admin role\\n     * @param _maxSubsidyBps New maximum subsidy in basis points\\n     */\\n    function setMaxSubsidyBps(uint256 _maxSubsidyBps) public onlyRole(DLOOP_ADMIN_ROLE) nonReentrant whenNotPaused {\\n        uint256 oldMaxSubsidyBps = maxSubsidyBps;\\n        maxSubsidyBps = _maxSubsidyBps;\\n        emit MaxSubsidyBpsSet(oldMaxSubsidyBps, _maxSubsidyBps);\\n    }\\n\\n    /**\\n     * @notice Sets the minimum deviation of leverage from the target leverage in basis points\\n     * @dev Only callable by accounts with the admin role\\n     * @param _minDeviationBps New minimum deviation of leverage from the target leverage in basis points\\n     */\\n    function setMinDeviationBps(uint256 _minDeviationBps) public onlyRole(DLOOP_ADMIN_ROLE) nonReentrant whenNotPaused {\\n        uint256 oldMinDeviationBps = minDeviationBps;\\n        minDeviationBps = _minDeviationBps;\\n        emit MinDeviationBpsSet(oldMinDeviationBps, _minDeviationBps);\\n    }\\n\\n    /**\\n     * @dev Sets the lower and upper bounds of target leverage\\n     * @param _lowerBoundTargetLeverageBps New lower bound of target leverage in basis points\\n     * @param _upperBoundTargetLeverageBps New upper bound of target leverage in basis points\\n     */\\n    function setLeverageBounds(\\n        uint32 _lowerBoundTargetLeverageBps,\\n        uint32 _upperBoundTargetLeverageBps\\n    ) public onlyRole(DLOOP_ADMIN_ROLE) nonReentrant whenNotPaused {\\n        if (_lowerBoundTargetLeverageBps >= targetLeverageBps || targetLeverageBps >= _upperBoundTargetLeverageBps) {\\n            revert InvalidLeverageBounds(_lowerBoundTargetLeverageBps, targetLeverageBps, _upperBoundTargetLeverageBps);\\n        }\\n\\n        lowerBoundTargetLeverageBps = _lowerBoundTargetLeverageBps;\\n        upperBoundTargetLeverageBps = _upperBoundTargetLeverageBps;\\n\\n        emit LeverageBoundsSet(_lowerBoundTargetLeverageBps, _upperBoundTargetLeverageBps);\\n    }\\n\\n    /**\\n     * @notice Pauses the contract\\n     * @dev Only callable by accounts with the pauser role\\n     */\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract\\n     * @dev Only callable by accounts with the pauser role\\n     */\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /* Overrides to add leverage check */\\n\\n    /**\\n     * @dev See {IERC4626-maxDeposit}.\\n     */\\n    function maxDeposit(address _user) public view override returns (uint256) {\\n        // Don't allow deposit if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        return super.maxDeposit(_user);\\n    }\\n\\n    /**\\n     * @dev See {IERC4626-maxMint}.\\n     */\\n    function maxMint(address _user) public view override returns (uint256) {\\n        // Don't allow mint if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        return super.maxMint(_user);\\n    }\\n\\n    /**\\n     * @dev See {IERC4626-maxWithdraw}.\\n     */\\n    function maxWithdraw(address _user) public view override returns (uint256) {\\n        // Don't allow withdraw if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        // Return the maximum NET assets after fee\\n        return DLoopCoreLogic.getNetAmountAfterFee(super.maxWithdraw(_user), withdrawalFeeBps);\\n    }\\n\\n    /**\\n     * @dev See {IERC4626-maxRedeem}.\\n     */\\n    function maxRedeem(address _user) public view override returns (uint256) {\\n        // Don't allow redeem if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        // Fee applies on assets, not on shares. Max redeemable shares remain unchanged.\\n        return super.maxRedeem(_user);\\n    }\\n\\n    /**\\n     * @dev See {IERC4626-previewWithdraw}.\\n     */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return super.previewWithdraw(DLoopCoreLogic.getGrossAmountRequiredForNet(assets, withdrawalFeeBps));\\n    }\\n\\n    /**\\n     * @dev See {IERC4626-previewRedeem}.\\n     */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return DLoopCoreLogic.getNetAmountAfterFee(super.previewRedeem(shares), withdrawalFeeBps);\\n    }\\n}\\n\",\"keccak256\":\"0x5c9b422f408e620237c3314ac83ef7422e66a0f88e97f9972a0da59a3925e17f\",\"license\":\"MIT\"},\"contracts/vaults/dloop/core/DLoopCoreLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { BasisPointConstants } from \\\"contracts/common/BasisPointConstants.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Compare } from \\\"contracts/common/Compare.sol\\\";\\nimport { WithdrawalFeeMath } from \\\"contracts/common/WithdrawalFeeMath.sol\\\";\\n\\n/**\\n * This library contains the stateless implementation of the DLoopCore logic\\n */\\nlibrary DLoopCoreLogic {\\n    /**\\n     * @dev Aggregated inputs for quoting rebalance amounts. Using a struct reduces stack pressure.\\n     */\\n    struct QuoteRebalanceParams {\\n        uint256 totalCollateralBase;\\n        uint256 totalDebtBase;\\n        uint256 currentLeverageBps;\\n        uint256 targetLeverageBps;\\n        uint256 subsidyBps;\\n        uint256 collateralTokenDecimals;\\n        uint256 collateralTokenPriceInBase;\\n        uint256 debtTokenDecimals;\\n        uint256 debtTokenPriceInBase;\\n    }\\n    error CollateralLessThanDebt(uint256 totalCollateralBase, uint256 totalDebtBase);\\n    error InvalidLeverage(uint256 leverageBps);\\n    error TotalCollateralBaseIsZero();\\n    error TotalCollateralBaseIsLessThanTotalDebtBase(uint256 totalCollateralBase, uint256 totalDebtBase);\\n    error InputCollateralTokenAmountIsZero();\\n    error InputDebtTokenAmountIsZero();\\n    error InvalidWithdrawalFeeBps(uint256 withdrawalFeeBps);\\n    error DenominatorIsZero(uint256 expectedTargetLeverageBps, uint256 totalCollateralBase, uint256 totalDebtBase);\\n    error FailedGettingCollateralTokenDepositAmount(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase\\n    );\\n    error FailedGettingDebtTokenRepayAmountNumerator(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase\\n    );\\n    error FailedGettingDebtTokenRepayAmountDenominator(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase\\n    );\\n\\n    /**\\n     * @dev Gets the current leverage in basis points\\n     * @param totalCollateralBase The total collateral in base currency\\n     * @param totalDebtBase The total debt in base currency\\n     * @return uint256 The current leverage in basis points\\n     */\\n    function getCurrentLeverageBps(uint256 totalCollateralBase, uint256 totalDebtBase) internal pure returns (uint256) {\\n        if (totalCollateralBase < totalDebtBase) {\\n            revert CollateralLessThanDebt(totalCollateralBase, totalDebtBase);\\n        }\\n        if (totalCollateralBase == 0) {\\n            return 0;\\n        }\\n        if (totalCollateralBase == totalDebtBase) {\\n            return type(uint256).max; // infinite leverage\\n        }\\n        // The leverage will be 1 if totalDebtBase is 0 (no more debt)\\n        // In this case, totalCollateralBase > totalDebtBase, thus the denominator is always positive\\n        uint256 leverageBps = ((totalCollateralBase * BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) /\\n            (totalCollateralBase - totalDebtBase));\\n        if (leverageBps < BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert InvalidLeverage(leverageBps);\\n        }\\n        return leverageBps;\\n    }\\n\\n    /**\\n     * @dev Gets the current subsidy in basis points\\n     * @param currentLeverageBps The current leverage in basis points\\n     * @param targetLeverageBps The target leverage in basis points\\n     * @param maxSubsidyBps The maximum subsidy in basis points\\n     * @param minDeviationBps The minimum deviation of leverage from the target leverage in basis points\\n     * @return uint256 The current subsidy in basis points\\n     */\\n    function getCurrentSubsidyBps(\\n        uint256 currentLeverageBps,\\n        uint256 targetLeverageBps,\\n        uint256 maxSubsidyBps,\\n        uint256 minDeviationBps\\n    ) internal pure returns (uint256) {\\n        uint256 subsidyBps;\\n        if (currentLeverageBps > targetLeverageBps) {\\n            uint256 deviationBps = currentLeverageBps - targetLeverageBps;\\n            if (deviationBps < minDeviationBps) {\\n                return 0;\\n            }\\n            subsidyBps = Math.mulDiv(deviationBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS, targetLeverageBps);\\n        } else {\\n            uint256 deviationBps = targetLeverageBps - currentLeverageBps;\\n            if (deviationBps < minDeviationBps) {\\n                return 0;\\n            }\\n            subsidyBps = Math.mulDiv(deviationBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS, targetLeverageBps);\\n        }\\n        if (subsidyBps > maxSubsidyBps) {\\n            return maxSubsidyBps;\\n        }\\n        return subsidyBps;\\n    }\\n\\n    /**\\n     * @dev Converts an amount in base currency to the actual amount in the token\\n     * @param amountInBase Amount in base currency\\n     * @param tokenDecimals The decimals of the token\\n     * @param tokenPriceInBase The price of the token in base currency\\n     * @return amountInToken Amount in the token\\n     */\\n    function convertFromBaseCurrencyToToken(\\n        uint256 amountInBase,\\n        uint256 tokenDecimals,\\n        uint256 tokenPriceInBase\\n    ) internal pure returns (uint256) {\\n        // The price decimals is cancelled out in the division (as the amount and price are in the same unit)\\n        return Math.mulDiv(amountInBase, 10 ** tokenDecimals, tokenPriceInBase);\\n    }\\n\\n    /**\\n     * @dev Converts an amount in the token to the actual amount in base currency\\n     * @param amountInToken Amount in the token\\n     * @param tokenDecimals The decimals of the token\\n     * @param tokenPriceInBase The price of the token in base currency\\n     * @return amountInBase Amount in base currency\\n     */\\n    function convertFromTokenAmountToBaseCurrency(\\n        uint256 amountInToken,\\n        uint256 tokenDecimals,\\n        uint256 tokenPriceInBase\\n    ) internal pure returns (uint256) {\\n        // The token decimals is cancelled out in the division (as the amount and price are in the same unit)\\n        return Math.mulDiv(amountInToken, tokenPriceInBase, 10 ** tokenDecimals);\\n    }\\n\\n    /**\\n     * @dev Returns whether the current leverage is too imbalanced\\n     * @param currentLeverageBps The current leverage in basis points\\n     * @param lowerBoundTargetLeverageBps The lower bound of the target leverage in basis points\\n     * @param upperBoundTargetLeverageBps The upper bound of the target leverage in basis points\\n     * @return bool True if leverage is too imbalanced, false otherwise\\n     */\\n    function isTooImbalanced(\\n        uint256 currentLeverageBps,\\n        uint256 lowerBoundTargetLeverageBps,\\n        uint256 upperBoundTargetLeverageBps\\n    ) internal pure returns (bool) {\\n        // If there is no deposit yet, we don't need to rebalance, thus it is not too imbalanced\\n        return\\n            currentLeverageBps != 0 &&\\n            (currentLeverageBps < lowerBoundTargetLeverageBps || currentLeverageBps > upperBoundTargetLeverageBps);\\n    }\\n\\n    /**\\n     * @dev Calculates the unleveraged amount of the assets with the current leverage\\n     * @param leveragedAssets Amount of leveraged assets\\n     * @param leverageBps The leverage in basis points\\n     * @return unleveragedAssets Amount of unleveraged assets\\n     */\\n    function getUnleveragedAssetsWithLeverage(\\n        uint256 leveragedAssets,\\n        uint256 leverageBps\\n    ) internal pure returns (uint256) {\\n        return Math.mulDiv(leveragedAssets, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS, leverageBps);\\n    }\\n\\n    /**\\n     * @dev Calculates the leveraged amount of the assets with the target leverage\\n     * @param assets Amount of assets\\n     * @param leverageBps The leverage in basis points\\n     * @return leveragedAssets Amount of leveraged assets\\n     */\\n    function getLeveragedAssetsWithLeverage(uint256 assets, uint256 leverageBps) internal pure returns (uint256) {\\n        return Math.mulDiv(assets, leverageBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS);\\n    }\\n\\n    /**\\n     * @dev Gets the repay amount that keeps the current leverage\\n     * @param targetWithdrawAmount The target withdraw amount\\n     * @param leverageBpsBeforeRepayDebt The leverage in basis points before repaying debt\\n     * @param collateralTokenDecimals The decimals of the collateral token\\n     * @param collateralTokenPriceInBase The price of the collateral token in base currency\\n     * @param debtTokenDecimals The decimals of the debt token\\n     * @param debtTokenPriceInBase The price of the debt token in base currency\\n     * @return repayAmount The repay amount that keeps the current leverage\\n     */\\n    function getRepayAmountThatKeepCurrentLeverage(\\n        uint256 targetWithdrawAmount,\\n        uint256 leverageBpsBeforeRepayDebt,\\n        uint256 collateralTokenDecimals,\\n        uint256 collateralTokenPriceInBase,\\n        uint256 debtTokenDecimals,\\n        uint256 debtTokenPriceInBase\\n    ) internal pure returns (uint256 repayAmount) {\\n        /* Formula definition:\\n         * - C1: totalCollateralBase before repay (in base currency)\\n         * - D1: totalDebtBase before repay (in base currency)\\n         * - C2: totalCollateralBase after repay (in base currency)\\n         * - D2: totalDebtBase after repay (in base currency)\\n         * - T: target leverage\\n         * - x: withdraw amount in base currency\\n         * - y: repay amount in base currency\\n         *\\n         * We have:\\n         *        C1 / (C1-D1) = C2 / (C2-D2)\\n         *        C2 = C1-x\\n         *        D2 = D1-y\\n         *        C1 / (C1-D1) = T <=> C1 = (C1-D1) * T <=> C1 = C1*T - D1*T <=> C1*T - C1 = D1*T <=> C1 = D1*T/(T-1)\\n         *\\n         * Formula expression:\\n         *        C1 / (C1-D1) = (C1-x) / (C1-x-D1+y)\\n         *    <=> C1 * (C1-x-D1+y) = (C1-x) * (C1-D1)\\n         *    <=> C1^2 - C1*x - C1*D1 + C1*y = C1^2 - C1*D1 - C1*x + D1*x\\n         *    <=> C1^2 - C1*x - C1*D1 + C1*y = C1^2 - C1*x - C1*D1 + D1*x\\n         *    <=> C1*y = x*D1\\n         *    <=> y = x*D1 / C1\\n         *    <=> y = x*D1 / [D1*T / (T-1)]\\n         *    <=> y = x * (T-1)/T\\n         *\\n         * Suppose that T' = T * ONE_HUNDRED_PERCENT_BPS, then:\\n         *\\n         *  => T = T' / ONE_HUNDRED_PERCENT_BPS\\n         * where T' is the target leverage in basis points unit\\n         *\\n         * We have:\\n         *      y = x * (T-1)/T\\n         *  <=> y = x * (T' / ONE_HUNDRED_PERCENT_BPS - 1) / (T' / ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> y = x * (T' - ONE_HUNDRED_PERCENT_BPS) / T'\\n         */\\n\\n        // Short-circuit when leverageBpsBeforeRepayDebt == 0\\n        if (leverageBpsBeforeRepayDebt == 0) {\\n            // no collateral means no debt yet, so nothing to repay\\n            return 0;\\n        }\\n\\n        // Convert the target withdraw amount to base\\n        uint256 targetWithdrawAmountInBase = convertFromTokenAmountToBaseCurrency(\\n            targetWithdrawAmount,\\n            collateralTokenDecimals,\\n            collateralTokenPriceInBase\\n        );\\n\\n        // Calculate the repay amount in base\\n        uint256 repayAmountInBase = Math.mulDiv(\\n            targetWithdrawAmountInBase,\\n            leverageBpsBeforeRepayDebt - BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\\n            leverageBpsBeforeRepayDebt\\n        );\\n\\n        return convertFromBaseCurrencyToToken(repayAmountInBase, debtTokenDecimals, debtTokenPriceInBase);\\n    }\\n\\n    /**\\n     * @dev Gets the borrow amount that keeps the current leverage\\n     * @param suppliedCollateralAmount The actual supplied amount of collateral asset\\n     * @param leverageBpsBeforeSupply Leverage in basis points before supplying\\n     * @param targetLeverageBps The target leverage in basis points\\n     * @param collateralTokenDecimals The decimals of the collateral token\\n     * @param collateralTokenPriceInBase The price of the collateral token in base currency\\n     * @param debtTokenDecimals The decimals of the debt token\\n     * @param debtTokenPriceInBase The price of the debt token in base currency\\n     * @return expectedBorrowAmount The expected borrow amount that keeps the current leverage\\n     */\\n    function getBorrowAmountThatKeepCurrentLeverage(\\n        uint256 suppliedCollateralAmount,\\n        uint256 leverageBpsBeforeSupply,\\n        uint256 targetLeverageBps,\\n        uint256 collateralTokenDecimals,\\n        uint256 collateralTokenPriceInBase,\\n        uint256 debtTokenDecimals,\\n        uint256 debtTokenPriceInBase\\n    ) internal pure returns (uint256 expectedBorrowAmount) {\\n        /* Formula definition:\\n         * - C1: totalCollateralBase before supply (in base currency)\\n         * - D1: totalDebtBase before supply (in base currency)\\n         * - C2: totalCollateralBase after supply (in base currency)\\n         * - D2: totalDebtBase after supply (in base currency)\\n         * - T: target leverage\\n         * - x: supply amount in base currency\\n         * - y: borrow amount in base currency\\n         *\\n         * We have:\\n         *      C1 / (C1-D1) = C2 / (C2-D2)\\n         *      C2 = C1+x\\n         *      D2 = D1+y\\n         *      C1 / (C1-D1) = T <=> C1 = (C1-D1) * T <=> C1 = C1*T - D1*T <=> C1*T - C1 = D1*T <=> C1 = D1*T/(T-1)\\n         *\\n         * Formula expression:\\n         *      C1 / (C1-D1) = (C1+x) / (C1+x-D1-y)\\n         *  <=> C1 * (C1+x-D1-y) = (C1+x) * (C1-D1)\\n         *  <=> C1^2 + C1*x - C1*D1 - C1*y = C1^2 - C1*D1 + C1*x - D1*x\\n         *  <=> C1*y = x*D1\\n         *  <=> y = x*D1 / C1\\n         *  <=> y = x * (T-1)/T\\n         *\\n         * Suppose that:\\n         *      T' = T * ONE_HUNDRED_PERCENT_BPS, then:\\n         *   => T = T' / ONE_HUNDRED_PERCENT_BPS\\n         * where:\\n         *      - T' is the target leverage in basis points unit\\n         *\\n         * This is the formula to calculate the borrow amount that keeps the current leverage:\\n         *      y = x * (T-1)/T\\n         *  <=> y = x * (T' / ONE_HUNDRED_PERCENT_BPS - 1) / (T' / ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> y = x * (T' - ONE_HUNDRED_PERCENT_BPS) / T'\\n         */\\n\\n        if (leverageBpsBeforeSupply == 0) {\\n            // This is the case when there is no deposit yet, so we use the target leverage\\n            leverageBpsBeforeSupply = targetLeverageBps;\\n        }\\n\\n        // Convert the actual supplied amount to base\\n        uint256 suppliedCollateralAmountInBase = convertFromTokenAmountToBaseCurrency(\\n            suppliedCollateralAmount,\\n            collateralTokenDecimals,\\n            collateralTokenPriceInBase\\n        );\\n\\n        // Calculate the borrow amount in base currency that keeps the current leverage\\n        uint256 borrowAmountInBase = Math.mulDiv(\\n            suppliedCollateralAmountInBase,\\n            leverageBpsBeforeSupply - BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\\n            leverageBpsBeforeSupply\\n        );\\n\\n        return convertFromBaseCurrencyToToken(borrowAmountInBase, debtTokenDecimals, debtTokenPriceInBase);\\n    }\\n\\n    /**\\n     * @dev Gets the collateral token amount to reach the target leverage\\n     *      - This method is only being called for increasing the leverage quote in quoteRebalanceAmountToReachTargetLeverage()\\n     *      - It will failed if the current leverage is above the target leverage (which requires the user to call decreaseLeverage)\\n     * @param expectedTargetLeverageBps The expected target leverage in basis points unit\\n     * @param totalCollateralBase The total collateral base\\n     * @param totalDebtBase The total debt base\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @return requiredCollateralDepositAmountInBase The collateral deposit amount in base currency\\n     */\\n    function getCollateralTokenDepositAmountToReachTargetLeverage(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 subsidyBps\\n    ) internal pure returns (uint256 requiredCollateralDepositAmountInBase) {\\n        /**\\n         * Find the amount of collateral to be deposited and the corresponding amount of debt token to be borrowed to rebalance\\n         *\\n         * The amount of debt token to be borrowed is a bit more than the deposited collateral to pay for the rebalancing subsidy\\n         * - Rebalancing caller will receive the debt token as the subsidy\\n         *\\n         * Formula definition:\\n         * - C: totalCollateralBase\\n         * - D: totalDebtBase\\n         * - T: target leverage\\n         * - k: subsidy (0.01 means 1%)\\n         * - x: change amount of collateral in base currency\\n         * - y: change amount of debt in base currency\\n         *\\n         * We have:\\n         *      y = x*(1+k)   (borrow a bit more debt than the deposited collateral to pay for the rebalancing subsidy)\\n         *\\n         * Because this is a deposit collateral and borrow debt process, the formula is:\\n         *      (C + x) / (C + x - D - y) = T\\n         *  <=> C + x = T * (C + x - D - y)\\n         *  <=> C + x = T * (C + x - D - x*(1+k))\\n         *  <=> C + x = T * (C + x - D - x - x*k)\\n         *  <=> C + x = T * (C - D - x*k)\\n         *  <=> C + x = T*C - T*D - T*x*k\\n         *  <=> x + T*x*k = T*C - T*D - C\\n         *  <=> x*(1 + T*k) = T*(C - D) - C\\n         *  <=> x = (T*(C - D) - C) / (1 + T*k)\\n         *\\n         * Suppose that:\\n         *      TT = T * ONE_HUNDRED_PERCENT_BPS\\n         *      kk = k * ONE_HUNDRED_PERCENT_BPS\\n         * then:\\n         *      T = TT / ONE_HUNDRED_PERCENT_BPS\\n         *      k = kk / ONE_HUNDRED_PERCENT_BPS\\n         * where:\\n         *      - TT is the target leverage in basis points unit\\n         *      - kk is the subsidy in basis points unit\\n         *\\n         * We have:\\n         *      x = (T*(C - D) - C) / (1 + T*k)\\n         *  <=> x = (TT*(C - D)/ONE_HUNDRED_PERCENT_BPS - C) / (1 + TT*kk/ONE_HUNDRED_PERCENT_BPS^2)\\n         *  <=> x = (TT*(C - D) - C*ONE_HUNDRED_PERCENT_BPS) / (ONE_HUNDRED_PERCENT_BPS + TT*kk/ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> x = (TT*(C - D) - C*ONE_HUNDRED_PERCENT_BPS) / denominator\\n         * where:\\n         *      denominator = ONE_HUNDRED_PERCENT_BPS + TT*kk/ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * If x < 0, the transaction will be reverted due to the underflow/overflow\\n         *\\n         * If x = 0, it means the user should not rebalance, so the direction is 0\\n         *\\n         * Finally, we have y = (1+k)*x:\\n         *   => y = (1+k) * x\\n         *  <=> y = (1 + kk/ONE_HUNDRED_PERCENT_BPS) * x\\n         *  <=> y = (ONE_HUNDRED_PERCENT_BPS + kk) * x / ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * The value of y here is for reference (the expected amount of debt to borrow)\\n         */\\n        if (totalCollateralBase == 0) {\\n            revert TotalCollateralBaseIsZero();\\n        }\\n        if (totalCollateralBase < totalDebtBase) {\\n            revert TotalCollateralBaseIsLessThanTotalDebtBase(totalCollateralBase, totalDebtBase);\\n        }\\n\\n        // Now, totalCollateralBase is guaranteed to be greater than totalDebtBase\\n        // Use trySub to avoid overflow/underflow\\n        (bool success, uint256 numerator) = Math.trySub(\\n            expectedTargetLeverageBps * (totalCollateralBase - totalDebtBase),\\n            totalCollateralBase * BasisPointConstants.ONE_HUNDRED_PERCENT_BPS\\n        );\\n        if (!success) {\\n            revert FailedGettingCollateralTokenDepositAmount(\\n                expectedTargetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase\\n            );\\n        }\\n\\n        uint256 denominator = BasisPointConstants.ONE_HUNDRED_PERCENT_BPS +\\n            Math.mulDiv(expectedTargetLeverageBps, subsidyBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS);\\n\\n        // Use ceilDiv as we want to round up required collateral deposit amount in base currency\\n        // to avoid getting the new leverage above the target leverage, which will revert the\\n        // rebalance process (due to post-process assertion)\\n        // The logic is to deposit a bit more collateral, and borrow a bit more debt (due to rounding),\\n        // which will guarantee the new leverage cannot be more than the target leverage, avoid\\n        // unexpected post-process assertion revert.\\n        // This denominator cannot be zero because it is equal to: 100% + x\\n        // where is x is uint256, thus is always >= 100%, thus is always positive\\n        requiredCollateralDepositAmountInBase = Math.ceilDiv(numerator, denominator);\\n\\n        return requiredCollateralDepositAmountInBase;\\n    }\\n\\n    /**\\n     * @dev Gets the debt amount in base currency to be borrowed to increase the leverage\\n     * @param inputCollateralDepositAmountInBase The collateral deposit amount in base currency\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @return outputDebtBorrowAmountInBase The debt amount in base currency to be borrowed\\n     */\\n    function getDebtBorrowAmountInBaseToIncreaseLeverage(\\n        uint256 inputCollateralDepositAmountInBase,\\n        uint256 subsidyBps\\n    ) internal pure returns (uint256 outputDebtBorrowAmountInBase) {\\n        /**\\n         * The formula is:\\n         *      y = (1+k) * x\\n         *  <=> y = (1 + kk/ONE_HUNDRED_PERCENT_BPS) * x\\n         *  <=> y = (ONE_HUNDRED_PERCENT_BPS + kk) * x / ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * where:\\n         *      - y is the debt amount in base currency to be borrowed\\n         *      - x is the collateral amount in base currency to be deposited\\n         *      - kk is the subsidy in basis points unit\\n         */\\n\\n        // Use rounding down with mulDiv with Rounding.Floor as we want to borrow a bit less, to avoid\\n        // getting the new leverage above the target leverage, which will revert the\\n        // rebalance process (due to post-process assertion)\\n        // Borrow a bit less debt (rounding), given the same deposit amount of collateral token\\n        // means the new leverage should be lower than the actual leverage (with decimal without rounding)\\n        // As we calculate the estimated final leverage is reaching the target leverage,\\n        // if we round up, the new leverage can be more than the target leverage (given\\n        // the same deposit amount of collateral token), which will revert the rebalance process (due to post-process assertion)\\n        return\\n            Math.mulDiv(\\n                inputCollateralDepositAmountInBase,\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS + subsidyBps,\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\\n                Math.Rounding.Floor\\n            );\\n    }\\n\\n    /**\\n     * @dev Gets the debt token amount to be borrowed to increase the leverage, given the input collateral token amount\\n     * @param inputCollateralDepositTokenAmount The collateral deposit amount in token unit\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @param collateralTokenDecimals The collateral token decimals\\n     * @param collateralTokenPriceInBase The collateral token price in base currency\\n     * @param debtTokenDecimals The debt token decimals\\n     * @param debtTokenPriceInBase The debt token price in base currency\\n     * @return outputDebtBorrowTokenAmount The debt token amount to be borrowed in token unit\\n     */\\n    function getDebtBorrowTokenAmountToIncreaseLeverage(\\n        uint256 inputCollateralDepositTokenAmount,\\n        uint256 subsidyBps,\\n        uint256 collateralTokenDecimals,\\n        uint256 collateralTokenPriceInBase,\\n        uint256 debtTokenDecimals,\\n        uint256 debtTokenPriceInBase\\n    ) internal pure returns (uint256 outputDebtBorrowTokenAmount) {\\n        // Make sure the input collateral token amount is not zero\\n        if (inputCollateralDepositTokenAmount == 0) {\\n            revert InputCollateralTokenAmountIsZero();\\n        }\\n\\n        // Calculate everything before transferring, supplying and borrowing to avoid\\n        // any potential impact from the child contract implementation\\n\\n        // Calculate the amount of collateral token in base currency to deposit\\n        uint256 inputCollateralDepositAmountInBase = convertFromTokenAmountToBaseCurrency(\\n            inputCollateralDepositTokenAmount,\\n            collateralTokenDecimals,\\n            collateralTokenPriceInBase\\n        );\\n\\n        // The amount of debt token to borrow is equal to the amount of collateral token deposited\\n        // plus the subsidy (bonus for the caller)\\n        uint256 borrowedDebtTokenInBase = getDebtBorrowAmountInBaseToIncreaseLeverage(\\n            inputCollateralDepositAmountInBase,\\n            subsidyBps\\n        );\\n\\n        // Convert the amount of debt token in base currency to token unit\\n        outputDebtBorrowTokenAmount = convertFromBaseCurrencyToToken(\\n            borrowedDebtTokenInBase,\\n            debtTokenDecimals,\\n            debtTokenPriceInBase\\n        );\\n\\n        return outputDebtBorrowTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Gets the debt amount in base currency to reach the target leverage\\n     *      - This method is only being called for decreasing the leverage quote in quoteRebalanceAmountToReachTargetLeverage()\\n     *      - It will failed if the current leverage is below the target leverage (which requires the user to call increaseLeverage)\\n     * @param expectedTargetLeverageBps The expected target leverage in basis points unit\\n     * @param totalCollateralBase The total collateral base\\n     * @param totalDebtBase The total debt base\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @return requiredDebtRepayAmountInBase The debt amount in base currency to be repaid\\n     */\\n    function getDebtRepayAmountInBaseToReachTargetLeverage(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 subsidyBps\\n    ) internal pure returns (uint256 requiredDebtRepayAmountInBase) {\\n        /**\\n         * Find the amount of debt to be repaid and the corresponding amount of collateral to be withdraw to rebalance\\n         *\\n         * The amount of collateral to be withdraw to rebalance which is a bit more than the repay amount of debt token\\n         * to pay for the rebalancing subsidy\\n         * - Rebalancing caller will receive the collateral token as the subsidy\\n         *\\n         * Formula definition:\\n         * - C: totalCollateralBase\\n         * - D: totalDebtBase\\n         * - T: target leverage\\n         * - k: subsidy (0.01 means 1%)\\n         * - x: change amount of collateral in base currency\\n         * - y: change amount of debt in base currency\\n         *\\n         * We have:\\n         *      x = y*(1+k)   (withdraw a bit more collateral than the debt to pay for the rebalancing subsidy)\\n         *\\n         * Because this is a repay debt and withdraw collateral process, the formula is:\\n         *      (C - x) / (C - x - D + y) = T\\n         *  <=> C - y*(1+k) = T * (C - y*(1+k) - D + y)\\n         *  <=> C - y*(1+k) = T * (C - y - y*k - D + y)\\n         *  <=> C - y*(1+k) = T * (C - D - y*k)\\n         *  <=> y*(1+k) = C - T * (C - D - y*k)\\n         *  <=> y*(1+k) = C - T*C + T*D + T*y*k\\n         *  <=> y*(1+k) - T*y*k = C - T*C + T*D\\n         *  <=> y*(1 + k - T*k) = C - T*C + T*D\\n         *  <=> y = (C - T*C + T*D) / (1 + k - T*k)\\n         *\\n         * Suppose that:\\n         *      TT = T * ONE_HUNDRED_PERCENT_BPS\\n         *      kk = k * ONE_HUNDRED_PERCENT_BPS\\n         * then:\\n         *      T = TT / ONE_HUNDRED_PERCENT_BPS\\n         *      k = kk / ONE_HUNDRED_PERCENT_BPS\\n         * where:\\n         *      - TT is the target leverage in basis points unit\\n         *      - kk is the subsidy in basis points unit\\n         *\\n         * We have:\\n         *      y = (C - T*C + T*D) / (1 + k - T*k)\\n         *  <=> y = (C - TT*C/ONE_HUNDRED_PERCENT_BPS + TT*D/ONE_HUNDRED_PERCENT_BPS) / (1 + kk/ONE_HUNDRED_PERCENT_BPS - TT*kk/ONE_HUNDRED_PERCENT_BPS^2)\\n         *  <=> y = (C*ONE_HUNDRED_PERCENT_BPS - TT*C + TT*D) / (ONE_HUNDRED_PERCENT_BPS + kk - TT*kk/ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> y = (C*ONE_HUNDRED_PERCENT_BPS - TT*C + TT*D) / denominator\\n         *  <=> y = (C*ONE_HUNDRED_PERCENT_BPS - TT*(C - D)) / denominator\\n         * where:\\n         *      denominator = ONE_HUNDRED_PERCENT_BPS + kk - TT*kk/ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * If y < 0, the transaction will be reverted due to the underflow/overflow\\n         *\\n         * If y = 0, it means the user should not rebalance, so the direction is 0\\n         *\\n         * Finally, we have x = (1+k)*y:\\n         *   => x = (1+k) * y\\n         *  <=> x = (1 + kk/ONE_HUNDRED_PERCENT_BPS) * y\\n         *  <=> x = (ONE_HUNDRED_PERCENT_BPS + kk) * y / ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * The value of x here is for reference (the expected amount of collateral to withdraw)\\n         */\\n        if (totalCollateralBase == 0) {\\n            revert TotalCollateralBaseIsZero();\\n        }\\n        if (totalCollateralBase < totalDebtBase) {\\n            revert TotalCollateralBaseIsLessThanTotalDebtBase(totalCollateralBase, totalDebtBase);\\n        }\\n\\n        // Now, totalCollateralBase is greater than totalDebtBase, thus: totalCollateralBase - totalDebtBase > 0\\n        // Use trySub to avoid overflow/underflow\\n        (bool successNumerator, uint256 numerator) = Math.trySub(\\n            totalCollateralBase * BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\\n            expectedTargetLeverageBps * (totalCollateralBase - totalDebtBase)\\n        );\\n        if (!successNumerator) {\\n            revert FailedGettingDebtTokenRepayAmountNumerator(\\n                expectedTargetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase\\n            );\\n        }\\n\\n        (bool successDenominator, uint256 denominator) = Math.trySub(\\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS + subsidyBps,\\n            Math.mulDiv(expectedTargetLeverageBps, subsidyBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS)\\n        );\\n        if (!successDenominator) {\\n            revert FailedGettingDebtTokenRepayAmountDenominator(\\n                expectedTargetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase\\n            );\\n        }\\n\\n        if (denominator == 0) {\\n            revert DenominatorIsZero(expectedTargetLeverageBps, totalCollateralBase, totalDebtBase);\\n        }\\n\\n        // Do not use ceilDiv as we want to round down required debt repay amount in base currency\\n        // to avoid getting the new leverage below the target leverage, which will revert the\\n        // rebalance process (due to post-process assertion)\\n        // The logic is to repay a bit less, and withdraw a bit more collateral (due to rounding),\\n        // which will guarantee the new leverage cannot be less than the target leverage, avoid\\n        // unexpected post-process assertion revert.\\n        requiredDebtRepayAmountInBase = numerator / denominator;\\n\\n        return requiredDebtRepayAmountInBase;\\n    }\\n\\n    /**\\n     * @dev Gets the collateral token amount to be withdraw to repay the debt token\\n     * @param inputDebtRepayAmountInBase The debt amount in base currency to be repaid\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @return outputCollateralTokenAmount The collateral token amount to be withdraw\\n     */\\n    function getCollateralWithdrawAmountInBaseToDecreaseLeverage(\\n        uint256 inputDebtRepayAmountInBase,\\n        uint256 subsidyBps\\n    ) internal pure returns (uint256 outputCollateralTokenAmount) {\\n        /**\\n         * The formula is:\\n         *      x = (1+k) * y\\n         *  <=> x = (1 + kk/ONE_HUNDRED_PERCENT_BPS) * y\\n         *  <=> x = (ONE_HUNDRED_PERCENT_BPS + kk) * y / ONE_HUNDRED_PERCENT_BPS\\n         *\\n         * where:\\n         *      - x is the collateral amount in base currency to be withdraw\\n         *      - y is the debt amount in base currency to be repaid\\n         *      - kk is the subsidy in basis points unit\\n         */\\n\\n        // Use rounding up with mulDiv with Rounding.Ceil as we want to withdraw a bit more, to avoid\\n        // getting the new leverage below the target leverage, which will revert the\\n        // rebalance process (due to post-process assertion)\\n        // Withdraw a bit more collateral (rounding), given the same repay amount of debt token\\n        // means the new leverage should be higher than the actual leverage (with decimal without rounding)\\n        // As we calculate the estimated final leverage is reaching the target leverage,\\n        // if we round down, the new leverage can be less than the target leverage (given\\n        // the same repay amount of debt token), which will revert the rebalance process (due to post-process assertion)\\n        return\\n            Math.mulDiv(\\n                inputDebtRepayAmountInBase,\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS + subsidyBps,\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\\n                Math.Rounding.Ceil\\n            );\\n    }\\n\\n    /**\\n     * @dev Gets the collateral token amount to be withdraw to repay the debt token\\n     * @param inputDebtRepayTokenAmount The debt amount in token unit to be repaid\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @param collateralTokenDecimals The collateral token decimals\\n     * @param collateralTokenPriceInBase The collateral token price in base currency\\n     * @param debtTokenDecimals The debt token decimals\\n     * @param debtTokenPriceInBase The debt token price in base currency\\n     * @return outputCollateralWithdrawTokenAmount The collateral token amount to be withdraw in token unit\\n     */\\n    function getCollateralWithdrawTokenAmountToDecreaseLeverage(\\n        uint256 inputDebtRepayTokenAmount,\\n        uint256 subsidyBps,\\n        uint256 collateralTokenDecimals,\\n        uint256 collateralTokenPriceInBase,\\n        uint256 debtTokenDecimals,\\n        uint256 debtTokenPriceInBase\\n    ) internal pure returns (uint256 outputCollateralWithdrawTokenAmount) {\\n        // Make sure the input debt token amount is not zero\\n        if (inputDebtRepayTokenAmount == 0) {\\n            revert InputDebtTokenAmountIsZero();\\n        }\\n\\n        // Calculate everything before transferring, repaying and withdrawing to avoid\\n        // any potential impact from the child contract implementation\\n\\n        // Calculate the amount of debt token in base currency to repay\\n        uint256 inputDebtRepayAmountInBase = convertFromTokenAmountToBaseCurrency(\\n            inputDebtRepayTokenAmount,\\n            debtTokenDecimals,\\n            debtTokenPriceInBase\\n        );\\n\\n        // The amount of collateral asset to withdraw is equal to the amount of debt token repaid\\n        // plus the subsidy (bonus for the caller)\\n        uint256 withdrawCollateralTokenInBase = getCollateralWithdrawAmountInBaseToDecreaseLeverage(\\n            inputDebtRepayAmountInBase,\\n            subsidyBps\\n        );\\n\\n        // Convert the amount of collateral token in base currency to token unit\\n        outputCollateralWithdrawTokenAmount = convertFromBaseCurrencyToToken(\\n            withdrawCollateralTokenInBase,\\n            collateralTokenDecimals,\\n            collateralTokenPriceInBase\\n        );\\n\\n        return outputCollateralWithdrawTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Quotes the rebalance amount to reach the target leverage in token unit\\n     * @param totalCollateralBase The total collateral base\\n     * @param totalDebtBase The total debt base\\n     * @param currentLeverageBps The current leverage in basis points unit\\n     * @param targetLeverageBps The target leverage in basis points unit\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @param collateralTokenDecimals The collateral token decimals\\n     * @param collateralTokenPriceInBase The collateral token price in base currency\\n     * @param debtTokenDecimals The debt token decimals\\n     * @param debtTokenPriceInBase The debt token price in base currency\\n     * @return inputTokenAmount The amount of token to call increaseLeverage or decreaseLeverage (in token unit)\\n     * @return estimatedOutputTokenAmount The estimated output token amount after the rebalance (in token unit)\\n     * @return direction The direction of the rebalance (1 for increase, -1 for decrease, 0 means no rebalance)\\n     */\\n    function quoteRebalanceAmountToReachTargetLeverage(\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 currentLeverageBps,\\n        uint256 targetLeverageBps,\\n        uint256 subsidyBps,\\n        uint256 collateralTokenDecimals,\\n        uint256 collateralTokenPriceInBase,\\n        uint256 debtTokenDecimals,\\n        uint256 debtTokenPriceInBase\\n    ) public pure returns (uint256 inputTokenAmount, uint256 estimatedOutputTokenAmount, int8 direction) {\\n        if (totalCollateralBase == 0) {\\n            // No collateral means no debt and no leverage, so no rebalance is needed\\n            return (0, 0, 0);\\n        }\\n\\n        // If the current leverage is below the target leverage, the user should increase the leverage\\n        if (currentLeverageBps < targetLeverageBps) {\\n            // In this case, the input amount is the collateral amount to be deposit\\n            // and the output amount is the debt amount to be borrow\\n            uint256 inputCollateralAmountInBase = getCollateralTokenDepositAmountToReachTargetLeverage(\\n                targetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase,\\n                subsidyBps\\n            );\\n            inputTokenAmount = convertFromBaseCurrencyToToken(\\n                inputCollateralAmountInBase,\\n                collateralTokenDecimals,\\n                collateralTokenPriceInBase\\n            );\\n            uint256 estimatedDebtAmountInBase = getDebtBorrowAmountInBaseToIncreaseLeverage(\\n                inputCollateralAmountInBase,\\n                subsidyBps\\n            );\\n            estimatedOutputTokenAmount = convertFromBaseCurrencyToToken(\\n                estimatedDebtAmountInBase,\\n                debtTokenDecimals,\\n                debtTokenPriceInBase\\n            );\\n            direction = 1;\\n            return (inputTokenAmount, estimatedOutputTokenAmount, direction);\\n        }\\n        // If the current leverage is above the target leverage, the user should decrease the leverage\\n        else if (currentLeverageBps > targetLeverageBps) {\\n            // In this case, the input amount is the debt amount to be repaid\\n            // and the output amount is the collateral amount to be withdraw\\n            uint256 inputDebtAmountInBase = getDebtRepayAmountInBaseToReachTargetLeverage(\\n                targetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase,\\n                subsidyBps\\n            );\\n            inputTokenAmount = convertFromBaseCurrencyToToken(\\n                inputDebtAmountInBase,\\n                debtTokenDecimals,\\n                debtTokenPriceInBase\\n            );\\n            uint256 estimatedCollateralAmountInBase = getCollateralWithdrawAmountInBaseToDecreaseLeverage(\\n                inputDebtAmountInBase,\\n                subsidyBps\\n            );\\n            estimatedOutputTokenAmount = convertFromBaseCurrencyToToken(\\n                estimatedCollateralAmountInBase,\\n                collateralTokenDecimals,\\n                collateralTokenPriceInBase\\n            );\\n            direction = -1;\\n            return (inputTokenAmount, estimatedOutputTokenAmount, direction);\\n        }\\n\\n        // If the current leverage is equal to the target leverage, the user should not rebalance\\n        return (0, 0, 0);\\n    }\\n\\n    /**\\n     * @dev Gets the gross amount required for a given net amount\\n     * @param netAmount The net amount\\n     * @param withdrawalFeeBps The withdrawal fee in basis points\\n     * @return grossAmount The gross amount\\n     */\\n    function getGrossAmountRequiredForNet(\\n        uint256 netAmount,\\n        uint256 withdrawalFeeBps\\n    ) internal pure returns (uint256 grossAmount) {\\n        if (withdrawalFeeBps >= BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert InvalidWithdrawalFeeBps(withdrawalFeeBps);\\n        }\\n        return WithdrawalFeeMath.grossFromNet(netAmount, withdrawalFeeBps);\\n    }\\n\\n    /**\\n     * @dev Gets the net amount after fee for a given gross amount\\n     * @param grossAmount The gross amount\\n     * @param withdrawalFeeBps The withdrawal fee in basis points\\n     * @return netAmount The net amount\\n     */\\n    function getNetAmountAfterFee(\\n        uint256 grossAmount,\\n        uint256 withdrawalFeeBps\\n    ) internal pure returns (uint256 netAmount) {\\n        if (withdrawalFeeBps > BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert InvalidWithdrawalFeeBps(withdrawalFeeBps);\\n        }\\n        return WithdrawalFeeMath.netAfterFee(grossAmount, withdrawalFeeBps);\\n    }\\n\\n    /**\\n     * @dev Struct-based overload that forwards to the parameterized implementation. Using a struct reduces stack usage.\\n     */\\n    function quoteRebalanceAmountToReachTargetLeverage(\\n        QuoteRebalanceParams memory p\\n    ) public pure returns (uint256 inputTokenAmount, uint256 estimatedOutputTokenAmount, int8 direction) {\\n        return\\n            quoteRebalanceAmountToReachTargetLeverage(\\n                p.totalCollateralBase,\\n                p.totalDebtBase,\\n                p.currentLeverageBps,\\n                p.targetLeverageBps,\\n                p.subsidyBps,\\n                p.collateralTokenDecimals,\\n                p.collateralTokenPriceInBase,\\n                p.debtTokenDecimals,\\n                p.debtTokenPriceInBase\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe98ea26b013268162b80ea30013ce70aef686b6edf3a14d5ac68c377592591ba\",\"license\":\"MIT\"},\"contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { IPriceOracleGetter } from \\\"./interface/IPriceOracleGetter.sol\\\";\\nimport { IPool as ILendingPool, DataTypes } from \\\"./interface/IPool.sol\\\";\\nimport { IPoolAddressesProvider } from \\\"./interface/IPoolAddressesProvider.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { DLoopCoreBase } from \\\"../../DLoopCoreBase.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { RewardClaimable } from \\\"contracts/vaults/rewards_claimable/RewardClaimable.sol\\\";\\nimport { IRewardsController } from \\\"./interface/IRewardsController.sol\\\";\\nimport { BasisPointConstants } from \\\"contracts/common/BasisPointConstants.sol\\\";\\nimport { RescuableVault } from \\\"contracts/vaults/dloop/shared/RescuableVault.sol\\\";\\n\\n/**\\n * @title DLoopCoreDLend\\n * @dev Read the documentation of DLoopCoreBase for more details\\n *      - This contract implement dLEND-specific lending operations for DLoopCoreBase\\n */\\ncontract DLoopCoreDLend is DLoopCoreBase, RewardClaimable, RescuableVault {\\n    using SafeERC20 for ERC20;\\n\\n    /* Constants */\\n\\n    uint8 public constant AAVE_PRICE_ORACLE_DECIMALS = 8;\\n\\n    // Note that there is a vulnerability in stable interest rate mode, so we will never use it\\n    // See contracts/lending/core/protocol/libraries/types/DataTypes.sol\\n    uint256 public constant VARIABLE_LENDING_INTERST_RATE_MODE = 2; // 0 = NONE, 1 = STABLE, 2 = VARIABLE\\n\\n    /* State */\\n\\n    struct CoreState {\\n        IPoolAddressesProvider lendingPoolAddressesProvider;\\n        address dLendAssetToClaimFor;\\n        address targetStaticATokenWrapper;\\n        IRewardsController dLendRewardsController;\\n    }\\n    CoreState public coreState;\\n\\n    /* Errors */\\n\\n    error ZeroAddress();\\n    error InvalidRewardsController();\\n    error FeeTooHigh(uint256 feeBps, uint256 maxFeeBps);\\n\\n    /* Events */\\n    event DLendRewardsControllerUpdated(address indexed oldController, address indexed newController);\\n    event FeeBpsSet(uint256 oldFeeBps, uint256 newFeeBps);\\n\\n    /**\\n     * @dev Aggregated constructor params to reduce stack usage\\n     */\\n    struct InitParams {\\n        string name;\\n        string symbol;\\n        ERC20 collateralToken;\\n        ERC20 debtToken;\\n        IPoolAddressesProvider lendingPoolAddressesProvider;\\n        uint32 targetLeverageBps;\\n        uint32 lowerBoundTargetLeverageBps;\\n        uint32 upperBoundTargetLeverageBps;\\n        uint256 maxSubsidyBps;\\n        uint256 minDeviationBps;\\n        uint256 withdrawalFeeBps;\\n        IRewardsController rewardsController;\\n        address dLendAssetToClaimFor;\\n        address targetStaticATokenWrapper;\\n        address treasury;\\n        uint256 maxTreasuryFeeBps;\\n        uint256 initialTreasuryFeeBps;\\n        uint256 initialExchangeThreshold;\\n    }\\n\\n    /**\\n     * @dev Constructor for the DLoopCoreDLend contract using struct to avoid stack-too-deep\\n     */\\n    constructor(\\n        InitParams memory p\\n    )\\n        DLoopCoreBase(\\n            p.name,\\n            p.symbol,\\n            p.collateralToken,\\n            p.debtToken,\\n            p.targetLeverageBps,\\n            p.lowerBoundTargetLeverageBps,\\n            p.upperBoundTargetLeverageBps,\\n            p.maxSubsidyBps,\\n            p.minDeviationBps,\\n            p.withdrawalFeeBps\\n        )\\n        RewardClaimable(\\n            address(this), // Use the vault shares as the exchange asset\\n            p.treasury,\\n            p.maxTreasuryFeeBps,\\n            p.initialTreasuryFeeBps,\\n            p.initialExchangeThreshold\\n        )\\n    {\\n        // Always use the vault shares as the exchange asset in reward claim logic\\n        coreState.lendingPoolAddressesProvider = p.lendingPoolAddressesProvider;\\n        coreState.dLendAssetToClaimFor = p.dLendAssetToClaimFor;\\n        coreState.targetStaticATokenWrapper = p.targetStaticATokenWrapper;\\n        coreState.dLendRewardsController = p.rewardsController;\\n\\n        if (getLendingOracle().BASE_CURRENCY() != address(0)) {\\n            revert(\\\"Invalid price oracle base currency\\\");\\n        }\\n        if (getLendingOracle().BASE_CURRENCY_UNIT() != 10 ** AAVE_PRICE_ORACLE_DECIMALS) {\\n            revert(\\\"Invalid price oracle unit\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the address of the dLEND RewardsController contract.\\n     * @dev Only callable by accounts with the dLoop admin role.\\n     * @param _newDLendRewardsController The address of the new rewards controller.\\n     */\\n    function setDLendRewardsController(address _newDLendRewardsController) external onlyRole(DLOOP_ADMIN_ROLE) {\\n        if (_newDLendRewardsController == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        // Make sure the new rewards controller is a valid contract\\n        if (_newDLendRewardsController.code.length == 0) {\\n            revert InvalidRewardsController();\\n        }\\n        address oldController = address(coreState.dLendRewardsController);\\n        coreState.dLendRewardsController = IRewardsController(_newDLendRewardsController);\\n        emit DLendRewardsControllerUpdated(oldController, _newDLendRewardsController);\\n    }\\n\\n    /**\\n     * @dev Do not rescue the aToken, variable debt token and stable debt token of the collateral token\\n     *      - Implement this method from RescuableVault\\n     * @param token Address of the token to check\\n     * @return bool True if the token is a restricted rescue token, false otherwise\\n     */\\n    function isRescuableToken(address token) public view override returns (bool) {\\n        DataTypes.ReserveData memory reserveData = _getReserveData(address(collateralToken));\\n        return\\n            token == reserveData.aTokenAddress ||\\n            token == reserveData.variableDebtTokenAddress ||\\n            token == reserveData.stableDebtTokenAddress;\\n    }\\n\\n    /**\\n     * @dev Gets the asset price from the oracle\\n     * @param asset Address of the asset\\n     * @return uint256 Price of the asset\\n     */\\n    function _getAssetPriceFromOracleImplementation(address asset) internal view override returns (uint256) {\\n        return getLendingOracle().getAssetPrice(asset);\\n    }\\n\\n    /**\\n     * @dev Supply tokens to the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to supply\\n     * @param onBehalfOf Address to supply on behalf of\\n     */\\n    function _supplyToPoolImplementation(address token, uint256 amount, address onBehalfOf) internal override {\\n        ILendingPool lendingPool = getLendingPool();\\n\\n        // Approve the lending pool to spend the token\\n        ERC20(token).forceApprove(address(lendingPool), amount);\\n\\n        // Supply the token to the lending pool\\n        lendingPool.supply(token, amount, onBehalfOf, 0);\\n    }\\n\\n    /**\\n     * @dev Borrow tokens from the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to borrow\\n     * @param onBehalfOf Address to borrow on behalf of\\n     */\\n    function _borrowFromPoolImplementation(address token, uint256 amount, address onBehalfOf) internal override {\\n        getLendingPool().borrow(token, amount, VARIABLE_LENDING_INTERST_RATE_MODE, 0, onBehalfOf);\\n    }\\n\\n    /**\\n     * @dev Repay debt to the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to repay\\n     * @param onBehalfOf Address to repay on behalf of\\n     */\\n    function _repayDebtToPoolImplementation(address token, uint256 amount, address onBehalfOf) internal override {\\n        ILendingPool lendingPool = getLendingPool();\\n\\n        // Approve the lending pool to spend the token\\n        ERC20(token).forceApprove(address(lendingPool), amount);\\n\\n        // Repay the debt\\n        lendingPool.repay(token, amount, VARIABLE_LENDING_INTERST_RATE_MODE, onBehalfOf);\\n    }\\n\\n    /**\\n     * @dev Withdraw tokens from the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to withdraw\\n     * @param onBehalfOf Address to withdraw on behalf of\\n     */\\n    function _withdrawFromPoolImplementation(address token, uint256 amount, address onBehalfOf) internal override {\\n        getLendingPool().withdraw(token, amount, onBehalfOf);\\n    }\\n\\n    /* Helper functions */\\n\\n    /**\\n     * @dev Gets the lending oracle\\n     * @return IPriceOracleGetter The lending oracle interface\\n     */\\n    function getLendingOracle() public view returns (IPriceOracleGetter) {\\n        return IPriceOracleGetter(coreState.lendingPoolAddressesProvider.getPriceOracle());\\n    }\\n\\n    /**\\n     * @dev Gets the lending pool\\n     * @return ILendingPool The lending pool interface\\n     */\\n    function getLendingPool() public view returns (ILendingPool) {\\n        return ILendingPool(coreState.lendingPoolAddressesProvider.getPool());\\n    }\\n\\n    /**\\n     * @dev Gets the lending pool address\\n     * @return address The lending pool address\\n     */\\n    function getLendingPoolAddress() public view returns (address) {\\n        return address(getLendingPool());\\n    }\\n\\n    /**\\n     * @dev Gets the oracle address\\n     * @return address The oracle address\\n     */\\n    function getOracleAddress() public view returns (address) {\\n        return address(getLendingOracle());\\n    }\\n\\n    /**\\n     * @dev Gets the reserve data for a token\\n     * @param tokenAddress The address of the token\\n     * @return DataTypes.ReserveData The reserve data\\n     */\\n    function _getReserveData(address tokenAddress) internal view returns (DataTypes.ReserveData memory) {\\n        return getLendingPool().getReserveData(tokenAddress);\\n    }\\n\\n    /**\\n     * @dev Get the collateral value in token amount in the underlying pool\\n     * @param token The address of the token\\n     * @param user The address of the user\\n     * @return collateralTokenAmount The collateral token amount\\n     */\\n    function getCollateralValueInTokenAmount(\\n        address token,\\n        address user\\n    ) public view override returns (uint256 collateralTokenAmount) {\\n        collateralTokenAmount = ERC20(_getReserveData(token).aTokenAddress).balanceOf(user);\\n        return collateralTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Get the debt value in token amount in the underlying pool\\n     * @param token The address of the token\\n     * @param user The address of the user\\n     * @return debtTokenAmount The debt token amount\\n     */\\n    function getDebtValueInTokenAmount(\\n        address token,\\n        address user\\n    ) public view override returns (uint256 debtTokenAmount) {\\n        DataTypes.ReserveData memory reserveDebt = _getReserveData(token);\\n        uint256 variableDebt = ERC20(reserveDebt.variableDebtTokenAddress).balanceOf(user);\\n        uint256 stableDebt = ERC20(reserveDebt.stableDebtTokenAddress).balanceOf(user);\\n        debtTokenAmount = variableDebt + stableDebt;\\n        return debtTokenAmount;\\n    }\\n\\n    /* RewardClaimable functions */\\n\\n    /**\\n     * @dev Claims multiple rewards\\n     * @param rewardTokens The reward tokens to claim\\n     * @param receiver The address to receive the claimed rewards\\n     * @return rewardAmounts The amount of rewards claimed for each token (have the same length as the tokens array)\\n     */\\n    function _claimRewards(\\n        address[] calldata rewardTokens,\\n        address receiver\\n    ) internal override returns (uint256[] memory rewardAmounts) {\\n        if (rewardTokens.length == 0) {\\n            revert ZeroRewardTokens();\\n        }\\n        if (receiver == address(0)) {\\n            revert ZeroReceiverAddress();\\n        }\\n\\n        rewardAmounts = new uint256[](rewardTokens.length);\\n        address[] memory assetsToClaimForPayload = new address[](1);\\n        assetsToClaimForPayload[0] = coreState.dLendAssetToClaimFor;\\n\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            address rewardToken = rewardTokens[i];\\n            if (rewardToken == address(0)) {\\n                revert ZeroAddress(); // Cannot claim zero address token\\n            }\\n\\n            uint256 balanceBefore = ERC20(rewardToken).balanceOf(receiver);\\n\\n            // Claim all available amount of the specific reward token\\n            coreState.dLendRewardsController.claimRewardsOnBehalf(\\n                assetsToClaimForPayload, // Asset held by the wrapper in dLEND\\n                type(uint256).max, // Claim all\\n                coreState.targetStaticATokenWrapper, // User earning rewards is the wrapper\\n                receiver,\\n                rewardToken // The reward token to claim\\n            );\\n\\n            uint256 balanceAfter = ERC20(rewardToken).balanceOf(receiver);\\n            rewardAmounts[i] = balanceAfter - balanceBefore;\\n        }\\n        return rewardAmounts;\\n    }\\n\\n    /**\\n     * @dev Processes the exchange asset deposit from the caller\\n     * @param amount The amount of exchange asset to deposit\\n     */\\n    function _processExchangeAssetDeposit(uint256 amount) internal override {\\n        // As the exchange asset is the vault shares, we need to burn it\\n        // to increase the share's value\\n        _burn(address(this), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb0cb6ec2291950c9c474a0608150d886e0bb944cae775f5a03f4dee087ee713c\",\"license\":\"MIT\"},\"contracts/vaults/dloop/core/venue/dlend/interface/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport { IPoolAddressesProvider } from \\\"./IPoolAddressesProvider.sol\\\";\\nimport { DataTypes } from \\\"./types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     */\\n    event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     */\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     */\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     */\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function mintUnbacked(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     * @return The backed amount\\n     */\\n    function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     */\\n    function repayWithATokens(address asset, uint256 amount, uint256 interestRateMode) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     */\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     */\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     */\\n    function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     */\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     */\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n     * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\\n     * combination with variable debt supply/balances.\\n     * If using this function externally, consider that is possible to have an increasing normalized\\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n     * (e.g. only updates with non-zero variable debt supply)\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(uint128 flashLoanPremiumTotal, uint128 flashLoanPremiumToProtocol) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\",\"keccak256\":\"0x218d2ef63898e579d0fd11a0f15ad38de257634d4073497bea395366396cbb81\",\"license\":\"AGPL-3.0\"},\"contracts/vaults/dloop/core/venue/dlend/interface/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(bytes32 indexed id, address indexed proxyAddress, address indexed implementationAddress);\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddressFromID(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     */\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     */\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     */\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     */\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     */\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x0ff10bf2e3ddb214ee6444bdaa65b92abb77890989476c6cb6d34e8447fdb6c1\",\"license\":\"AGPL-3.0\"},\"contracts/vaults/dloop/core/venue/dlend/interface/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n    /**\\n     * @notice Returns the base currency address\\n     * @dev Address 0x0 is reserved for USD as base currency.\\n     * @return Returns the base currency address.\\n     */\\n    function BASE_CURRENCY() external view returns (address);\\n\\n    /**\\n     * @notice Returns the base currency unit\\n     * @dev 1 ether for ETH, 1e8 for USD.\\n     * @return Returns the base currency unit.\\n     */\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the asset price in the base currency\\n     * @param asset The address of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31366baa77e6298e46695465ba7f5ba8641fe8537e54901ae119282be0ee6d67\",\"license\":\"AGPL-3.0\"},\"contracts/vaults/dloop/core/venue/dlend/interface/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IRewardsController simplified interface\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Controller.\\n */\\ninterface IRewardsController {\\n    /**\\n     * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets List of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param to The address that will be receiving the rewards\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\n     * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param user The address to check and claim rewards\\n     * @param to The address that will be receiving the rewards\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewardsToSelf(address[] calldata assets, uint256 amount, address reward) external returns (uint256);\\n\\n    /**\\n     * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param to The address that will be receiving the rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n     **/\\n    function claimAllRewards(\\n        address[] calldata assets,\\n        address to\\n    ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param user The address to check and claim rewards\\n     * @param to The address that will be receiving the rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n     **/\\n    function claimAllRewardsOnBehalf(\\n        address[] calldata assets,\\n        address user,\\n        address to\\n    ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n     **/\\n    function claimAllRewardsToSelf(\\n        address[] calldata assets\\n    ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n}\\n\",\"keccak256\":\"0x504aefcdbbafd7904d633b9784aad617879845a0872004d0675930ccfd7e263f\",\"license\":\"AGPL-3.0\"},\"contracts/vaults/dloop/core/venue/dlend/interface/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62: siloed borrowing enabled\\n        //bit 63: flashloaning enabled\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0x5416c13face4a4dc40d5446fa0dd98ecad2de6448f485b92403dfe5db22a034b\",\"license\":\"BUSL-1.1\"},\"contracts/vaults/dloop/shared/RescuableVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Rescuable } from \\\"contracts/common/Rescuable.sol\\\";\\n\\n/**\\n * @title RescuableVault\\n * @dev A helper contract for rescuing tokens accidentally sent to the contract\\n *      - The derived contract must implement the isRescuableToken() function from Rescuable\\n */\\nabstract contract RescuableVault is AccessControl, ReentrancyGuard, Rescuable {\\n    bytes32 public constant RESCUER_ADMIN_ROLE = keccak256(\\\"RESCUER_ADMIN_ROLE\\\");\\n    bytes32 public constant RESCUER_ROLE = keccak256(\\\"RESCUER_ROLE\\\");\\n\\n    constructor() {\\n        _setRoleAdmin(RESCUER_ADMIN_ROLE, RESCUER_ADMIN_ROLE);\\n        _setRoleAdmin(RESCUER_ROLE, RESCUER_ADMIN_ROLE);\\n        _grantRole(RESCUER_ADMIN_ROLE, _msgSender());\\n        _grantRole(RESCUER_ROLE, _msgSender());\\n    }\\n\\n    /* Rescue Functions */\\n\\n    /**\\n     * @dev Rescues tokens accidentally sent to the contract (except for the collateral token and debt token)\\n     * @param token Address of the token to rescue\\n     * @param receiver Address to receive the rescued tokens\\n     * @param amount Amount of tokens to rescue\\n     */\\n    function rescueToken(address token, address receiver, uint256 amount) public onlyRole(RESCUER_ROLE) nonReentrant {\\n        // Expose the internal rescue token function of Rescuable\\n        _rescueToken(token, receiver, amount);\\n    }\\n\\n    // Rescue ETH\\n    function rescueNative(address receiver, uint256 amount) public onlyRole(RESCUER_ROLE) nonReentrant {\\n        // Expose the internal rescue native function of Rescuable\\n        _rescueNative(receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe4a4ceb1fa2379490c1e05af19a70a80dac28c3611f5a0ec5b4f102ddb5cbe5e\",\"license\":\"MIT\"},\"contracts/vaults/rewards_claimable/RewardClaimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { BasisPointConstants } from \\\"contracts/common/BasisPointConstants.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title RewardClaimable\\n * @dev Abstract contract for vaults with claimable rewards\\n * Implements functionality for claiming and compounding rewards\\n */\\nabstract contract RewardClaimable is AccessControl, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Roles\\n    bytes32 public constant REWARDS_MANAGER_ROLE = keccak256(\\\"REWARDS_MANAGER_ROLE\\\");\\n\\n    // State variables\\n    address public treasury;\\n    uint256 public treasuryFeeBps;\\n    uint256 public exchangeThreshold;\\n    address public immutable exchangeAsset;\\n    uint256 public immutable maxTreasuryFeeBps;\\n\\n    // Events\\n    event TreasuryUpdated(address oldTreasury, address newTreasury);\\n    event TreasuryFeeBpsUpdated(uint256 oldTreasuryFeeBps, uint256 newTreasuryFeeBps);\\n    event ExchangeThresholdUpdated(uint256 oldExchangeThreshold, uint256 newExchangeThreshold);\\n    event RewardCompounded(address exchangeAsset, uint256 amount, address[] rewardTokens);\\n\\n    // Custom errors\\n    error ExchangeAmountTooLow(uint256 amount, uint256 threshold);\\n    error RewardAmountsLengthMismatch(uint256 claimedAmountsLength, uint256 rewardTokensLength);\\n    error TreasuryFeeExceedsRewardAmount(uint256 treasuryFee, uint256 rewardAmount);\\n    error ZeroExchangeAssetAddress();\\n    error ZeroTreasuryAddress();\\n    error MaxTreasuryFeeTooHigh(uint256 maxTreasuryFeeBps);\\n    error TreasuryFeeTooHigh(uint256 treasuryFeeBps, uint256 maxTreasuryFeeBps);\\n    error ZeroExchangeThreshold();\\n    error ZeroReceiverAddress();\\n    error ZeroRewardTokens();\\n\\n    /**\\n     * @dev Constructor for the RewardClaimable contract\\n     * @param _exchangeAsset The address of the exchange asset\\n     * @param _treasury The address of the treasury\\n     * @param _maxTreasuryFeeBps The maximum treasury fee in basis points (30000 = 3%), where 100 = 1bps (1e2 for decimals)\\n     * @param _initialTreasuryFeeBps The initial treasury fee in basis points (100 = 1bps, 10000 = 100bps = 1%)\\n     * @param _initialExchangeThreshold The initial minimum threshold amount (in the same unit as the exchange asset)\\n     */\\n    constructor(\\n        address _exchangeAsset,\\n        address _treasury,\\n        uint256 _maxTreasuryFeeBps,\\n        uint256 _initialTreasuryFeeBps,\\n        uint256 _initialExchangeThreshold\\n    ) {\\n        if (_exchangeAsset == address(0)) {\\n            revert ZeroExchangeAssetAddress();\\n        }\\n        if (_treasury == address(0)) {\\n            revert ZeroTreasuryAddress();\\n        }\\n        // The fee cannot exceed the reward amount (100%)\\n        if (_maxTreasuryFeeBps > BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert MaxTreasuryFeeTooHigh(_maxTreasuryFeeBps);\\n        }\\n        // The initial fee cannot exceed the max fee, which means cannot be greater than 100% as well\\n        if (_initialTreasuryFeeBps > _maxTreasuryFeeBps) {\\n            revert TreasuryFeeTooHigh(_initialTreasuryFeeBps, _maxTreasuryFeeBps);\\n        }\\n        if (_initialExchangeThreshold == 0) {\\n            revert ZeroExchangeThreshold();\\n        }\\n\\n        exchangeAsset = _exchangeAsset;\\n        treasury = _treasury;\\n        maxTreasuryFeeBps = _maxTreasuryFeeBps;\\n        treasuryFeeBps = _initialTreasuryFeeBps;\\n        exchangeThreshold = _initialExchangeThreshold;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(REWARDS_MANAGER_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Sets the treasury address\\n     * @param newTreasury The new treasury address\\n     */\\n    function setTreasury(address newTreasury) external onlyRole(REWARDS_MANAGER_ROLE) {\\n        if (newTreasury == address(0)) {\\n            revert ZeroTreasuryAddress();\\n        }\\n        address oldTreasury = treasury;\\n        treasury = newTreasury;\\n\\n        emit TreasuryUpdated(oldTreasury, newTreasury);\\n    }\\n\\n    /**\\n     * @dev Sets the treasury fee in basis points\\n     * @param newTreasuryFeeBps New treasury fee in basis points (100 = 1bps = 0.01%)\\n     */\\n    function setTreasuryFeeBps(uint256 newTreasuryFeeBps) external onlyRole(REWARDS_MANAGER_ROLE) {\\n        if (newTreasuryFeeBps > maxTreasuryFeeBps) {\\n            revert TreasuryFeeTooHigh(newTreasuryFeeBps, maxTreasuryFeeBps);\\n        }\\n\\n        uint256 oldTreasuryFeeBps = treasuryFeeBps;\\n        treasuryFeeBps = newTreasuryFeeBps;\\n\\n        emit TreasuryFeeBpsUpdated(oldTreasuryFeeBps, newTreasuryFeeBps);\\n    }\\n\\n    /**\\n     * @dev Sets the minimum threshold for exchange operations\\n     * @param newExchangeThreshold New minimum threshold amount\\n     */\\n    function setExchangeThreshold(uint256 newExchangeThreshold) external onlyRole(REWARDS_MANAGER_ROLE) {\\n        if (newExchangeThreshold == 0) {\\n            revert ZeroExchangeThreshold();\\n        }\\n        uint256 oldExchangeThreshold = exchangeThreshold;\\n        exchangeThreshold = newExchangeThreshold;\\n\\n        emit ExchangeThresholdUpdated(oldExchangeThreshold, newExchangeThreshold);\\n    }\\n\\n    /**\\n     * @dev Calculates the treasury fee for a given amount\\n     * @param amount The amount to calculate the treasury fee for\\n     * @return The treasury fee in the same unit as the amount\\n     */\\n    function getTreasuryFee(uint256 amount) public view returns (uint256) {\\n        return Math.mulDiv(amount, treasuryFeeBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS);\\n    }\\n\\n    /**\\n     * @dev Compounds multiple rewards\\n     * @param amount The amount to compound\\n     * @param rewardTokens The reward tokens to claim\\n     * @param receiver The address to receive the compounded rewards\\n     */\\n    function compoundRewards(\\n        uint256 amount,\\n        address[] calldata rewardTokens,\\n        address receiver\\n    ) public virtual nonReentrant {\\n        if (amount < exchangeThreshold) {\\n            revert ExchangeAmountTooLow(amount, exchangeThreshold);\\n        }\\n        if (receiver == address(0)) {\\n            revert ZeroReceiverAddress();\\n        }\\n        if (rewardTokens.length == 0) {\\n            revert ZeroRewardTokens();\\n        }\\n\\n        // Transfer the exchange asset from the caller to the vault\\n        IERC20(exchangeAsset).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Emit the event before the internal call to avoid reentrancy\\n        emit RewardCompounded(exchangeAsset, amount, rewardTokens);\\n\\n        // Claim the rewards\\n        uint256[] memory rewardAmounts = _claimRewards(rewardTokens, address(this));\\n\\n        if (rewardAmounts.length != rewardTokens.length) {\\n            revert RewardAmountsLengthMismatch(rewardAmounts.length, rewardTokens.length);\\n        }\\n\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            uint256 rewardAmount = rewardAmounts[i];\\n            uint256 treasuryFee = getTreasuryFee(rewardAmount);\\n\\n            // Overflow protection\\n            if (treasuryFee > rewardAmount) {\\n                revert TreasuryFeeExceedsRewardAmount(treasuryFee, rewardAmount);\\n            }\\n\\n            // Transfer the treasury fee to the treasury\\n            IERC20(rewardTokens[i]).safeTransfer(treasury, treasuryFee);\\n\\n            // Transfer the remaining amount to the caller\\n            IERC20(rewardTokens[i]).safeTransfer(receiver, rewardAmount - treasuryFee);\\n        }\\n\\n        // Process the exchange asset deposit\\n        _processExchangeAssetDeposit(amount);\\n    }\\n\\n    /**\\n     * @dev Claims multiple rewards\\n     * @param rewardTokens The reward tokens to claim\\n     * @param receiver The address to receive the claimed rewards\\n     * @return rewardAmounts The amount of rewards claimed for each token (have the same length as the tokens array)\\n     */\\n    function _claimRewards(\\n        address[] calldata rewardTokens,\\n        address receiver\\n    ) internal virtual returns (uint256[] memory rewardAmounts);\\n\\n    /**\\n     * @dev Processes the exchange asset deposit from the caller\\n     * @param amount The amount of exchange asset to deposit\\n     */\\n    function _processExchangeAssetDeposit(uint256 amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x1546123b2b6492314630d26b50cda587f7ca4a768803618726caee8164fd845b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162006a7838038062006a78833981016040819052620000359162000b56565b30816101c00151826101e0015183610200015184610220015185600001518660200151876040015188606001518960a001518a60c001518b60e001518c61010001518d61012001518e6101400151878a8a816003908162000097919062000d8d565b506004620000a6828262000d8d565b505050600080620000bd83620006db60201b60201c565b9150915081620000cf576012620000d1565b805b60ff1660a05250506001600160a01b03908116608052600160065587811661010052881660e0526200010560648062000e6f565b620001169061ffff16606462000e98565b63ffffffff168663ffffffff1610156200015057604051632d7e79d160e21b815263ffffffff871660048201526024015b60405180910390fd5b8563ffffffff168563ffffffff161015806200017857508363ffffffff168663ffffffff1610155b15620001b05760405163b857eea760e01b815263ffffffff808716600483015280881660248301528516604482015260640162000147565b620001bb88620007c0565b620001e55760405163c47118b160e01b81526001600160a01b038916600482015260240162000147565b620001f087620007c0565b6200021a5760405163a830a4a160e01b81526001600160a01b038816600482015260240162000147565b63ffffffff86811660c05260078054610100600160481b0319166101008884160263ffffffff60281b191617650100000000009287169290920291909117905560088390556009829055600a8190556200028460008051602062006a3883398151915280620008ae565b620002ae60008051602062006a5883398151915260008051602062006a38833981519152620008ae565b620002c960008051602062006a3883398151915233620008f9565b50620002e560008051602062006a5883398151915233620008f9565b5050506001600160a01b038d1697506200031a965050505050505057604051631810b12760e21b815260040160405180910390fd5b6001600160a01b03841662000342576040516351dc806d60e11b815260040160405180910390fd5b6200034f60648062000e6f565b620003609061ffff16606462000e98565b63ffffffff168311156200038b5760405163a7519f3f60e01b81526004810184905260240162000147565b82821115620003b857604051636cef961f60e11b8152600481018390526024810184905260440162000147565b80600003620003da576040516354a62ce560e01b815260040160405180910390fd5b6001600160a01b0385811661012052600b80546001600160a01b031916918616919091179055610140839052600c829055600d8190556200041d600033620008f9565b506200044a7f51785d261c3b3e8c2cfe2d0e108b9ab2b1fb703ff9e9e49aba4ebdc85c36152b33620008f9565b5050505050506200047160008051602062006a1883398151915280620008ae60201b60201c565b6200049b600080516020620069f883398151915260008051602062006a18833981519152620008ae565b620004b660008051602062006a1883398151915233620008f9565b50620004d2600080516020620069f883398151915233620008f9565b506080810151600e80546001600160a01b039283166001600160a01b031991821617909155610180830151600f80549184169183169190911790556101a08301516010805491841691831691909117905561016083015160118054919093169116179055600062000542620009ac565b6001600160a01b031663e19f47006040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000580573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005a6919062000ebb565b6001600160a01b031614620006095760405162461bcd60e51b815260206004820152602260248201527f496e76616c6964207072696365206f7261636c6520626173652063757272656e604482015261637960f01b606482015260840162000147565b620006176008600a62000fdf565b62000621620009ac565b6001600160a01b0316638c89b64f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200065f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000685919062000ff0565b14620006d45760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964207072696365206f7261636c6520756e697400000000000000604482015260640162000147565b5062001028565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000918291829182916001600160a01b0387169162000724916200100a565b600060405180830381855afa9150503d806000811462000761576040519150601f19603f3d011682016040523d82523d6000602084013e62000766565b606091505b50915091508180156200077b57506020815110155b15620007b35760008180602001905181019062000799919062000ff0565b905060ff8111620007b1576001969095509350505050565b505b5060009485945092505050565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156200081f575060408051601f3d908101601f191682019092526200081c9181019062000ff0565b60015b6200082c57506000919050565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa9250505080156200088f575060408051601f3d908101601f191682019092526200088c9181019062000ff0565b60015b6200089d5750600092915050565b5060019392505050565b505b919050565b600082815260056020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008281526005602090815260408083206001600160a01b038516845290915281205460ff16620009a25760008381526005602090815260408083206001600160a01b03861684529091529020805460ff19166001179055620009593390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001620009a6565b5060005b92915050565b600e5460408051631f94a27560e31b815290516000926001600160a01b03169163fca513a89160048083019260209291908290030181865afa158015620009f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a1d919062000ebb565b905090565b634e487b7160e01b600052604160045260246000fd5b60405161024081016001600160401b038111828210171562000a5e5762000a5e62000a22565b60405290565b60005b8381101562000a8157818101518382015260200162000a67565b50506000910152565b600082601f83011262000a9c57600080fd5b81516001600160401b038082111562000ab95762000ab962000a22565b604051601f8301601f19908116603f0116810190828211818310171562000ae45762000ae462000a22565b8160405283815286602085880101111562000afe57600080fd5b62000b1184602083016020890162000a64565b9695505050505050565b6001600160a01b038116811462000b3157600080fd5b50565b8051620008a98162000b1b565b805163ffffffff81168114620008a957600080fd5b60006020828403121562000b6957600080fd5b81516001600160401b038082111562000b8157600080fd5b90830190610240828603121562000b9757600080fd5b62000ba162000a38565b82518281111562000bb157600080fd5b62000bbf8782860162000a8a565b82525060208301518281111562000bd557600080fd5b62000be38782860162000a8a565b60208301525062000bf76040840162000b34565b604082015262000c0a6060840162000b34565b606082015262000c1d6080840162000b34565b608082015262000c3060a0840162000b41565b60a082015262000c4360c0840162000b41565b60c082015262000c5660e0840162000b41565b60e0820152610100838101519082015261012080840151908201526101408084015190820152610160915062000c8e82840162000b34565b82820152610180915062000ca482840162000b34565b828201526101a0915062000cba82840162000b34565b828201526101c0915062000cd082840162000b34565b918101919091526101e08281015190820152610200808301519082015261022091820151918101919091529392505050565b600181811c9082168062000d1757607f821691505b602082108103620008a757634e487b7160e01b600052602260045260246000fd5b601f82111562000d88576000816000526020600020601f850160051c8101602086101562000d635750805b601f850160051c820191505b8181101562000d845782815560010162000d6f565b5050505b505050565b81516001600160401b0381111562000da95762000da962000a22565b62000dc18162000dba845462000d02565b8462000d38565b602080601f83116001811462000df9576000841562000de05750858301515b600019600386901b1c1916600185901b17855562000d84565b600085815260208120601f198616915b8281101562000e2a5788860151825594840194600190910190840162000e09565b508582101562000e495787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b61ffff81811683821602808216919082811462000e905762000e9062000e59565b505092915050565b63ffffffff81811683821602808216919082811462000e905762000e9062000e59565b60006020828403121562000ece57600080fd5b815162000edb8162000b1b565b9392505050565b600181815b8085111562000f2357816000190482111562000f075762000f0762000e59565b8085161562000f1557918102915b93841c939080029062000ee7565b509250929050565b60008262000f3c57506001620009a6565b8162000f4b57506000620009a6565b816001811462000f64576002811462000f6f5762000f8f565b6001915050620009a6565b60ff84111562000f835762000f8362000e59565b50506001821b620009a6565b5060208310610133831016604e8410600b841016171562000fb4575081810a620009a6565b62000fc0838362000ee2565b806000190482111562000fd75762000fd762000e59565b029392505050565b600062000edb60ff84168362000f2b565b6000602082840312156200100357600080fd5b5051919050565b600082516200101e81846020870162000a64565b9190910192915050565b60805160a05160c05160e0516101005161012051610140516157ae6200124a60003960008181610916015281816116f2015261172e0152600081816107d6015281816118da0152611925015260008181610ad001528181610c2b0152818161117c015281816112040152818161129a0152818161139401528181611aff01528181611b2c01528181611df801528181611e8001528181611eb801528181611ee501528181613384015281816144940152818161451c0152818161454c015281816148cb01528181614953015281816149a601528181614a3c01528181614a7d01528181614aaa01528181614b2c0152614b5f01526000818161083b01528181610a0a01528181610c62015281816110ce015281816111560152818161123c0152818161126b01528181611aa501528181611ad201528181611d4a01528181611dd201528181611f130152818161200d015281816124f3015281816138aa015281816142880152818161431e0152818161435f0152818161438e015281816143e60152818161446e015281816145a1015281816145d40152818161481d015281816148a50152614ad70152600081816108da015281816110460152818161108c015281816112fb0152818161134d0152818161154501528181611582015281816115cb01528181611cc701528181611d0d01528181611f7401528181611fc6015281816120cd01526143bf015260006116b4015260006106c701526157ae6000f3fe608060405234801561001057600080fd5b50600436106104ee5760003560e01c80637aa7c3c11161028e578063ba08765211610167578063dde35bfd116100d9578063e80cfa5e11610092578063e80cfa5e14610be4578063eaff459214610bed578063edea1d4814610c00578063ef8b30f714610a6d578063f0f4426014610c13578063f8d8989814610c2657600080fd5b8063dde35bfd14610b53578063dde51e1714610b5b578063e0dd245714610b6e578063e5711e8b14610b83578063e63ab1e914610b96578063e78a4fe014610bbd57600080fd5b8063cd1692691161012b578063cd16926914610aa8578063ce96cb7714610abb578063d267974c14610ace578063d547741f14610af4578063d905777e14610b07578063dd62ed3e14610b1a57600080fd5b8063ba08765214610a5a578063c63d75b6146106f3578063c6e6f59214610a6d578063c7101c1214610a80578063cabe9fd914610a9357600080fd5b80639d00f10811610200578063a9f1a798116101c4578063a9f1a798146109f5578063b18b78dd146109fd578063b2016bd414610a05578063b3d7f6b914610a2c578063b460af9414610a3f578063b6783edd14610a5257600080fd5b80639d00f10814610620578063a0a94526146109b4578063a1b2736a146109c7578063a217fddf146109da578063a9059cbb146109e257600080fd5b8063863df9e711610252578063863df9e71461095e5780638bc4ec9b1461096657806391d148541461097d57806394bf804d1461099057806395d89b41146109a357806395e6a3ba146109ab57600080fd5b80637aa7c3c1146108d55780637dd38d9a1461091157806380fbf1dd146109385780638456cb591461094d57806385bf8b771461095557600080fd5b8063331fb00f116103cb57806356d1d4a21161033d57806361d027b3116102f657806361d027b3146108265780636d483fe6146108395780636e553f651461085f57806370a0823114610872578063713725441461089b578063776efe47146108c257600080fd5b806356d1d4a2146107be5780635898ec3b146107d157806359757aa5146107f85780635b3f05491461080b5780635c975abb146108135780635f36a7421461081e57600080fd5b8063415c50691161038f578063415c5069146107065780634603be6f1461070e57806349b40402146107215780634cdad5061461072a5780635033def71461073d5780635679f9341461076557600080fd5b8063331fb00f1461069f57806336568abe146106b257806338d52e0f146106c55780633f4ba83a146106eb578063402d267d146106f357600080fd5b80631291f79d1161046457806323b872dd1161042857806323b872dd14610628578063241675241461063b578063248a9ca31461064e5780632f293a20146106715780632f2ff15d14610684578063313ce5671461069757600080fd5b80631291f79d146105dd57806314cecfbd146105f257806318160ddd146106055780631dc8d8181461060d5780631ff2d5e31461062057600080fd5b806305eee57e116104b657806305eee57e1461056d57806306fdde031461058757806307a2d13a1461059c57806309344c9c146105af578063095ea7b3146105b75780630a28a477146105ca57600080fd5b806301e1d114146104f357806301ffc9a71461050e5780630261bf8b14610531578063031c53ef1461055157806304336bb314610564575b600080fd5b6104fb610c4d565b6040519081526020015b60405180910390f35b61052161051c366004614e79565b610c8c565b6040519015158152602001610505565b610539610cc3565b6040516001600160a01b039091168152602001610505565b6104fb61055f366004614eb8565b610d36565b6104fb600a5481565b610575600881565b60405160ff9091168152602001610505565b61058f610db6565b6040516105059190614ee8565b6104fb6105aa366004614f37565b610e48565b610539610e55565b6105216105c5366004614f50565b610e9f565b6104fb6105d8366004614f37565b610eb7565b6105f06105eb366004614f50565b610ecd565b005b6104fb610600366004614f7c565b610f18565b6002546104fb565b6105f061061b366004614faa565b611028565b6104fb600181565b610521610636366004614fcc565b611418565b6105f0610649366004614f37565b61143c565b6104fb61065c366004614f37565b60009081526005602052604090206001015490565b6105f061067f366004615026565b61151b565b6105f0610692366004614eb8565b611681565b6105756116ac565b6105f06106ad366004614f37565b6116d8565b6105f06106c0366004614eb8565b6117a1565b7f0000000000000000000000000000000000000000000000000000000000000000610539565b6105f06117d4565b6104fb610701366004615059565b611809565b6104fb611828565b6105f061071c366004615076565b61184b565b6104fb600d5481565b6104fb610738366004614f37565b611a85565b61075061074b366004615059565b611a9b565b60408051928352602083019190915201610505565b600e54600f5460105460115461078b936001600160a01b03908116938116928116911684565b604080516001600160a01b0395861681529385166020850152918416918301919091529091166060820152608001610505565b6105f06107cc366004614f37565b611b59565b6105397f000000000000000000000000000000000000000000000000000000000000000081565b6104fb610806366004614eb8565b611bd0565b6104fb600281565b60075460ff16610521565b610539611c49565b600b54610539906001600160a01b031681565b7f0000000000000000000000000000000000000000000000000000000000000000610539565b6104fb61086d366004614eb8565b611c53565b6104fb610880366004615059565b6001600160a01b031660009081526020819052604090205490565b6104fb7fcf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a05081565b6105f06108d0366004614faa565b611ca9565b6108fc7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610505565b6104fb7f000000000000000000000000000000000000000000000000000000000000000081565b6007546108fc90610100900463ffffffff1681565b6105f061208c565b6104fb60085481565b6104fb6120be565b6007546108fc90600160281b900463ffffffff1681565b61052161098b366004614eb8565b6120fd565b6104fb61099e366004614eb8565b612128565b61058f612176565b6104fb60095481565b6105f06109c2366004614f37565b612185565b6105f06109d5366004615059565b6121eb565b6104fb600081565b6105216109f0366004614f50565b6122a8565b6105216122b6565b6105396122e0565b6105397f000000000000000000000000000000000000000000000000000000000000000081565b6104fb610a3a366004614f37565b6122ea565b6104fb610a4d366004615108565b6122f7565b6104fb61234f565b6104fb610a68366004615108565b612372565b6104fb610a7b366004614f37565b6123c1565b6104fb610a8e366004615059565b6123ce565b6104fb60008051602061573983398151915281565b6104fb610ab6366004614f7c565b612408565b6104fb610ac9366004615059565b612483565b7f0000000000000000000000000000000000000000000000000000000000000000610539565b6105f0610b02366004614eb8565b6124a6565b6104fb610b15366004615059565b6124cb565b6104fb610b28366004614f7c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6008546104fb565b610521610b69366004615059565b6124eb565b6104fb60008051602061575983398151915281565b6105f0610b91366004614fcc565b61257b565b6104fb7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6104fb7f8879d5d645eb76dcb2fbe49d1d300cf073cc071082c27a267e488d83d176b40381565b6104fb600c5481565b6104fb610bfb366004614f37565b6125c2565b6105f0610c0e366004614f37565b6125f2565b6105f0610c21366004615059565b612658565b6105397f000000000000000000000000000000000000000000000000000000000000000081565b600080610c5930611a9b565b509050610c86817f0000000000000000000000000000000000000000000000000000000000000000611bd0565b91505090565b60006001600160e01b03198216637965db0b60e01b1480610cbd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600e546040805163026b1d5f60e01b815290516000926001600160a01b03169163026b1d5f9160048083019260209291908290030181865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190615155565b905090565b6000610daf83836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9e9190615172565b60ff16610daa856123ce565b6126f1565b9392505050565b606060038054610dc590615195565b80601f0160208091040260200160405190810160405280929190818152602001828054610df190615195565b8015610e3e5780601f10610e1357610100808354040283529160200191610e3e565b820191906000526020600020905b815481529060010190602001808311610e2157829003601f168201915b5050505050905090565b6000610cbd826000612708565b600e5460408051631f94a27560e31b815290516000926001600160a01b03169163fca513a89160048083019260209291908290030181865afa158015610d0d573d6000803e3d6000fd5b600033610ead818585612742565b5060019392505050565b6000610cbd610ec883600a5461274f565b61279d565b7fcf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a050610ef7816127aa565b610eff6127b4565b610f0983836127de565b610f136001600655565b505050565b600080610f24846127e8565b6101408101516040516370a0823160e01b81526001600160a01b038681166004830152929350600092909116906370a0823190602401602060405180830381865afa158015610f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9b91906151cf565b6101208301516040516370a0823160e01b81526001600160a01b038781166004830152929350600092909116906370a0823190602401602060405180830381865afa158015610fee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101291906151cf565b905061101e81836151fe565b9695505050505050565b6110306127b4565b6110386128dd565b6000611042611828565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681106110be576040516312e9fceb60e21b81526004810182905263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b600061122d846110cc6120be565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190615172565b60ff1661117a7f00000000000000000000000000000000000000000000000000000000000000006123ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc9190615172565b60ff166112287f00000000000000000000000000000000000000000000000000000000000000006123ce565b612903565b90506112646001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308761295b565b60006112917f000000000000000000000000000000000000000000000000000000000000000086306129c2565b905060006112c07f00000000000000000000000000000000000000000000000000000000000000008430612b20565b9050848110156112ed5760405163ec02e43f60e01b815260048101829052602481018690526044016110b5565b60006112f7611828565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681118061132d5750848111155b1561138157604051630262805f60e11b81526004810182905263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166024820152604481018690526064016110b5565b81156113bb576113bb6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384612c71565b60408051888152602081018890529081018490526060810183905233907f72b9341ae324ee7e9a41986f370caf7ffb0c989c3c5d7be4b0d94b93bec5a2869060800160405180910390a250505050506114146001600655565b5050565b600033611426858285612ca2565b611431858585612d08565b506001949350505050565b600080516020615739833981519152611454816127aa565b61145c6127b4565b6114646128dd565b61146f606480615211565b61147e9061ffff16600a615237565b63ffffffff168211156114ce5781611497606480615211565b6114a69061ffff16600a615237565b604051630e037d7560e41b8152600481019290925263ffffffff1660248201526044016110b5565b600a80549083905560408051828152602081018590527fe07cd71654bf041221cc79adf2c12d88abbc33e847b9a2ac73c4e1002628a7d591015b60405180910390a1506114146001600655565b600080516020615739833981519152611533816127aa565b61153b6127b4565b6115436128dd565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff161015806115aa57508163ffffffff167f000000000000000000000000000000000000000000000000000000000000000063ffffffff1610155b156116005760405163b857eea760e01b815263ffffffff80851660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152831660448201526064016110b5565b6007805468ffffffffffffffff00191661010063ffffffff86811691820268ffffffff0000000000191692909217600160281b928616928302179092556040805192835260208301919091527fe181be2639e8d7c912d71af8c1c57c83a06fe411204b0bc3fdeb64c935ccd4cf910160405180910390a1610f136001600655565b60008281526005602052604090206001015461169c816127aa565b6116a68383612d67565b50505050565b6000610d31817f0000000000000000000000000000000000000000000000000000000000000000615257565b6000805160206157598339815191526116f0816127aa565b7f000000000000000000000000000000000000000000000000000000000000000082111561175a57604051636cef961f60e11b8152600481018390527f000000000000000000000000000000000000000000000000000000000000000060248201526044016110b5565b600c80549083905560408051828152602081018590527f7af7c1a20ca2d95ef775c520be0e875415f760d01d8ab209ad45bfe84839d68e91015b60405180910390a1505050565b6001600160a01b03811633146117ca5760405163334bd91960e11b815260040160405180910390fd5b610f138282612dfb565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6117fe816127aa565b611806612e68565b50565b60006118136122b6565b1561182057506000919050565b600019610cbd565b600080600061183630611a9b565b915091506118448282612eba565b9250505090565b6118536127b4565b600d5484101561188457600d546040516301959e9f60e51b81526110b5918691600401918252602082015260400190565b6001600160a01b0381166118ab576040516313e6c64360e31b815260040160405180910390fd5b60008290036118cd57604051633ce287ef60e21b815260040160405180910390fd5b6119026001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308761295b565b7fc8efbc392b57771291983f003bd32ae9dc5e87ff1388a259b9acf272db4531d87f00000000000000000000000000000000000000000000000000000000000000008585856040516119579493929190615270565b60405180910390a1600061196c848430612f8c565b8051909150831461199d578051604051631aff8a1160e01b81526004810191909152602481018490526044016110b5565b60005b83811015611a705760008282815181106119bc576119bc6152d3565b6020026020010151905060006119d1826125c2565b9050818111156119fe5760405163270c46bf60e01b815260048101829052602481018390526044016110b5565b600b54611a46906001600160a01b031682898987818110611a2157611a216152d3565b9050602002016020810190611a369190615059565b6001600160a01b03169190612c71565b611a6685611a5483856152e9565b898987818110611a2157611a216152d3565b50506001016119a0565b50611a7a8561327c565b506116a66001600655565b6000610cbd611a9383610e48565b600a54613286565b6000806000611aca7f000000000000000000000000000000000000000000000000000000000000000085612408565b9050611af6817f0000000000000000000000000000000000000000000000000000000000000000610d36565b92506000611b247f000000000000000000000000000000000000000000000000000000000000000086610f18565b9050611b50817f0000000000000000000000000000000000000000000000000000000000000000610d36565b92505050915091565b600080516020615759833981519152611b71816127aa565b81600003611b92576040516354a62ce560e01b815260040160405180910390fd5b600d80549083905560408051828152602081018590527f46c287b860f967b39d89a1692e6486d60e4d66ea2cde369816239edaf4e065699101611794565b6000610daf83836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c389190615172565b60ff16611c44856123ce565b6132d5565b6000610d31610cc3565b600080611c5f83611809565b905080841115611c8857828482604051633c8097d960e11b81526004016110b5939291906152fc565b6000611c93856123c1565b9050611ca1338587846132ec565b949350505050565b611cb16127b4565b611cb96128dd565b6000611cc3611828565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff168111611d3a5760405163de9f90d760e01b81526004810182905263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526044016110b5565b6000611ea984611d486120be565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dca9190615172565b60ff16611df67f00000000000000000000000000000000000000000000000000000000000000006123ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e789190615172565b60ff16611ea47f00000000000000000000000000000000000000000000000000000000000000006123ce565b613416565b9050611ee06001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308761295b565b611f0b7f00000000000000000000000000000000000000000000000000000000000000008530613461565b506000611f397f000000000000000000000000000000000000000000000000000000000000000083306135da565b905083811015611f6657604051636fe9fab760e01b815260048101829052602481018590526044016110b5565b6000611f70611828565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16811080611fa65750838110155b15611ffa57604051636a3f633560e11b81526004810182905263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166024820152604481018590526064016110b5565b8115612034576120346001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384612c71565b60408051878152602081018790529081018790526060810183905233907fae5e19ae4628c7ce8fe13292352b899b81124046fe5f2bb08004d24866fd45c89060800160405180910390a2505050506114146001600655565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6120b6816127aa565b611806613745565b6000610d316120cb611828565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16600854600954613782565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008061213483611809565b90508084111561215d5782848260405163284ff66760e01b81526004016110b5939291906152fc565b6000612168856122ea565b9050611ca1338583886132ec565b606060048054610dc590615195565b60008051602061573983398151915261219d816127aa565b6121a56127b4565b6121ad6128dd565b600880549083905560408051828152602081018590527f67fef5f7f784ddd197d63c3a14901057b9271a11b8b97a118471777da6fede4c9101611508565b600080516020615739833981519152612203816127aa565b6001600160a01b03821661222a5760405163d92e233d60e01b815260040160405180910390fd5b816001600160a01b03163b600003612255576040516309c7768560e41b815260040160405180910390fd5b601180546001600160a01b038481166001600160a01b0319831681179093556040519116919082907fd41ddf0add6cf5f4e7067e117b677c4bf3a6b26973090e908241a081fae54a4b90600090a3505050565b600033610ead818585612d08565b6000610d316122c3611828565b60075463ffffffff6101008204811691600160281b900416613825565b6000610d31610e55565b6000610cbd826001612708565b60008061230383612483565b90508085111561232c57828582604051633fa733bb60e21b81526004016110b5939291906152fc565b600061233786610eb7565b90506123463386868985613843565b95945050505050565b61235a606480615211565b6123699061ffff16600a615237565b63ffffffff1681565b60008061237e836124cb565b9050808511156123a757828582604051632e52afbb60e21b81526004016110b5939291906152fc565b60006123b286611a85565b9050612346338686848a613843565b6000610cbd826000613943565b6000806123da83613973565b905080600003610cbd5760405163339c9fa160e21b81526001600160a01b03841660048201526024016110b5565b6000612413836127e8565b61010001516040516370a0823160e01b81526001600160a01b038481166004830152909116906370a0823190602401602060405180830381865afa15801561245f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daf91906151cf565b600061248d6122b6565b1561249a57506000919050565b610cbd611a93836139e9565b6000828152600560205260409020600101546124c1816127aa565b6116a68383612dfb565b60006124d56122b6565b156124e257506000919050565b610cbd82613a0d565b6000806125177f00000000000000000000000000000000000000000000000000000000000000006127e8565b90508061010001516001600160a01b0316836001600160a01b0316148061255457508061014001516001600160a01b0316836001600160a01b0316145b80610daf57508061012001516001600160a01b0316836001600160a01b0316149392505050565b7fcf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a0506125a5816127aa565b6125ad6127b4565b6125b8848484613a2b565b6116a66001600655565b6000610cbd82600c546064806125d89190615211565b6125e79061ffff166064615237565b63ffffffff16613a71565b60008051602061573983398151915261260a816127aa565b6126126127b4565b61261a6128dd565b600980549083905560408051828152602081018590527fffac9ebcb954b47fd18acb3426a66b70dcb4c43c237303630c568d0062d8db1a9101611508565b600080516020615759833981519152612670816127aa565b6001600160a01b038216612697576040516351dc806d60e11b815260040160405180910390fd5b600b80546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a9101611794565b6000611ca1848361270386600a615401565b613a71565b6000610daf612715610c4d565b6127209060016151fe565b61272c6000600a61540d565b60025461273991906151fe565b85919085613b26565b610f138383836001613b6a565b600061275c606480615211565b61276b9061ffff166064615237565b63ffffffff16821061279357604051634d97211f60e01b8152600481018390526024016110b5565b610daf8383613c3f565b6000610cbd826001613943565b6118068133613d1b565b6002600654036127d757604051633ee5aeb560e01b815260040160405180910390fd5b6002600655565b6114148282613d54565b604080516102008101825260006101e08201818152825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c0810191909152612870610cc3565b6040516335ea6a7560e01b81526001600160a01b03848116600483015291909116906335ea6a75906024016101e060405180830381865afa1580156128b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbd9190615501565b60075460ff16156129015760405163d93c066560e01b815260040160405180910390fd5b565b60008660000361292657604051631501bbed60e31b815260040160405180910390fd5b60006129338887876126f1565b905060006129418289613de4565b905061294e8186866132d5565b9998505050505050505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526116a69186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613e3c565b6040516370a0823160e01b81526001600160a01b03828116600483015260009182918616906370a0823190602401602060405180830381865afa158015612a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3191906151cf565b9050612a3e858585613ead565b6040516370a0823160e01b81526001600160a01b038481166004830152600091908716906370a0823190602401602060405180830381865afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac91906151cf565b90506000612abe838388600180613f44565b8051909150612ae8578683838860405163648195a560e11b81526004016110b59493929190615624565b8060400151612b12578683838860405163758ad4e760e01b81526004016110b59493929190615624565b602001519695505050505050565b6040516370a0823160e01b81526001600160a01b03828116600483015260009182918616906370a0823190602401602060405180830381865afa158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f91906151cf565b9050612b9c858585613fe4565b6040516370a0823160e01b81526001600160a01b038481166004830152600091908716906370a0823190602401602060405180830381865afa158015612be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0a91906151cf565b90506000612c1d83838860016000613f44565b8051909150612c475786838388604051631216cb9b60e11b81526004016110b59493929190615624565b8060400151612b1257868383886040516371e5ed5360e01b81526004016110b59493929190615624565b6040516001600160a01b03838116602483015260448201839052610f1391859182169063a9059cbb90606401612990565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198110156116a65781811015612cf957828183604051637dc7a0d960e11b81526004016110b5939291906152fc565b6116a684848484036000613b6a565b6001600160a01b038316612d3257604051634b637e8f60e11b8152600060048201526024016110b5565b6001600160a01b038216612d5c5760405163ec442f0560e01b8152600060048201526024016110b5565b610f1383838361406b565b6000612d7383836120fd565b612df35760008381526005602090815260408083206001600160a01b03861684529091529020805460ff19166001179055612dab3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610cbd565b506000610cbd565b6000612e0783836120fd565b15612df35760008381526005602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610cbd565b612e70614182565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081831015612ee7576040516378ea417b60e11b815260048101849052602481018390526044016110b5565b82600003612ef757506000610cbd565b818303612f075750600019610cbd565b6000612f1383856152e9565b612f1e606480615211565b612f2d9061ffff166064615237565b612f3d9063ffffffff168661564a565b612f479190615677565b9050612f54606480615211565b612f639061ffff166064615237565b63ffffffff16811015610daf576040516369bb335560e01b8152600481018290526024016110b5565b60606000839003612fb057604051633ce287ef60e21b815260040160405180910390fd5b6001600160a01b038216612fd7576040516313e6c64360e31b815260040160405180910390fd5b8267ffffffffffffffff811115612ff057612ff061541c565b604051908082528060200260200182016040528015613019578160200160208202803683370190505b5060408051600180825281830190925291925060009190602080830190803683375050600f5482519293506001600160a01b031691839150600090613060576130606152d3565b60200260200101906001600160a01b031690816001600160a01b03168152505060005b8481101561327357600086868381811061309f5761309f6152d3565b90506020020160208101906130b49190615059565b90506001600160a01b0381166130dd5760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b038681166004830152600091908316906370a0823190602401602060405180830381865afa158015613127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314b91906151cf565b6011546010546040516333028b9960e01b81529293506001600160a01b03918216926333028b999261318d92899260001992909116908c90899060040161568b565b6020604051808303816000875af11580156131ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d091906151cf565b506040516370a0823160e01b81526001600160a01b038781166004830152600091908416906370a0823190602401602060405180830381865afa15801561321b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323f91906151cf565b905061324b82826152e9565b86858151811061325d5761325d6152d3565b6020908102919091010152505050600101613083565b50509392505050565b61180630826141a5565b6000613293606480615211565b6132a29061ffff166064615237565b63ffffffff168211156132cb57604051634d97211f60e01b8152600481018390526024016110b5565b610daf83836141db565b6000611ca1846132e685600a615401565b84613a71565b6132f46127b4565b8060000361331557604051639811e0c760e01b815260040160405180910390fd5b61331d6122b6565b156133695761332a611828565b60075460405163391f5eb560e01b8152600481019290925263ffffffff610100820481166024840152600160281b9091041660448201526064016110b5565b60006133758584614253565b90506133ab6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168583612c71565b6133b58483614640565b836001600160a01b0316856001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78585604051613403929190918252602082015260400190565b60405180910390a3506116a66001600655565b6000866000036134395760405163681b8c4360e01b815260040160405180910390fd5b60006134468885856126f1565b905060006134548289614676565b905061294e8188886132d5565b60008061346e8584610f18565b905061347a84826146ce565b6040516370a0823160e01b81526001600160a01b0385811660048301529195506000918716906370a0823190602401602060405180830381865afa1580156134c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ea91906151cf565b90506134f78686866146de565b6040516370a0823160e01b81526001600160a01b038581166004830152600091908816906370a0823190602401602060405180830381865afa158015613541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061356591906151cf565b90506000613577838389600180613f44565b80519091506135a157878383896040516301b6cca560e11b81526004016110b59493929190615624565b80604001516135cb5787838389604051634023dad760e11b81526004016110b59493929190615624565b60200151979650505050505050565b6000806135e78584612408565b90506135f384826146ce565b6040516370a0823160e01b81526001600160a01b0385811660048301529195506000918716906370a0823190602401602060405180830381865afa15801561363f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366391906151cf565b9050613670868686614780565b6040516370a0823160e01b81526001600160a01b038581166004830152600091908816906370a0823190602401602060405180830381865afa1580156136ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136de91906151cf565b905060006136f183838960016000613f44565b805190915061371b578783838960405163eefde95560e01b81526004016110b59493929190615624565b80604001516135cb5787838389604051633b6d51ff60e21b81526004016110b59493929190615624565b61374d6128dd565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e9d3390565b600080848611156137e057600061379986886152e9565b9050838110156137ae57600092505050611ca1565b6137d8816137bd606480615211565b6137cc9061ffff166064615237565b63ffffffff1688613a71565b915050613814565b60006137ec87876152e9565b90508381101561380157600092505050611ca1565b613810816137bd606480615211565b9150505b838111156123465783915050611ca1565b60008315801590611ca1575082841080611ca1575050909111919050565b61384b6127b4565b846001600160a01b0316836001600160a01b03161461386f5761386f838683612ca2565b61387983826141a5565b6138816122b6565b1561388e5761332a611828565b600061389a8684614805565b5090506138d16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168683612c71565b836001600160a01b0316856001600160a01b0316876001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8486604051613929929190918252602082015260400190565b60405180910390a45061393c6001600655565b5050505050565b6000610daf61395382600a61540d565b60025461396091906151fe565b613968610c4d565b6127399060016151fe565b600061397d610e55565b60405163b3596f0760e01b81526001600160a01b038481166004830152919091169063b3596f0790602401602060405180830381865afa1580156139c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbd91906151cf565b6001600160a01b038116600090815260208190526040812054610cbd906000612708565b6001600160a01b038116600090815260208190526040812054610cbd565b613a34836124eb565b15613a5d576040516341d6bb6960e01b81526001600160a01b03841660048201526024016110b5565b610f136001600160a01b0384168383612c71565b6000806000613a808686614bcb565b9150915081600003613aa557838181613a9b57613a9b615661565b0492505050610daf565b818411613abc57613abc6003851502601118614be9565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010185841190960395909502919093039390930492909217029150509392505050565b6000613b55613b3483614bfb565b8015613b50575060008480613b4b57613b4b615661565b868809115b151590565b613b60868686613a71565b61234691906151fe565b6001600160a01b038416613b945760405163e602df0560e01b8152600060048201526024016110b5565b6001600160a01b038316613bbe57604051634a1406b160e11b8152600060048201526024016110b5565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156116a657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051613c3191815260200190565b60405180910390a350505050565b6000821580613c4c575081155b15613c58575081610cbd565b613c63606480615211565b613c729061ffff166064615237565b63ffffffff168210613c8657506000610cbd565b6000613cde84613c97606480615211565b613ca69061ffff166064615237565b63ffffffff1685613cb8606480615211565b613cc79061ffff166064615237565b63ffffffff16613cd791906152e9565b6001613b26565b90508015610daf576000613cfc613cf66001846152e9565b856141db565b9050848110613d1357613d106001836152e9565b91505b509392505050565b613d2582826120fd565b6114145760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016110b5565b80471015613d7e5760405163cf47918160e01b8152476004820152602481018290526044016110b5565b600080836001600160a01b03168360405160006040518083038185875af1925050503d8060008114613dcc576040519150601f19603f3d011682016040523d82523d6000602084013e613dd1565b606091505b5091509150816116a6576116a681614c28565b6000610daf8383613df6606480615211565b613e059061ffff166064615237565b63ffffffff16613e1591906151fe565b613e20606480615211565b613e2f9061ffff166064615237565b63ffffffff166000613b26565b600080602060008451602086016000885af180613e5f576040513d6000823e3d81fd5b50506000513d91508115613e77578060011415613e84565b6001600160a01b0384163b155b156116a657604051635274afe760e01b81526001600160a01b03851660048201526024016110b5565b6000613eb7610cc3565b9050613ecd6001600160a01b0385168285614c50565b60405163617ba03760e01b81526001600160a01b0385811660048301526024820185905283811660448301526000606483015282169063617ba03790608401600060405180830381600087803b158015613f2657600080fd5b505af1158015613f3a573d6000803e3d6000fd5b5050505050505050565b6040805160608101825260008082526020820181905291810182905290826001811115613f7357613f73615700565b03613f985785851180825215613f9357613f8d86866152e9565b60208201525b613fb3565b85851080825215613fb357613fad85876152e9565b60208201525b8051613fc55760006040820152612346565b613fd481602001518585614ce0565b1515604082015295945050505050565b613fec610cc3565b60405163a415bcad60e01b81526001600160a01b0385811660048301526024820185905260026044830152600060648301528381166084830152919091169063a415bcad9060a401600060405180830381600087803b15801561404e57600080fd5b505af1158015614062573d6000803e3d6000fd5b50505050505050565b6001600160a01b03831661409657806002600082825461408b91906151fe565b909155506140f59050565b6001600160a01b038316600090815260208190526040902054818110156140d65783818360405163391434e360e21b81526004016110b5939291906152fc565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661411157600280548290039055614130565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161417591815260200190565b60405180910390a3505050565b60075460ff1661290157604051638dfc202b60e01b815260040160405180910390fd5b6001600160a01b0382166141cf57604051634b637e8f60e11b8152600060048201526024016110b5565b6114148260008361406b565b6000826000036141ed57506000610cbd565b816000036141fc575081610cbd565b614207606480615211565b6142169061ffff166064615237565b63ffffffff16821061422a57506000610cbd565b60006142368484614d13565b9050838110614249576000915050610cbd565b611ca181856152e9565b60008061425e611828565b604051636eb1769f60e11b81526001600160a01b03868116600483015230602483015291925084917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa1580156142cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142f391906151cf565b101561435257604051631518e3a360e01b81526001600160a01b0380861660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000166044820152606481018490526084016110b5565b6143876001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685308661295b565b60006143b47f000000000000000000000000000000000000000000000000000000000000000085306129c2565b9050600061454582847f000000000000000000000000000000000000000000000000000000000000000063ffffffff167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144669190615172565b60ff166144927f00000000000000000000000000000000000000000000000000000000000000006123ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145149190615172565b60ff166145407f00000000000000000000000000000000000000000000000000000000000000006123ce565b614d6a565b90506145727f00000000000000000000000000000000000000000000000000000000000000008230612b20565b935061457f6001866152e9565b82101561463757600061459283876152e9565b90506145c86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168883612c71565b866001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f21fa991d1ca60543187d2a0de62e5ea0ce1a703a3f0021354ae2f9a75dc0e34d8360405161462d91815260200190565b60405180910390a3505b50505092915050565b6001600160a01b03821661466a5760405163ec442f0560e01b8152600060048201526024016110b5565b6114146000838361406b565b6000610daf8383614688606480615211565b6146979061ffff166064615237565b63ffffffff166146a791906151fe565b6146b2606480615211565b6146c19061ffff166064615237565b63ffffffff166001613b26565b6000828218828410028218610daf565b60006146e8610cc3565b90506146fe6001600160a01b0385168285614c50565b60405163573ade8160e01b81526001600160a01b0385811660048301526024820185905260026044830152838116606483015282169063573ade81906084016020604051808303816000875af115801561475c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393c91906151cf565b614788610cc3565b604051631a4ca37b60e21b81526001600160a01b03858116600483015260248201859052838116604483015291909116906369328dec906064016020604051808303816000875af11580156147e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a691906151cf565b6000806000614812611828565b9050600061497c85837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061489d9190615172565b60ff166148c97f00000000000000000000000000000000000000000000000000000000000000006123ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061494b9190615172565b60ff166149777f00000000000000000000000000000000000000000000000000000000000000006123ce565b614dd8565b604051636eb1769f60e11b81526001600160a01b03888116600483015230602483015291925082917f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e90604401602060405180830381865afa1580156149ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a1191906151cf565b1015614a70576040516326938fb560e01b81526001600160a01b0380881660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000166044820152606481018290526084016110b5565b614aa56001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001687308461295b565b614ad07f00000000000000000000000000000000000000000000000000000000000000008230613461565b9250614afd7f000000000000000000000000000000000000000000000000000000000000000086306135da565b9350614b0a6001826152e9565b831015614bc2576000614b1d84836152e9565b9050614b536001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168883612c71565b866001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f858a27e141780954fe5d38ba55127b6c35f8f5904c3a088438a18578d5d71eee83604051614bb891815260200190565b60405180910390a3505b50509250929050565b60008060001983850993909202808410938190039390930393915050565b634e487b71600052806020526024601cfd5b60006002826003811115614c1157614c11615700565b614c1b9190615716565b60ff166001149050919050565b805115614c3757805160208201fd5b60405163d6bda27560e01b815260040160405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052614ca18482614e2f565b6116a6576040516001600160a01b03848116602483015260006044830152614cd691869182169063095ea7b390606401612990565b6116a68482613e3c565b600082841115614cfe5781614cf584866152e9565b11159050610daf565b81614d0985856152e9565b1115949350505050565b6000821580614d20575081155b15614d2d57506000610cbd565b614d38606480615211565b614d479061ffff166064615237565b63ffffffff168210614d5a575081610cbd565b610daf83836125d8606480615211565b600086600003614d78578596505b6000614d858987876126f1565b90506000614dbd82614d98606480615211565b614da79061ffff166064615237565b614db79063ffffffff168c6152e9565b8b613a71565b9050614dca8186866132d5565b9a9950505050505050505050565b600085600003614dea5750600061101e565b6000614df78887876126f1565b9050600061294182614e0a606480615211565b614e199061ffff166064615237565b614e299063ffffffff168b6152e9565b8a613a71565b6000806000806020600086516020880160008a5af192503d9150600051905082801561101e57508115614e65578060011461101e565b50505050506001600160a01b03163b151590565b600060208284031215614e8b57600080fd5b81356001600160e01b031981168114610daf57600080fd5b6001600160a01b038116811461180657600080fd5b60008060408385031215614ecb57600080fd5b823591506020830135614edd81614ea3565b809150509250929050565b60006020808352835180602085015260005b81811015614f1657858101830151858201604001528201614efa565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215614f4957600080fd5b5035919050565b60008060408385031215614f6357600080fd5b8235614f6e81614ea3565b946020939093013593505050565b60008060408385031215614f8f57600080fd5b8235614f9a81614ea3565b91506020830135614edd81614ea3565b60008060408385031215614fbd57600080fd5b50508035926020909101359150565b600080600060608486031215614fe157600080fd5b8335614fec81614ea3565b92506020840135614ffc81614ea3565b929592945050506040919091013590565b803563ffffffff8116811461502157600080fd5b919050565b6000806040838503121561503957600080fd5b6150428361500d565b91506150506020840161500d565b90509250929050565b60006020828403121561506b57600080fd5b8135610daf81614ea3565b6000806000806060858703121561508c57600080fd5b84359350602085013567ffffffffffffffff808211156150ab57600080fd5b818701915087601f8301126150bf57600080fd5b8135818111156150ce57600080fd5b8860208260051b85010111156150e357600080fd5b60208301955080945050505060408501356150fd81614ea3565b939692955090935050565b60008060006060848603121561511d57600080fd5b83359250602084013561512f81614ea3565b9150604084013561513f81614ea3565b809150509250925092565b805161502181614ea3565b60006020828403121561516757600080fd5b8151610daf81614ea3565b60006020828403121561518457600080fd5b815160ff81168114610daf57600080fd5b600181811c908216806151a957607f821691505b6020821081036151c957634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156151e157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610cbd57610cbd6151e8565b61ffff81811683821602808216919082811461522f5761522f6151e8565b505092915050565b63ffffffff81811683821602808216919082811461522f5761522f6151e8565b60ff8181168382160190811115610cbd57610cbd6151e8565b6001600160a01b03858116825260208083018690526060604084018190528301849052600091859160808501845b878110156152c55784356152b181614ea3565b84168252938201939082019060010161529e565b509998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b81810381811115610cbd57610cbd6151e8565b6001600160a01b039390931683526020830191909152604082015260600190565b600181815b8085111561535857816000190482111561533e5761533e6151e8565b8085161561534b57918102915b93841c9390800290615322565b509250929050565b60008261536f57506001610cbd565b8161537c57506000610cbd565b8160018114615392576002811461539c576153b8565b6001915050610cbd565b60ff8411156153ad576153ad6151e8565b50506001821b610cbd565b5060208310610133831016604e8410600b84101617156153db575081810a610cbd565b6153e5838361531d565b80600019048211156153f9576153f96151e8565b029392505050565b6000610daf8383615360565b6000610daf60ff841683615360565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561546457634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561547c57600080fd5b6040516020810181811067ffffffffffffffff821117156154ad57634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461502157600080fd5b805164ffffffffff8116811461502157600080fd5b805161ffff8116811461502157600080fd5b60006101e0828403121561551457600080fd5b61551c615432565b615526848461546a565b8152615534602084016154ba565b6020820152615545604084016154ba565b6040820152615556606084016154ba565b6060820152615567608084016154ba565b608082015261557860a084016154ba565b60a082015261558960c084016154da565b60c082015261559a60e084016154ef565b60e08201526101006155ad81850161514a565b908201526101206155bf84820161514a565b908201526101406155d184820161514a565b908201526101606155e384820161514a565b908201526101806155f58482016154ba565b908201526101a06156078482016154ba565b908201526101c06156198482016154ba565b908201529392505050565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b8082028115828204841417610cbd57610cbd6151e8565b634e487b7160e01b600052601260045260246000fd5b60008261568657615686615661565b500490565b60a0808252865190820181905260009060209060c0840190828a01845b828110156156cd5781516001600160a01b0316845292840192908401906001016156a8565b505050602084019790975250506001600160a01b0393841660408201529183166060830152909116608090910152919050565b634e487b7160e01b600052602160045260246000fd5b600060ff83168061572957615729615661565b8060ff8416069150509291505056fe6e3aaeed2986e1faf3948bf7432f5c2ebcf5848384724380cff0b38c1bf05ded51785d261c3b3e8c2cfe2d0e108b9ab2b1fb703ff9e9e49aba4ebdc85c36152ba26469706673582212209c3593478683df39a05d1184ff4c3c05d5142ae6b6f743b99e2f7d294c55909664736f6c63430008160033cf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a0508879d5d645eb76dcb2fbe49d1d300cf073cc071082c27a267e488d83d176b4036e3aaeed2986e1faf3948bf7432f5c2ebcf5848384724380cff0b38c1bf05ded65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
  "deployedBytecode": "",
  "libraries": {
    "DLoopCoreLogic": "0xCBfe96823292253239ea719eb538ec2DAA83Fb6A"
  },
  "devdoc": {
    "details": "Read the documentation of DLoopCoreBase for more details      - This contract implement dLEND-specific lending operations for DLoopCoreBase",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
        {
          "details": "Attempted to deposit more assets than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxMint(address,uint256,uint256)": [
        {
          "details": "Attempted to mint more shares than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
        {
          "details": "Attempted to redeem more shares than the max amount for `receiver`."
        }
      ],
      "ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
        {
          "details": "Attempted to withdraw more assets than the max amount for `receiver`."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert."
      },
      "balanceOf(address)": {
        "details": "Returns the value of tokens owned by `account`."
      },
      "compoundRewards(uint256,address[],address)": {
        "details": "Compounds multiple rewards",
        "params": {
          "amount": "The amount to compound",
          "receiver": "The address to receive the compounded rewards",
          "rewardTokens": "The reward tokens to claim"
        }
      },
      "constructor": {
        "details": "Constructor for the DLoopCoreDLend contract using struct to avoid stack-too-deep"
      },
      "convertFromBaseCurrencyToToken(uint256,address)": {
        "details": "Converts an amount in base currency to the actual amount in the token",
        "params": {
          "amountInBase": "Amount in base currency",
          "token": "Address of the token"
        },
        "returns": {
          "_0": "amountInToken Amount in the token"
        }
      },
      "convertFromTokenAmountToBaseCurrency(uint256,address)": {
        "details": "Converts an amount in the token to the actual amount in base currency",
        "params": {
          "amountInToken": "Amount in the token",
          "token": "Address of the token"
        },
        "returns": {
          "_0": "amountInBase Amount in base currency"
        }
      },
      "convertToAssets(uint256)": {
        "details": "Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
      },
      "convertToShares(uint256)": {
        "details": "Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
      },
      "decimals()": {
        "details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
      },
      "decreaseLeverage(uint256,uint256)": {
        "details": "Requires spending debt token from the user's wallet to repay debt to the pool.      Will send the withdrawn collateral asset to the user's wallet.",
        "params": {
          "inputDebtTokenAmount": "The amount of debt token to repay",
          "minReceivedCollateralTokenAmount": "The minimum amount of collateral asset to receive"
        }
      },
      "deposit(uint256,address)": {
        "details": "Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
      },
      "getAssetPriceFromOracle(address)": {
        "details": "Gets the asset price from the oracle",
        "params": {
          "asset": "Address of the asset"
        },
        "returns": {
          "_0": "uint256 Price of the asset"
        }
      },
      "getCollateralTokenAddress()": {
        "returns": {
          "_0": "address The address of the collateral token"
        }
      },
      "getCollateralValueInTokenAmount(address,address)": {
        "details": "Get the collateral value in token amount in the underlying pool",
        "params": {
          "token": "The address of the token",
          "user": "The address of the user"
        },
        "returns": {
          "collateralTokenAmount": "The collateral token amount"
        }
      },
      "getCurrentLeverageBps()": {
        "details": "Calculates leverage based on total collateral and debt values",
        "returns": {
          "_0": "uint256 The current leverage in basis points"
        }
      },
      "getCurrentSubsidyBps()": {
        "details": "Calculates subsidy based on leverage deviation from target",
        "returns": {
          "_0": "uint256 The current subsidy in basis points"
        }
      },
      "getDebtTokenAddress()": {
        "returns": {
          "_0": "address The address of the debt token"
        }
      },
      "getDebtValueInTokenAmount(address,address)": {
        "details": "Get the debt value in token amount in the underlying pool",
        "params": {
          "token": "The address of the token",
          "user": "The address of the user"
        },
        "returns": {
          "debtTokenAmount": "The debt token amount"
        }
      },
      "getDefaultMaxSubsidyBps()": {
        "returns": {
          "_0": "uint256 The default maximum subsidy in basis points"
        }
      },
      "getLendingOracle()": {
        "details": "Gets the lending oracle",
        "returns": {
          "_0": "IPriceOracleGetter The lending oracle interface"
        }
      },
      "getLendingPool()": {
        "details": "Gets the lending pool",
        "returns": {
          "_0": "ILendingPool The lending pool interface"
        }
      },
      "getLendingPoolAddress()": {
        "details": "Gets the lending pool address",
        "returns": {
          "_0": "address The lending pool address"
        }
      },
      "getOracleAddress()": {
        "details": "Gets the oracle address",
        "returns": {
          "_0": "address The oracle address"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTotalCollateralAndDebtOfUserInBase(address)": {
        "details": "Gets the total collateral and debt of a user in base currency",
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "totalCollateralBase": "Total collateral in base currency",
          "totalDebtBase": "Total debt in base currency"
        }
      },
      "getTreasuryFee(uint256)": {
        "details": "Calculates the treasury fee for a given amount",
        "params": {
          "amount": "The amount to calculate the treasury fee for"
        },
        "returns": {
          "_0": "The treasury fee in the same unit as the amount"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseLeverage(uint256,uint256)": {
        "details": "Requires spending collateral token from the user's wallet to supply to the pool.      Will send the borrowed debt token to the user's wallet.",
        "params": {
          "inputCollateralTokenAmount": "The amount of collateral token to deposit",
          "minReceivedDebtTokenAmount": "The minimum amount of debt token to receive"
        }
      },
      "isRescuableToken(address)": {
        "details": "Do not rescue the aToken, variable debt token and stable debt token of the collateral token      - Implement this method from RescuableVault",
        "params": {
          "token": "Address of the token to check"
        },
        "returns": {
          "_0": "bool True if the token is a restricted rescue token, false otherwise"
        }
      },
      "isTooImbalanced()": {
        "details": "Returns whether the current leverage is too imbalanced",
        "returns": {
          "_0": "bool True if leverage is too imbalanced, false otherwise"
        }
      },
      "maxDeposit(address)": {
        "details": "See {IERC4626-maxDeposit}."
      },
      "maxMint(address)": {
        "details": "See {IERC4626-maxMint}."
      },
      "maxRedeem(address)": {
        "details": "See {IERC4626-maxRedeem}."
      },
      "maxWithdraw(address)": {
        "details": "See {IERC4626-maxWithdraw}."
      },
      "mint(uint256,address)": {
        "details": "Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pause()": {
        "details": "Only callable by accounts with the pauser role"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "previewDeposit(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
      },
      "previewMint(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."
      },
      "previewRedeem(uint256)": {
        "details": "See {IERC4626-previewRedeem}."
      },
      "previewWithdraw(uint256)": {
        "details": "See {IERC4626-previewWithdraw}."
      },
      "redeem(uint256,address,address)": {
        "details": "Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "rescueToken(address,address,uint256)": {
        "details": "Rescues tokens accidentally sent to the contract (except for the collateral token and debt token)",
        "params": {
          "amount": "Amount of tokens to rescue",
          "receiver": "Address to receive the rescued tokens",
          "token": "Address of the token to rescue"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setDLendRewardsController(address)": {
        "details": "Only callable by accounts with the dLoop admin role.",
        "params": {
          "_newDLendRewardsController": "The address of the new rewards controller."
        }
      },
      "setExchangeThreshold(uint256)": {
        "details": "Sets the minimum threshold for exchange operations",
        "params": {
          "newExchangeThreshold": "New minimum threshold amount"
        }
      },
      "setLeverageBounds(uint32,uint32)": {
        "details": "Sets the lower and upper bounds of target leverage",
        "params": {
          "_lowerBoundTargetLeverageBps": "New lower bound of target leverage in basis points",
          "_upperBoundTargetLeverageBps": "New upper bound of target leverage in basis points"
        }
      },
      "setMaxSubsidyBps(uint256)": {
        "details": "Only callable by accounts with the admin role",
        "params": {
          "_maxSubsidyBps": "New maximum subsidy in basis points"
        }
      },
      "setMinDeviationBps(uint256)": {
        "details": "Only callable by accounts with the admin role",
        "params": {
          "_minDeviationBps": "New minimum deviation of leverage from the target leverage in basis points"
        }
      },
      "setTreasury(address)": {
        "details": "Sets the treasury address",
        "params": {
          "newTreasury": "The new treasury address"
        }
      },
      "setTreasuryFeeBps(uint256)": {
        "details": "Sets the treasury fee in basis points",
        "params": {
          "newTreasuryFeeBps": "New treasury fee in basis points (100 = 1bps = 0.01%)"
        }
      },
      "setWithdrawalFeeBps(uint256)": {
        "details": "Only callable by accounts with the admin role",
        "params": {
          "newWithdrawalFeeBps": "The new withdrawal fee in basis points"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "details": "Override of totalAssets from ERC4626",
        "returns": {
          "_0": "uint256 Total assets in the vault"
        }
      },
      "totalSupply()": {
        "details": "Returns the value of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "unpause()": {
        "details": "Only callable by accounts with the pauser role"
      },
      "withdraw(uint256,address,address)": {
        "details": "Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
      }
    },
    "title": "DLoopCoreDLend",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decreaseLeverage(uint256,uint256)": {
        "notice": "Decreases the leverage of the user by repaying debt and withdrawing collateral"
      },
      "getCollateralTokenAddress()": {
        "notice": "Gets the address of the collateral token"
      },
      "getCurrentLeverageBps()": {
        "notice": "Gets the current leverage in basis points"
      },
      "getCurrentSubsidyBps()": {
        "notice": "Gets the current subsidy in basis points"
      },
      "getDebtTokenAddress()": {
        "notice": "Gets the address of the debt token"
      },
      "getDefaultMaxSubsidyBps()": {
        "notice": "Gets the default maximum subsidy in basis points"
      },
      "increaseLeverage(uint256,uint256)": {
        "notice": "Increases the leverage of the user by supplying collateral token and borrowing more debt token"
      },
      "pause()": {
        "notice": "Pauses the contract"
      },
      "setDLendRewardsController(address)": {
        "notice": "Sets the address of the dLEND RewardsController contract."
      },
      "setMaxSubsidyBps(uint256)": {
        "notice": "Sets the maximum subsidy in basis points"
      },
      "setMinDeviationBps(uint256)": {
        "notice": "Sets the minimum deviation of leverage from the target leverage in basis points"
      },
      "setWithdrawalFeeBps(uint256)": {
        "notice": "Sets the withdrawal fee in basis points"
      },
      "unpause()": {
        "notice": "Unpauses the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 799,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 805,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 807,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 809,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 811,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "_roles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)"
      },
      {
        "astId": 3036,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2926,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "_paused",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 8641,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "lowerBoundTargetLeverageBps",
        "offset": 1,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 8643,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "upperBoundTargetLeverageBps",
        "offset": 5,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 8645,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "maxSubsidyBps",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 8647,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "minDeviationBps",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 8649,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "withdrawalFeeBps",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 17995,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "treasury",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 17997,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "treasuryFeeBps",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 17999,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "exchangeThreshold",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 11932,
        "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
        "label": "coreState",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(CoreState)11929_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPoolAddressesProvider)13468": {
        "encoding": "inplace",
        "label": "contract IPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsController)13586": {
        "encoding": "inplace",
        "label": "contract IRewardsController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)22_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CoreState)11929_storage": {
        "encoding": "inplace",
        "label": "struct DLoopCoreDLend.CoreState",
        "members": [
          {
            "astId": 11921,
            "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
            "label": "lendingPoolAddressesProvider",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IPoolAddressesProvider)13468"
          },
          {
            "astId": 11923,
            "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
            "label": "dLendAssetToClaimFor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11925,
            "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
            "label": "targetStaticATokenWrapper",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 11928,
            "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
            "label": "dLendRewardsController",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IRewardsController)13586"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)22_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 19,
            "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21,
            "contract": "contracts/vaults/dloop/core/venue/dlend/DLoopCoreDLend.sol:DLoopCoreDLend",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}