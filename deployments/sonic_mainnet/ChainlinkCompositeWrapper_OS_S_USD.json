{
  "address": "0xf864406E4bb1e159e2DC5C1C98364edBfe762D13",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sourceFeed1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sourceFeed2",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_targetDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_baseCurrencyUnit",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lowerThresholdInBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedPriceInBase",
              "type": "uint256"
            }
          ],
          "internalType": "struct ThresholdingUtils.ThresholdConfig",
          "name": "_primaryThreshold",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lowerThresholdInBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedPriceInBase",
              "type": "uint256"
            }
          ],
          "internalType": "struct ThresholdingUtils.ThresholdConfig",
          "name": "_secondaryThreshold",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PriceIsStale",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINLINK_HEARTBEAT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrencyUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "heartbeatStaleTimeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lowerThresholdInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fixedPriceInBase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondaryThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lowerThresholdInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fixedPriceInBase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sourceFeed1",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sourceFeed2",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7f27965f33ba2b0ad3488667fc6e9873fc33b95b6682e3c24d6fbf382913ba7",
  "receipt": {
    "to": null,
    "from": "0x51fc0830DBe3A446701E7897F32C89A3B04e5a0a",
    "contractAddress": "0xf864406E4bb1e159e2DC5C1C98364edBfe762D13",
    "transactionIndex": 0,
    "gasUsed": "709744",
    "logsBloom": "0x
    "blockHash": "0x6194b99ba3deac170fae251c6bf3244e766db8989a6273f0894f7ad601c80e74",
    "transactionHash": "0xd7f27965f33ba2b0ad3488667fc6e9873fc33b95b6682e3c24d6fbf382913ba7",
    "logs": [],
    "blockNumber": 36737644,
    "cumulativeGasUsed": "709744",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x125629732C21A403Ae1eFf159467971ee01470a6",
    "0xc76dFb89fF298145b417d221B2c747d84952e01d",
    8,
    "100000000",
    {
      "lowerThresholdInBase": "0",
      "fixedPriceInBase": "0"
    },
    {
      "lowerThresholdInBase": "0",
      "fixedPriceInBase": "0"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8af547c39a02ffb51b8ffe57ef1f178f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceFeed1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sourceFeed2\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_targetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_baseCurrencyUnit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lowerThresholdInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceInBase\",\"type\":\"uint256\"}],\"internalType\":\"struct ThresholdingUtils.ThresholdConfig\",\"name\":\"_primaryThreshold\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lowerThresholdInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceInBase\",\"type\":\"uint256\"}],\"internalType\":\"struct ThresholdingUtils.ThresholdConfig\",\"name\":\"_secondaryThreshold\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PriceIsStale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINLINK_HEARTBEAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrencyUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heartbeatStaleTimeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerThresholdInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceInBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerThresholdInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceInBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sourceFeed1\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sourceFeed2\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements AggregatorV3Interface to mimic being a Chainlink price feed      Uses the same composition logic as RedstoneChainlinkCompositeWrapperWithThresholding\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_baseCurrencyUnit\":\"Base currency unit for price normalization\",\"_primaryThreshold\":\"Primary threshold configuration for feed1\",\"_secondaryThreshold\":\"Secondary threshold configuration for feed2\",\"_sourceFeed1\":\"Address of the first source Chainlink price feed\",\"_sourceFeed2\":\"Address of the second source Chainlink price feed\",\"_targetDecimals\":\"Target decimal precision for composite price\"}},\"description()\":{\"returns\":{\"_0\":\"Description string\"}},\"getRoundData(uint80)\":{\"params\":{\"_roundId\":\"The round ID to retrieve data for\"},\"returns\":{\"answer\":\"The composite price with target decimals\",\"answeredInRound\":\"The round in which the answer was computed\",\"roundId\":\"The round ID\",\"startedAt\":\"The timestamp when the round started\",\"updatedAt\":\"The timestamp when the round was updated\"}},\"latestRoundData()\":{\"returns\":{\"answer\":\"The composite price with target decimals\",\"answeredInRound\":\"The round in which the answer was computed\",\"roundId\":\"The round ID\",\"startedAt\":\"The timestamp when the round started\",\"updatedAt\":\"The timestamp when the round was updated\"}},\"version()\":{\"returns\":{\"_0\":\"Version number\"}}},\"title\":\"ChainlinkCompositeWrapper\",\"version\":1},\"userdoc\":{\"errors\":{\"PriceIsStale()\":[{\"notice\":\"Error thrown when price is stale\"}]},\"kind\":\"user\",\"methods\":{\"CHAINLINK_HEARTBEAT()\":{\"notice\":\"Chainlink heartbeat period (24 hours)\"},\"baseCurrencyUnit()\":{\"notice\":\"Base currency unit for price normalization (same as Redstone wrapper)\"},\"constructor\":{\"notice\":\"Constructor to initialize the composite wrapper\"},\"decimals()\":{\"notice\":\"Target decimals for composite price (same as base currency unit decimals)\"},\"description()\":{\"notice\":\"Returns the description of the composite feed\"},\"getRoundData(uint80)\":{\"notice\":\"Gets data for a specific round\"},\"heartbeatStaleTimeLimit()\":{\"notice\":\"Heartbeat stale time limit (additional buffer)\"},\"latestRoundData()\":{\"notice\":\"Gets data for the latest round\"},\"primaryThreshold()\":{\"notice\":\"Primary threshold configuration for sourceFeed1\"},\"secondaryThreshold()\":{\"notice\":\"Secondary threshold configuration for sourceFeed2\"},\"sourceFeed1()\":{\"notice\":\"First source Chainlink price feed\"},\"sourceFeed2()\":{\"notice\":\"Second source Chainlink price feed\"},\"version()\":{\"notice\":\"Returns the version of the original feed\"}},\"notice\":\"Composes prices from two Chainlink price feeds with thresholding\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle_aggregator/helper/ChainlinkCompositeWrapper.sol\":\"ChainlinkCompositeWrapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/oracle_aggregator/helper/ChainlinkCompositeWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interface/chainlink/IAggregatorV3Interface.sol\\\";\\nimport \\\"../wrapper/ThresholdingUtils.sol\\\";\\n\\n/**\\n * @title ChainlinkCompositeWrapper\\n * @notice Composes prices from two Chainlink price feeds with thresholding\\n * @dev Implements AggregatorV3Interface to mimic being a Chainlink price feed\\n *      Uses the same composition logic as RedstoneChainlinkCompositeWrapperWithThresholding\\n */\\ncontract ChainlinkCompositeWrapper is AggregatorV3Interface, ThresholdingUtils {\\n    /// @notice First source Chainlink price feed\\n    AggregatorV3Interface public immutable sourceFeed1;\\n\\n    /// @notice Second source Chainlink price feed\\n    AggregatorV3Interface public immutable sourceFeed2;\\n\\n    /// @notice Target decimals for composite price (same as base currency unit decimals)\\n    uint8 public immutable override decimals;\\n\\n    /// @notice Base currency unit for price normalization (same as Redstone wrapper)\\n    uint256 public immutable baseCurrencyUnit;\\n\\n    /// @notice Primary threshold configuration for sourceFeed1\\n    ThresholdConfig public primaryThreshold;\\n\\n    /// @notice Secondary threshold configuration for sourceFeed2\\n    ThresholdConfig public secondaryThreshold;\\n\\n    /// @notice Chainlink heartbeat period (24 hours)\\n    uint256 public constant CHAINLINK_HEARTBEAT = 86400;\\n\\n    /// @notice Heartbeat stale time limit (additional buffer)\\n    uint256 public constant heartbeatStaleTimeLimit = 3600; // 1 hour\\n\\n    /**\\n     * @notice Error thrown when price is stale\\n     */\\n    error PriceIsStale();\\n\\n    /**\\n     * @notice Constructor to initialize the composite wrapper\\n     * @param _sourceFeed1 Address of the first source Chainlink price feed\\n     * @param _sourceFeed2 Address of the second source Chainlink price feed\\n     * @param _targetDecimals Target decimal precision for composite price\\n     * @param _baseCurrencyUnit Base currency unit for price normalization\\n     * @param _primaryThreshold Primary threshold configuration for feed1\\n     * @param _secondaryThreshold Secondary threshold configuration for feed2\\n     */\\n    constructor(\\n        address _sourceFeed1,\\n        address _sourceFeed2,\\n        uint8 _targetDecimals,\\n        uint256 _baseCurrencyUnit,\\n        ThresholdConfig memory _primaryThreshold,\\n        ThresholdConfig memory _secondaryThreshold\\n    ) {\\n        sourceFeed1 = AggregatorV3Interface(_sourceFeed1);\\n        sourceFeed2 = AggregatorV3Interface(_sourceFeed2);\\n        decimals = _targetDecimals;\\n        baseCurrencyUnit = _baseCurrencyUnit;\\n        primaryThreshold = _primaryThreshold;\\n        secondaryThreshold = _secondaryThreshold;\\n    }\\n\\n    /**\\n     * @notice Returns the description of the composite feed\\n     * @return Description string\\n     */\\n    function description() external view override returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    sourceFeed1.description(),\\n                    \\\" x \\\",\\n                    sourceFeed2.description(),\\n                    \\\" (Composite)\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the version of the original feed\\n     * @return Version number\\n     */\\n    function version() external pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Gets data for a specific round\\n     * @param _roundId The round ID to retrieve data for\\n     * @return roundId The round ID\\n     * @return answer The composite price with target decimals\\n     * @return startedAt The timestamp when the round started\\n     * @return updatedAt The timestamp when the round was updated\\n     * @return answeredInRound The round in which the answer was computed\\n     */\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        // Get data from both feeds for the same round\\n        (\\n            ,\\n            // roundId1,\\n            int256 answer1,\\n            uint256 startedAt1,\\n            uint256 updatedAt1,\\n            uint80 answeredInRound1\\n        ) = sourceFeed1.getRoundData(_roundId);\\n\\n        (\\n            ,\\n            // roundId2,\\n            int256 answer2,\\n            uint256 startedAt2,\\n            uint256 updatedAt2,\\n\\n        ) = // answeredInRound2\\n            sourceFeed2.getRoundData(_roundId);\\n\\n        // Use the latest timestamp from both feeds\\n        uint256 latestUpdatedAt = updatedAt1 > updatedAt2\\n            ? updatedAt1\\n            : updatedAt2;\\n        uint256 latestStartedAt = startedAt1 > startedAt2\\n            ? startedAt1\\n            : startedAt2;\\n\\n        // Calculate composite price using the same logic as Redstone wrapper\\n        uint256 compositePrice = _calculateCompositePrice(answer1, answer2);\\n\\n        return (\\n            _roundId,\\n            int256(compositePrice),\\n            latestStartedAt,\\n            latestUpdatedAt,\\n            answeredInRound1 // Use the first feed's answeredInRound\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets data for the latest round\\n     * @return roundId The round ID\\n     * @return answer The composite price with target decimals\\n     * @return startedAt The timestamp when the round started\\n     * @return updatedAt The timestamp when the round was updated\\n     * @return answeredInRound The round in which the answer was computed\\n     */\\n    function latestRoundData()\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        // Get latest data from both feeds\\n        (\\n            uint80 roundId1,\\n            int256 answer1,\\n            uint256 startedAt1,\\n            uint256 updatedAt1,\\n            uint80 answeredInRound1\\n        ) = sourceFeed1.latestRoundData();\\n\\n        (\\n            ,\\n            // roundId2,\\n            int256 answer2,\\n            uint256 startedAt2,\\n            uint256 updatedAt2,\\n\\n        ) = // answeredInRound2\\n            sourceFeed2.latestRoundData();\\n\\n        // Check if prices are stale\\n        if (\\n            updatedAt1 + CHAINLINK_HEARTBEAT + heartbeatStaleTimeLimit <=\\n            block.timestamp ||\\n            updatedAt2 + CHAINLINK_HEARTBEAT + heartbeatStaleTimeLimit <=\\n            block.timestamp\\n        ) {\\n            revert PriceIsStale();\\n        }\\n\\n        // Use the latest timestamp from both feeds\\n        uint256 latestUpdatedAt = updatedAt1 > updatedAt2\\n            ? updatedAt1\\n            : updatedAt2;\\n        uint256 latestStartedAt = startedAt1 > startedAt2\\n            ? startedAt1\\n            : startedAt2;\\n\\n        // Calculate composite price using the same logic as Redstone wrapper\\n        uint256 compositePrice = _calculateCompositePrice(answer1, answer2);\\n\\n        return (\\n            roundId1, // Use the first feed's round ID\\n            int256(compositePrice),\\n            latestStartedAt,\\n            latestUpdatedAt,\\n            answeredInRound1 // Use the first feed's answeredInRound\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate composite price using the same logic as Redstone wrapper\\n     * @param answer1 Price from first feed\\n     * @param answer2 Price from second feed\\n     * @return Composite price in target decimals\\n     */\\n    function _calculateCompositePrice(\\n        int256 answer1,\\n        int256 answer2\\n    ) internal view returns (uint256) {\\n        // Convert negative answers to 0 (same as Redstone wrapper)\\n        uint256 chainlinkPrice1 = answer1 > 0 ? uint256(answer1) : 0;\\n        uint256 chainlinkPrice2 = answer2 > 0 ? uint256(answer2) : 0;\\n\\n        // Convert both prices to base currency unit first\\n        uint256 priceInBase1 = _convertToBaseCurrencyUnit(\\n            chainlinkPrice1,\\n            sourceFeed1.decimals()\\n        );\\n        uint256 priceInBase2 = _convertToBaseCurrencyUnit(\\n            chainlinkPrice2,\\n            sourceFeed2.decimals()\\n        );\\n\\n        // Apply thresholding to prices in base currency unit if specified\\n        if (primaryThreshold.lowerThresholdInBase > 0) {\\n            priceInBase1 = _applyThreshold(priceInBase1, primaryThreshold);\\n        }\\n        if (secondaryThreshold.lowerThresholdInBase > 0) {\\n            priceInBase2 = _applyThreshold(priceInBase2, secondaryThreshold);\\n        }\\n\\n        // Calculate composite price: (price1 * price2) / baseCurrencyUnit\\n        return (priceInBase1 * priceInBase2) / baseCurrencyUnit;\\n    }\\n\\n    /**\\n     * @notice Convert price to base currency unit (same logic as Redstone wrapper)\\n     * @param price Price in source decimals\\n     * @param sourceDecimals Decimal precision of the source price\\n     * @return Price in base currency unit\\n     */\\n    function _convertToBaseCurrencyUnit(\\n        uint256 price,\\n        uint8 sourceDecimals\\n    ) internal view returns (uint256) {\\n        if (sourceDecimals > decimals) {\\n            // Scale down to target decimals\\n            return price / (10 ** (sourceDecimals - decimals));\\n        } else if (sourceDecimals < decimals) {\\n            // Scale up to target decimals\\n            return price * (10 ** (decimals - sourceDecimals));\\n        }\\n        return price;\\n    }\\n}\\n\",\"keccak256\":\"0x37c02c694a248e0920bf7771c379cf75c3fa89e3c8e24617cf4e2f657d80b738\",\"license\":\"MIT\"},\"contracts/oracle_aggregator/interface/chainlink/IAggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x114f2a4b1de25cf837f38b10c4c1bca07d53587f2367e37c6f310a953fd20bd4\",\"license\":\"MIT\"},\"contracts/oracle_aggregator/wrapper/ThresholdingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nabstract contract ThresholdingUtils {\\n    /* Types */\\n    struct ThresholdConfig {\\n        /// @notice The minimum price after which thresholding is applied. Not a price cap, but a trigger point.\\n        /// @dev If lowerThresholdInBase == fixedPriceInBase: Acts as an upper threshold\\n        /// @dev If lowerThresholdInBase < fixedPriceInBase: Acts as \\\"price rounding up\\\" (e.g. if USDC > 0.997 then round to 1)\\n        /// @dev If lowerThresholdInBase > fixedPriceInBase: Acts as \\\"price rounding down\\\" (e.g. if USDC > 1.003 then round to 1)\\n        uint256 lowerThresholdInBase;\\n        uint256 fixedPriceInBase;\\n    }\\n\\n    /**\\n     * @notice Apply threshold to a price value\\n     * @param priceInBase The price to check against threshold\\n     * @param thresholdConfig The threshold configuration\\n     * @return The original price or fixed price based on threshold\\n     */\\n    function _applyThreshold(\\n        uint256 priceInBase,\\n        ThresholdConfig memory thresholdConfig\\n    ) internal pure returns (uint256) {\\n        if (priceInBase > thresholdConfig.lowerThresholdInBase) {\\n            return thresholdConfig.fixedPriceInBase;\\n        }\\n        return priceInBase;\\n    }\\n}\\n\",\"keccak256\":\"0x2c3bb0f98af6761a8de5660cd7c9516880936bf5bfb1070b2065ab958476bb00\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101003461013057610d3c3881900390601f8201601f19168301906001600160401b038211848310176101355782916040528339810190610100818303126101305761004a8161014b565b6100566020830161014b565b9160408101519360ff8516850361013057602094859361008b60608501519360c0610084826080890161015f565b960161015f565b6001600160a01b03918216608052951660a05260c05260e0528051600055015160015580516002550151600355604051610ba49081610198823960805181818160d90152818161038e0152818161051701528181610690015261092f015260a051818181610120015281816103da015281816105530152818161072e015261097b015260c0518181816106d90152610ae6015260e0518181816102f801526109df0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361013057565b919082604091031261013057604080519081016001600160401b0381118282101761013557604052602080829480518452015191015256fe6080604081815260048036101561001557600080fd5b600092833560e01c9081631e10e31d1461071a575080632ecac6fc146106fd578063313ce567146106bf578063409fec041461067b57806354fd4d501461065f5780637284e416146104e65780639235f197146104c1578063928efc621461049f5780639a6fc8f51461033d5780639a999d451461031f578063f3bddde1146102e05763feaf968c146100a757600080fd5b346102dc57826003193601126102dc578151633fabe5a360e21b8082526001600160a01b0394919260a09291838583817f00000000000000000000000000000000000000000000000000000000000000008b165afa9384156102d257839584938593869287986102a1575b508390828b51809d819382527f0000000000000000000000000000000000000000000000000000000000000000165afa90811561029757869a8794889361025d575b5050620151808084018085116102375762015f909081860180911161024a57421091821592610206575b50506101f85750916101af93916101e498999a938082116000146101f05750955b50808211156101e85750926108f0565b955169ffffffffffffffffffff95861681526020810196909652604086015260608501529091166080830152819060a0820190565b0390f35b9050926108f0565b90509561019f565b89516342bc305b60e11b8152fd5b8401915081841161023757830180911161022457421015388061017e565b634e487b7160e01b885260118252602488fd5b634e487b7160e01b895260118352602489fd5b634e487b7160e01b8a526011845260248afd5b919b509150610282929350803d10610290575b61027a81836107b2565b81019061085c565b50919a909392503880610154565b503d610270565b89513d88823e3d90fd5b925096509350818097506102c29293503d84116102905761027a81836107b2565b9398939792959194909290610112565b86513d85823e3d90fd5b8280fd5b50503461031b578160031936011261031b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5080fd5b50503461031b578160031936011261031b5760209051620151808152f35b50346102dc5760203660031901126102dc5780359069ffffffffffffffffffff82169384830361049c578351639a6fc8f560e01b808252838201879052906001600160a01b039060a09081816024817f000000000000000000000000000000000000000000000000000000000000000087165afa95861561045f578594869487938899610469575b508492916024918c519d8e94859384528301527f0000000000000000000000000000000000000000000000000000000000000000165afa801561045f57916101af93916101e498999a93879488938992610436575b5050808211156101f057509550808211156101e85750926108f0565b91509194506104519250803d106102905761027a81836107b2565b50925093909391388061041a565b88513d87823e3d90fd5b90985061048c9196506024955084809394503d84116102905761027a81836107b2565b9a929891975094939092506103c5565b80fd5b82843461049c578060031936011261049c575460015482519182526020820152f35b82843461049c578060031936011261049c575060025460035482519182526020820152f35b50346102dc57826003193601126102dc578151633942720b60e11b80825290916001600160a01b03918591828582817f000000000000000000000000000000000000000000000000000000000000000088165afa9485156102d2578395610643575b5085518094819382527f0000000000000000000000000000000000000000000000000000000000000000165afa938415610638578094610613575b50508151906105e9602f83602096876105a5818401968781519384920161075d565b8201620103c160ed1b898201526105c5825180938b60238501910161075d565b016b2028436f6d706f736974652960a01b602382015203600f8101855201836107b2565b610605835194859381855251928380928601528585019061075d565b601f01601f19168101030190f35b6106309294503d8091833e61062881836107b2565b8101906107d4565b913880610583565b8351903d90823e3d90fd5b6106589195503d8085833e61062881836107b2565b9338610548565b50503461031b578160031936011261031b576020905160018152f35b50503461031b578160031936011261031b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461031b578160031936011261031b576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50503461031b578160031936011261031b5760209051610e108152f35b84903461031b578160031936011261031b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60005b8381106107705750506000910152565b8181015183820152602001610760565b6040810190811067ffffffffffffffff82111761079c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761079c57604052565b60208183031261084057805167ffffffffffffffff9182821161084057019082601f8301121561084057815190811161079c576040519261081f601f8301601f1916602001856107b2565b818452602082840101116108405761083d916020808501910161075d565b90565b600080fd5b519069ffffffffffffffffffff8216820361084057565b908160a09103126108405761087081610845565b9160208201519160408101519161083d608060608401519301610845565b90816020910312610840575160ff811681036108405790565b818102929181159184041417156108ba57565b634e487b7160e01b600052601160045260246000fd5b81156108da570490565b634e487b7160e01b600052601260045260246000fd5b600080821315610ab75750905b600080821315610ab057505b6040805163313ce56760e01b80825260209490936001600160a01b0392909186826004817f000000000000000000000000000000000000000000000000000000000000000088165afa918215610aa5579161096e918893600092610a8d575b50610ae4565b94600485518095819382527f0000000000000000000000000000000000000000000000000000000000000000165afa918215610a82576109dd949261083d9694926109c092600092610a535750610ae4565b9260005480610a2d575b506002549182610a04575b5050506108a7565b7f0000000000000000000000000000000000000000000000000000000000000000906108d0565b90610a249394915192610a1684610780565b835260035490830152610b58565b903880806109d5565b610a4c9193835191610a3e83610780565b825260015485830152610b58565b91386109ca565b610a74919250863d8811610a7b575b610a6c81836107b2565b81019061088e565b9038610968565b503d610a62565b83513d6000823e3d90fd5b610a74919250843d8611610a7b57610a6c81836107b2565b85513d6000823e3d90fd5b9050610909565b9050906108fd565b9060ff8091169116039060ff82116108ba57565b60ff16604d81116108ba57600a0a90565b7f000000000000000000000000000000000000000000000000000000000000000060ff811660ff8416818111600014610b34575050610b29610b2e9161083d94610abf565b610ad3565b906108d0565b93929310610b4157505090565b610b2961083d9392610b5292610abf565b906108a7565b9080518211610b65575090565b6020915001519056fea264697066735822122006237dfe1c13815834378501b9b7d116b5055f5a4bb6a522c49a2c434fc59f0e64736f6c63430008140033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c9081631e10e31d1461071a575080632ecac6fc146106fd578063313ce567146106bf578063409fec041461067b57806354fd4d501461065f5780637284e416146104e65780639235f197146104c1578063928efc621461049f5780639a6fc8f51461033d5780639a999d451461031f578063f3bddde1146102e05763feaf968c146100a757600080fd5b346102dc57826003193601126102dc578151633fabe5a360e21b8082526001600160a01b0394919260a09291838583817f00000000000000000000000000000000000000000000000000000000000000008b165afa9384156102d257839584938593869287986102a1575b508390828b51809d819382527f0000000000000000000000000000000000000000000000000000000000000000165afa90811561029757869a8794889361025d575b5050620151808084018085116102375762015f909081860180911161024a57421091821592610206575b50506101f85750916101af93916101e498999a938082116000146101f05750955b50808211156101e85750926108f0565b955169ffffffffffffffffffff95861681526020810196909652604086015260608501529091166080830152819060a0820190565b0390f35b9050926108f0565b90509561019f565b89516342bc305b60e11b8152fd5b8401915081841161023757830180911161022457421015388061017e565b634e487b7160e01b885260118252602488fd5b634e487b7160e01b895260118352602489fd5b634e487b7160e01b8a526011845260248afd5b919b509150610282929350803d10610290575b61027a81836107b2565b81019061085c565b50919a909392503880610154565b503d610270565b89513d88823e3d90fd5b925096509350818097506102c29293503d84116102905761027a81836107b2565b9398939792959194909290610112565b86513d85823e3d90fd5b8280fd5b50503461031b578160031936011261031b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5080fd5b50503461031b578160031936011261031b5760209051620151808152f35b50346102dc5760203660031901126102dc5780359069ffffffffffffffffffff82169384830361049c578351639a6fc8f560e01b808252838201879052906001600160a01b039060a09081816024817f000000000000000000000000000000000000000000000000000000000000000087165afa95861561045f578594869487938899610469575b508492916024918c519d8e94859384528301527f0000000000000000000000000000000000000000000000000000000000000000165afa801561045f57916101af93916101e498999a93879488938992610436575b5050808211156101f057509550808211156101e85750926108f0565b91509194506104519250803d106102905761027a81836107b2565b50925093909391388061041a565b88513d87823e3d90fd5b90985061048c9196506024955084809394503d84116102905761027a81836107b2565b9a929891975094939092506103c5565b80fd5b82843461049c578060031936011261049c575460015482519182526020820152f35b82843461049c578060031936011261049c575060025460035482519182526020820152f35b50346102dc57826003193601126102dc578151633942720b60e11b80825290916001600160a01b03918591828582817f000000000000000000000000000000000000000000000000000000000000000088165afa9485156102d2578395610643575b5085518094819382527f0000000000000000000000000000000000000000000000000000000000000000165afa938415610638578094610613575b50508151906105e9602f83602096876105a5818401968781519384920161075d565b8201620103c160ed1b898201526105c5825180938b60238501910161075d565b016b2028436f6d706f736974652960a01b602382015203600f8101855201836107b2565b610605835194859381855251928380928601528585019061075d565b601f01601f19168101030190f35b6106309294503d8091833e61062881836107b2565b8101906107d4565b913880610583565b8351903d90823e3d90fd5b6106589195503d8085833e61062881836107b2565b9338610548565b50503461031b578160031936011261031b576020905160018152f35b50503461031b578160031936011261031b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461031b578160031936011261031b576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50503461031b578160031936011261031b5760209051610e108152f35b84903461031b578160031936011261031b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60005b8381106107705750506000910152565b8181015183820152602001610760565b6040810190811067ffffffffffffffff82111761079c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761079c57604052565b60208183031261084057805167ffffffffffffffff9182821161084057019082601f8301121561084057815190811161079c576040519261081f601f8301601f1916602001856107b2565b818452602082840101116108405761083d916020808501910161075d565b90565b600080fd5b519069ffffffffffffffffffff8216820361084057565b908160a09103126108405761087081610845565b9160208201519160408101519161083d608060608401519301610845565b90816020910312610840575160ff811681036108405790565b818102929181159184041417156108ba57565b634e487b7160e01b600052601160045260246000fd5b81156108da570490565b634e487b7160e01b600052601260045260246000fd5b600080821315610ab75750905b600080821315610ab057505b6040805163313ce56760e01b80825260209490936001600160a01b0392909186826004817f000000000000000000000000000000000000000000000000000000000000000088165afa918215610aa5579161096e918893600092610a8d575b50610ae4565b94600485518095819382527f0000000000000000000000000000000000000000000000000000000000000000165afa918215610a82576109dd949261083d9694926109c092600092610a535750610ae4565b9260005480610a2d575b506002549182610a04575b5050506108a7565b7f0000000000000000000000000000000000000000000000000000000000000000906108d0565b90610a249394915192610a1684610780565b835260035490830152610b58565b903880806109d5565b610a4c9193835191610a3e83610780565b825260015485830152610b58565b91386109ca565b610a74919250863d8811610a7b575b610a6c81836107b2565b81019061088e565b9038610968565b503d610a62565b83513d6000823e3d90fd5b610a74919250843d8611610a7b57610a6c81836107b2565b85513d6000823e3d90fd5b9050610909565b9050906108fd565b9060ff8091169116039060ff82116108ba57565b60ff16604d81116108ba57600a0a90565b7f000000000000000000000000000000000000000000000000000000000000000060ff811660ff8416818111600014610b34575050610b29610b2e9161083d94610abf565b610ad3565b906108d0565b93929310610b4157505090565b610b2961083d9392610b5292610abf565b906108a7565b9080518211610b65575090565b6020915001519056fea264697066735822122006237dfe1c13815834378501b9b7d116b5055f5a4bb6a522c49a2c434fc59f0e64736f6c63430008140033",
  "devdoc": {
    "details": "Implements AggregatorV3Interface to mimic being a Chainlink price feed      Uses the same composition logic as RedstoneChainlinkCompositeWrapperWithThresholding",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_baseCurrencyUnit": "Base currency unit for price normalization",
          "_primaryThreshold": "Primary threshold configuration for feed1",
          "_secondaryThreshold": "Secondary threshold configuration for feed2",
          "_sourceFeed1": "Address of the first source Chainlink price feed",
          "_sourceFeed2": "Address of the second source Chainlink price feed",
          "_targetDecimals": "Target decimal precision for composite price"
        }
      },
      "description()": {
        "returns": {
          "_0": "Description string"
        }
      },
      "getRoundData(uint80)": {
        "params": {
          "_roundId": "The round ID to retrieve data for"
        },
        "returns": {
          "answer": "The composite price with target decimals",
          "answeredInRound": "The round in which the answer was computed",
          "roundId": "The round ID",
          "startedAt": "The timestamp when the round started",
          "updatedAt": "The timestamp when the round was updated"
        }
      },
      "latestRoundData()": {
        "returns": {
          "answer": "The composite price with target decimals",
          "answeredInRound": "The round in which the answer was computed",
          "roundId": "The round ID",
          "startedAt": "The timestamp when the round started",
          "updatedAt": "The timestamp when the round was updated"
        }
      },
      "version()": {
        "returns": {
          "_0": "Version number"
        }
      }
    },
    "title": "ChainlinkCompositeWrapper",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PriceIsStale()": [
        {
          "notice": "Error thrown when price is stale"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "CHAINLINK_HEARTBEAT()": {
        "notice": "Chainlink heartbeat period (24 hours)"
      },
      "baseCurrencyUnit()": {
        "notice": "Base currency unit for price normalization (same as Redstone wrapper)"
      },
      "constructor": {
        "notice": "Constructor to initialize the composite wrapper"
      },
      "decimals()": {
        "notice": "Target decimals for composite price (same as base currency unit decimals)"
      },
      "description()": {
        "notice": "Returns the description of the composite feed"
      },
      "getRoundData(uint80)": {
        "notice": "Gets data for a specific round"
      },
      "heartbeatStaleTimeLimit()": {
        "notice": "Heartbeat stale time limit (additional buffer)"
      },
      "latestRoundData()": {
        "notice": "Gets data for the latest round"
      },
      "primaryThreshold()": {
        "notice": "Primary threshold configuration for sourceFeed1"
      },
      "secondaryThreshold()": {
        "notice": "Secondary threshold configuration for sourceFeed2"
      },
      "sourceFeed1()": {
        "notice": "First source Chainlink price feed"
      },
      "sourceFeed2()": {
        "notice": "Second source Chainlink price feed"
      },
      "version()": {
        "notice": "Returns the version of the original feed"
      }
    },
    "notice": "Composes prices from two Chainlink price feeds with thresholding",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27,
        "contract": "contracts/oracle_aggregator/helper/ChainlinkCompositeWrapper.sol:ChainlinkCompositeWrapper",
        "label": "primaryThreshold",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(ThresholdConfig)480_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/oracle_aggregator/helper/ChainlinkCompositeWrapper.sol:ChainlinkCompositeWrapper",
        "label": "secondaryThreshold",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(ThresholdConfig)480_storage"
      }
    ],
    "types": {
      "t_struct(ThresholdConfig)480_storage": {
        "encoding": "inplace",
        "label": "struct ThresholdingUtils.ThresholdConfig",
        "members": [
          {
            "astId": 477,
            "contract": "contracts/oracle_aggregator/helper/ChainlinkCompositeWrapper.sol:ChainlinkCompositeWrapper",
            "label": "lowerThresholdInBase",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 479,
            "contract": "contracts/oracle_aggregator/helper/ChainlinkCompositeWrapper.sol:ChainlinkCompositeWrapper",
            "label": "fixedPriceInBase",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}