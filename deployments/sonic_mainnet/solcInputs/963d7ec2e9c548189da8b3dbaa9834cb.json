{
  "language": "Solidity",
  "sources": {
    "contracts/oracle_aggregator/helper/ChainlinkDecimalConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"../interface/chainlink/IAggregatorV3Interface.sol\";\n\n/**\n * @title ChainlinkDecimalConverter\n * @notice Converts between Chainlink price feeds with different decimal precisions\n * @dev Implements AggregatorV3Interface to mimic being a Chainlink price feed\n */\ncontract ChainlinkDecimalConverter is AggregatorV3Interface {\n    /// @notice Original Chainlink price feed\n    AggregatorV3Interface public immutable sourceFeed;\n\n    /// @notice Original decimals from the source feed\n    uint8 public immutable sourceDecimals;\n\n    /// @notice Target decimals for price conversion\n    uint8 public immutable override decimals;\n\n    /// @notice Scaling factor to convert between source and target decimals\n    int256 private immutable scalingFactor;\n\n    /**\n     * @notice Error thrown when target decimals exceed source decimals\n     */\n    error InvalidDecimalsUpscaleNotSupported();\n\n    /**\n     * @notice Constructor to initialize the decimal converter\n     * @param _sourceFeed Address of the source Chainlink price feed\n     * @param _targetDecimals Target decimal precision (must be less than or equal to source decimals)\n     */\n    constructor(address _sourceFeed, uint8 _targetDecimals) {\n        sourceFeed = AggregatorV3Interface(_sourceFeed);\n        sourceDecimals = sourceFeed.decimals();\n        decimals = _targetDecimals;\n\n        // We only support downscaling (reducing precision), not upscaling\n        if (_targetDecimals > sourceDecimals) {\n            revert InvalidDecimalsUpscaleNotSupported();\n        }\n\n        // Calculate the scaling factor to convert from source to target decimals\n        uint8 decimalDifference = sourceDecimals - _targetDecimals;\n        scalingFactor = int256(10 ** decimalDifference);\n    }\n\n    /**\n     * @notice Returns the description of the original feed\n     * @return Description string\n     */\n    function description() external view override returns (string memory) {\n        return sourceFeed.description();\n    }\n\n    /**\n     * @notice Returns the version of the original feed\n     * @return Version number\n     */\n    function version() external view override returns (uint256) {\n        return sourceFeed.version();\n    }\n\n    /**\n     * @notice Gets data for a specific round\n     * @param _roundId The round ID to retrieve data for\n     * @return roundId The round ID\n     * @return answer The price with adjusted decimals\n     * @return startedAt The timestamp when the round started\n     * @return updatedAt The timestamp when the round was updated\n     * @return answeredInRound The round in which the answer was computed\n     */\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        (roundId, answer, startedAt, updatedAt, answeredInRound) = sourceFeed\n            .getRoundData(_roundId);\n        answer = answer / scalingFactor;\n    }\n\n    /**\n     * @notice Gets data for the latest round\n     * @return roundId The round ID\n     * @return answer The price with adjusted decimals\n     * @return startedAt The timestamp when the round started\n     * @return updatedAt The timestamp when the round was updated\n     * @return answeredInRound The round in which the answer was computed\n     */\n    function latestRoundData()\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        (roundId, answer, startedAt, updatedAt, answeredInRound) = sourceFeed\n            .latestRoundData();\n        answer = answer / scalingFactor;\n    }\n}\n"
    },
    "contracts/oracle_aggregator/interface/chainlink/IAggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}