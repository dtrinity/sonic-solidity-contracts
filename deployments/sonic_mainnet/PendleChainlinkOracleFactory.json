{
  "address": "0x9bdb500000Fd79f7592E01C759facba0F8ada973",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pyLpOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OracleAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "cardinalityRequired",
          "type": "uint32"
        }
      ],
      "name": "OracleIncreaseCardinalityRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleOldestObservationNotSatisfied",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "enum PendleOracleType",
          "name": "baseOracleType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "oracleId",
          "type": "bytes32"
        }
      ],
      "name": "OracleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "enum PendleOracleType",
          "name": "baseOracleType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quoteOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "oracleId",
          "type": "bytes32"
        }
      ],
      "name": "OracleWithQuoteCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        }
      ],
      "name": "checkMarketOracleState",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        },
        {
          "internalType": "enum PendleOracleType",
          "name": "baseOracleType",
          "type": "uint8"
        }
      ],
      "name": "createOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        },
        {
          "internalType": "enum PendleOracleType",
          "name": "baseOracleType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "quoteOracle",
          "type": "address"
        }
      ],
      "name": "createOracleWithQuote",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        },
        {
          "internalType": "enum PendleOracleType",
          "name": "baseOracleType",
          "type": "uint8"
        }
      ],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        },
        {
          "internalType": "enum PendleOracleType",
          "name": "baseOracleType",
          "type": "uint8"
        }
      ],
      "name": "getOracleId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        },
        {
          "internalType": "enum PendleOracleType",
          "name": "baseOracleType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "quoteOracle",
          "type": "address"
        }
      ],
      "name": "getOracleWithQuote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        },
        {
          "internalType": "enum PendleOracleType",
          "name": "baseOracleType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "quoteOracle",
          "type": "address"
        }
      ],
      "name": "getOracleWithQuoteId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyLpOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x636730b55dff64e3553b162ec74fcdb99ec4faa16cc613db2c1607a72c9cbc20",
  "receipt": {
    "to": null,
    "from": "0x51fc0830DBe3A446701E7897F32C89A3B04e5a0a",
    "contractAddress": "0x9bdb500000Fd79f7592E01C759facba0F8ada973",
    "transactionIndex": 0,
    "gasUsed": "3998373",
    "logsBloom": "0x
    "blockHash": "0xa087654e840f1165d36c78884f71584d937d8a641dc7e7e1ac2e5f40a5db7fe5",
    "transactionHash": "0x636730b55dff64e3553b162ec74fcdb99ec4faa16cc613db2c1607a72c9cbc20",
    "logs": [],
    "blockNumber": 36719289,
    "cumulativeGasUsed": "3998373",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9a9Fa8338dd5E5B2188006f1Cd2Ef26d921650C2"
  ],
  "numDeployments": 1,
  "solcInputHash": "77e30285bb7d67ac93581c6b2c933dde",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pyLpOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OracleAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"cardinalityRequired\",\"type\":\"uint32\"}],\"name\":\"OracleIncreaseCardinalityRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleOldestObservationNotSatisfied\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"enum PendleOracleType\",\"name\":\"baseOracleType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oracleId\",\"type\":\"bytes32\"}],\"name\":\"OracleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"enum PendleOracleType\",\"name\":\"baseOracleType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oracleId\",\"type\":\"bytes32\"}],\"name\":\"OracleWithQuoteCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"}],\"name\":\"checkMarketOracleState\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"internalType\":\"enum PendleOracleType\",\"name\":\"baseOracleType\",\"type\":\"uint8\"}],\"name\":\"createOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"internalType\":\"enum PendleOracleType\",\"name\":\"baseOracleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"quoteOracle\",\"type\":\"address\"}],\"name\":\"createOracleWithQuote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"internalType\":\"enum PendleOracleType\",\"name\":\"baseOracleType\",\"type\":\"uint8\"}],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"internalType\":\"enum PendleOracleType\",\"name\":\"baseOracleType\",\"type\":\"uint8\"}],\"name\":\"getOracleId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"internalType\":\"enum PendleOracleType\",\"name\":\"baseOracleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"quoteOracle\",\"type\":\"address\"}],\"name\":\"getOracleWithQuote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"internalType\":\"enum PendleOracleType\",\"name\":\"baseOracleType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"quoteOracle\",\"type\":\"address\"}],\"name\":\"getOracleWithQuoteId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyLpOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createOracleWithQuote(address,uint32,uint8,address)\":{\"details\":\"quoteOracle must has Chainlink-compatible interface\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracleFactory.sol\":\"PendleChainlinkOracleFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@pendle/core-v2/contracts/core/Market/MarketMathCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/math/PMath.sol\\\";\\nimport \\\"../libraries/math/LogExpMath.sol\\\";\\n\\nimport \\\"../StandardizedYield/PYIndex.sol\\\";\\nimport \\\"../libraries/MiniHelpers.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nstruct MarketState {\\n    int256 totalPt;\\n    int256 totalSy;\\n    int256 totalLp;\\n    address treasury;\\n    /// immutable variables ///\\n    int256 scalarRoot;\\n    uint256 expiry;\\n    /// fee data ///\\n    uint256 lnFeeRateRoot;\\n    uint256 reserveFeePercent; // base 100\\n    /// last trade data ///\\n    uint256 lastLnImpliedRate;\\n}\\n\\n// params that are expensive to compute, therefore we pre-compute them\\nstruct MarketPreCompute {\\n    int256 rateScalar;\\n    int256 totalAsset;\\n    int256 rateAnchor;\\n    int256 feeRate;\\n}\\n\\n// solhint-disable ordering\\nlibrary MarketMathCore {\\n    using PMath for uint256;\\n    using PMath for int256;\\n    using LogExpMath for int256;\\n    using PYIndexLib for PYIndex;\\n\\n    int256 internal constant MINIMUM_LIQUIDITY = 10 ** 3;\\n    int256 internal constant PERCENTAGE_DECIMALS = 100;\\n    uint256 internal constant DAY = 86400;\\n    uint256 internal constant IMPLIED_RATE_TIME = 365 * DAY;\\n\\n    int256 internal constant MAX_MARKET_PROPORTION = (1e18 * 96) / 100;\\n\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                UINT FUNCTIONS TO PROXY TO CORE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addLiquidity(\\n        MarketState memory market,\\n        uint256 syDesired,\\n        uint256 ptDesired,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 lpToReserve, uint256 lpToAccount, uint256 syUsed, uint256 ptUsed) {\\n        (int256 _lpToReserve, int256 _lpToAccount, int256 _syUsed, int256 _ptUsed) = addLiquidityCore(\\n            market,\\n            syDesired.Int(),\\n            ptDesired.Int(),\\n            blockTime\\n        );\\n\\n        lpToReserve = _lpToReserve.Uint();\\n        lpToAccount = _lpToAccount.Uint();\\n        syUsed = _syUsed.Uint();\\n        ptUsed = _ptUsed.Uint();\\n    }\\n\\n    function removeLiquidity(\\n        MarketState memory market,\\n        uint256 lpToRemove\\n    ) internal pure returns (uint256 netSyToAccount, uint256 netPtToAccount) {\\n        (int256 _syToAccount, int256 _ptToAccount) = removeLiquidityCore(market, lpToRemove.Int());\\n\\n        netSyToAccount = _syToAccount.Uint();\\n        netPtToAccount = _ptToAccount.Uint();\\n    }\\n\\n    function swapExactPtForSy(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 exactPtToMarket,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 netSyToAccount, uint256 netSyFee, uint256 netSyToReserve) {\\n        (int256 _netSyToAccount, int256 _netSyFee, int256 _netSyToReserve) = executeTradeCore(\\n            market,\\n            index,\\n            exactPtToMarket.neg(),\\n            blockTime\\n        );\\n\\n        netSyToAccount = _netSyToAccount.Uint();\\n        netSyFee = _netSyFee.Uint();\\n        netSyToReserve = _netSyToReserve.Uint();\\n    }\\n\\n    function swapSyForExactPt(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 exactPtToAccount,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 netSyToMarket, uint256 netSyFee, uint256 netSyToReserve) {\\n        (int256 _netSyToAccount, int256 _netSyFee, int256 _netSyToReserve) = executeTradeCore(\\n            market,\\n            index,\\n            exactPtToAccount.Int(),\\n            blockTime\\n        );\\n\\n        netSyToMarket = _netSyToAccount.neg().Uint();\\n        netSyFee = _netSyFee.Uint();\\n        netSyToReserve = _netSyToReserve.Uint();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    CORE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addLiquidityCore(\\n        MarketState memory market,\\n        int256 syDesired,\\n        int256 ptDesired,\\n        uint256 blockTime\\n    ) internal pure returns (int256 lpToReserve, int256 lpToAccount, int256 syUsed, int256 ptUsed) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (syDesired == 0 || ptDesired == 0) revert Errors.MarketZeroAmountsInput();\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        if (market.totalLp == 0) {\\n            lpToAccount = PMath.sqrt((syDesired * ptDesired).Uint()).Int() - MINIMUM_LIQUIDITY;\\n            lpToReserve = MINIMUM_LIQUIDITY;\\n            syUsed = syDesired;\\n            ptUsed = ptDesired;\\n        } else {\\n            int256 netLpByPt = (ptDesired * market.totalLp) / market.totalPt;\\n            int256 netLpBySy = (syDesired * market.totalLp) / market.totalSy;\\n            if (netLpByPt < netLpBySy) {\\n                lpToAccount = netLpByPt;\\n                ptUsed = ptDesired;\\n                syUsed = (market.totalSy * lpToAccount).rawDivUp(market.totalLp);\\n            } else {\\n                lpToAccount = netLpBySy;\\n                syUsed = syDesired;\\n                ptUsed = (market.totalPt * lpToAccount).rawDivUp(market.totalLp);\\n            }\\n        }\\n\\n        if (lpToAccount <= 0 || syUsed <= 0 || ptUsed <= 0) revert Errors.MarketZeroAmountsOutput();\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.totalSy += syUsed;\\n        market.totalPt += ptUsed;\\n        market.totalLp += lpToAccount + lpToReserve;\\n    }\\n\\n    function removeLiquidityCore(\\n        MarketState memory market,\\n        int256 lpToRemove\\n    ) internal pure returns (int256 netSyToAccount, int256 netPtToAccount) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (lpToRemove == 0) revert Errors.MarketZeroAmountsInput();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        netSyToAccount = (lpToRemove * market.totalSy) / market.totalLp;\\n        netPtToAccount = (lpToRemove * market.totalPt) / market.totalLp;\\n\\n        if (netSyToAccount == 0 && netPtToAccount == 0) revert Errors.MarketZeroAmountsOutput();\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.totalLp = market.totalLp.subNoNeg(lpToRemove);\\n        market.totalPt = market.totalPt.subNoNeg(netPtToAccount);\\n        market.totalSy = market.totalSy.subNoNeg(netSyToAccount);\\n    }\\n\\n    function executeTradeCore(\\n        MarketState memory market,\\n        PYIndex index,\\n        int256 netPtToAccount,\\n        uint256 blockTime\\n    ) internal pure returns (int256 netSyToAccount, int256 netSyFee, int256 netSyToReserve) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n        if (market.totalPt <= netPtToAccount)\\n            revert Errors.MarketInsufficientPtForTrade(market.totalPt, netPtToAccount);\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        MarketPreCompute memory comp = getMarketPreCompute(market, index, blockTime);\\n\\n        (netSyToAccount, netSyFee, netSyToReserve) = calcTrade(market, comp, index, netPtToAccount);\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        _setNewMarketStateTrade(market, comp, index, netPtToAccount, netSyToAccount, netSyToReserve, blockTime);\\n    }\\n\\n    function getMarketPreCompute(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 blockTime\\n    ) internal pure returns (MarketPreCompute memory res) {\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n\\n        res.rateScalar = _getRateScalar(market, timeToExpiry);\\n        res.totalAsset = index.syToAsset(market.totalSy);\\n\\n        if (market.totalPt == 0 || res.totalAsset == 0)\\n            revert Errors.MarketZeroTotalPtOrTotalAsset(market.totalPt, res.totalAsset);\\n\\n        res.rateAnchor = _getRateAnchor(\\n            market.totalPt,\\n            market.lastLnImpliedRate,\\n            res.totalAsset,\\n            res.rateScalar,\\n            timeToExpiry\\n        );\\n        res.feeRate = _getExchangeRateFromImpliedRate(market.lnFeeRateRoot, timeToExpiry);\\n    }\\n\\n    function calcTrade(\\n        MarketState memory market,\\n        MarketPreCompute memory comp,\\n        PYIndex index,\\n        int256 netPtToAccount\\n    ) internal pure returns (int256 netSyToAccount, int256 netSyFee, int256 netSyToReserve) {\\n        int256 preFeeExchangeRate = _getExchangeRate(\\n            market.totalPt,\\n            comp.totalAsset,\\n            comp.rateScalar,\\n            comp.rateAnchor,\\n            netPtToAccount\\n        );\\n\\n        int256 preFeeAssetToAccount = netPtToAccount.divDown(preFeeExchangeRate).neg();\\n        int256 fee = comp.feeRate;\\n\\n        if (netPtToAccount > 0) {\\n            int256 postFeeExchangeRate = preFeeExchangeRate.divDown(fee);\\n            if (postFeeExchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(postFeeExchangeRate);\\n\\n            fee = preFeeAssetToAccount.mulDown(PMath.IONE - fee);\\n        } else {\\n            fee = ((preFeeAssetToAccount * (PMath.IONE - fee)) / fee).neg();\\n        }\\n\\n        int256 netAssetToReserve = (fee * market.reserveFeePercent.Int()) / PERCENTAGE_DECIMALS;\\n        int256 netAssetToAccount = preFeeAssetToAccount - fee;\\n\\n        netSyToAccount = netAssetToAccount < 0\\n            ? index.assetToSyUp(netAssetToAccount)\\n            : index.assetToSy(netAssetToAccount);\\n        netSyFee = index.assetToSy(fee);\\n        netSyToReserve = index.assetToSy(netAssetToReserve);\\n    }\\n\\n    function _setNewMarketStateTrade(\\n        MarketState memory market,\\n        MarketPreCompute memory comp,\\n        PYIndex index,\\n        int256 netPtToAccount,\\n        int256 netSyToAccount,\\n        int256 netSyToReserve,\\n        uint256 blockTime\\n    ) internal pure {\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n\\n        market.totalPt = market.totalPt.subNoNeg(netPtToAccount);\\n        market.totalSy = market.totalSy.subNoNeg(netSyToAccount + netSyToReserve);\\n\\n        market.lastLnImpliedRate = _getLnImpliedRate(\\n            market.totalPt,\\n            index.syToAsset(market.totalSy),\\n            comp.rateScalar,\\n            comp.rateAnchor,\\n            timeToExpiry\\n        );\\n\\n        if (market.lastLnImpliedRate == 0) revert Errors.MarketZeroLnImpliedRate();\\n    }\\n\\n    function _getRateAnchor(\\n        int256 totalPt,\\n        uint256 lastLnImpliedRate,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        uint256 timeToExpiry\\n    ) internal pure returns (int256 rateAnchor) {\\n        int256 newExchangeRate = _getExchangeRateFromImpliedRate(lastLnImpliedRate, timeToExpiry);\\n\\n        if (newExchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(newExchangeRate);\\n\\n        {\\n            int256 proportion = totalPt.divDown(totalPt + totalAsset);\\n\\n            int256 lnProportion = _logProportion(proportion);\\n\\n            rateAnchor = newExchangeRate - lnProportion.divDown(rateScalar);\\n        }\\n    }\\n\\n    /// @notice Calculates the current market implied rate.\\n    /// @return lnImpliedRate the implied rate\\n    function _getLnImpliedRate(\\n        int256 totalPt,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        int256 rateAnchor,\\n        uint256 timeToExpiry\\n    ) internal pure returns (uint256 lnImpliedRate) {\\n        // This will check for exchange rates < PMath.IONE\\n        int256 exchangeRate = _getExchangeRate(totalPt, totalAsset, rateScalar, rateAnchor, 0);\\n\\n        // exchangeRate >= 1 so its ln >= 0\\n        uint256 lnRate = exchangeRate.ln().Uint();\\n\\n        lnImpliedRate = (lnRate * IMPLIED_RATE_TIME) / timeToExpiry;\\n    }\\n\\n    /// @notice Converts an implied rate to an exchange rate given a time to expiry. The\\n    /// formula is E = e^rt\\n    function _getExchangeRateFromImpliedRate(\\n        uint256 lnImpliedRate,\\n        uint256 timeToExpiry\\n    ) internal pure returns (int256 exchangeRate) {\\n        uint256 rt = (lnImpliedRate * timeToExpiry) / IMPLIED_RATE_TIME;\\n\\n        exchangeRate = LogExpMath.exp(rt.Int());\\n    }\\n\\n    function _getExchangeRate(\\n        int256 totalPt,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        int256 rateAnchor,\\n        int256 netPtToAccount\\n    ) internal pure returns (int256 exchangeRate) {\\n        int256 numerator = totalPt.subNoNeg(netPtToAccount);\\n\\n        int256 proportion = (numerator.divDown(totalPt + totalAsset));\\n\\n        if (proportion > MAX_MARKET_PROPORTION)\\n            revert Errors.MarketProportionTooHigh(proportion, MAX_MARKET_PROPORTION);\\n\\n        int256 lnProportion = _logProportion(proportion);\\n\\n        exchangeRate = lnProportion.divDown(rateScalar) + rateAnchor;\\n\\n        if (exchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(exchangeRate);\\n    }\\n\\n    function _logProportion(int256 proportion) internal pure returns (int256 res) {\\n        if (proportion == PMath.IONE) revert Errors.MarketProportionMustNotEqualOne();\\n\\n        int256 logitP = proportion.divDown(PMath.IONE - proportion);\\n\\n        res = logitP.ln();\\n    }\\n\\n    function _getRateScalar(MarketState memory market, uint256 timeToExpiry) internal pure returns (int256 rateScalar) {\\n        rateScalar = (market.scalarRoot * IMPLIED_RATE_TIME.Int()) / timeToExpiry.Int();\\n        if (rateScalar <= 0) revert Errors.MarketRateScalarBelowZero(rateScalar);\\n    }\\n\\n    function setInitialLnImpliedRate(\\n        MarketState memory market,\\n        PYIndex index,\\n        int256 initialAnchor,\\n        uint256 blockTime\\n    ) internal pure {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        int256 totalAsset = index.syToAsset(market.totalSy);\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n        int256 rateScalar = _getRateScalar(market, timeToExpiry);\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.lastLnImpliedRate = _getLnImpliedRate(\\n            market.totalPt,\\n            totalAsset,\\n            rateScalar,\\n            initialAnchor,\\n            timeToExpiry\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc9229208355d2e853ebb026231f79625b73df3a9576e71dfe96a9a92b4e101e5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/StandardizedYield/PYIndex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"../../interfaces/IPYieldToken.sol\\\";\\nimport \\\"../../interfaces/IPPrincipalToken.sol\\\";\\n\\nimport \\\"./SYUtils.sol\\\";\\nimport \\\"../libraries/math/PMath.sol\\\";\\n\\ntype PYIndex is uint256;\\n\\nlibrary PYIndexLib {\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    function newIndex(IPYieldToken YT) internal returns (PYIndex) {\\n        return PYIndex.wrap(YT.pyIndexCurrent());\\n    }\\n\\n    function syToAsset(PYIndex index, uint256 syAmount) internal pure returns (uint256) {\\n        return SYUtils.syToAsset(PYIndex.unwrap(index), syAmount);\\n    }\\n\\n    function assetToSy(PYIndex index, uint256 assetAmount) internal pure returns (uint256) {\\n        return SYUtils.assetToSy(PYIndex.unwrap(index), assetAmount);\\n    }\\n\\n    function assetToSyUp(PYIndex index, uint256 assetAmount) internal pure returns (uint256) {\\n        return SYUtils.assetToSyUp(PYIndex.unwrap(index), assetAmount);\\n    }\\n\\n    function syToAssetUp(PYIndex index, uint256 syAmount) internal pure returns (uint256) {\\n        uint256 _index = PYIndex.unwrap(index);\\n        return SYUtils.syToAssetUp(_index, syAmount);\\n    }\\n\\n    function syToAsset(PYIndex index, int256 syAmount) internal pure returns (int256) {\\n        int256 sign = syAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.syToAsset(PYIndex.unwrap(index), syAmount.abs())).Int();\\n    }\\n\\n    function assetToSy(PYIndex index, int256 assetAmount) internal pure returns (int256) {\\n        int256 sign = assetAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.assetToSy(PYIndex.unwrap(index), assetAmount.abs())).Int();\\n    }\\n\\n    function assetToSyUp(PYIndex index, int256 assetAmount) internal pure returns (int256) {\\n        int256 sign = assetAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.assetToSyUp(PYIndex.unwrap(index), assetAmount.abs())).Int();\\n    }\\n}\\n\",\"keccak256\":\"0x1d4bb00cc66f73f51eee668d9b0eb90981f5183f126b1226cd6f6260eafa1768\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/StandardizedYield/SYUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary SYUtils {\\n    uint256 internal constant ONE = 1e18;\\n\\n    function syToAsset(uint256 exchangeRate, uint256 syAmount) internal pure returns (uint256) {\\n        return (syAmount * exchangeRate) / ONE;\\n    }\\n\\n    function syToAssetUp(uint256 exchangeRate, uint256 syAmount) internal pure returns (uint256) {\\n        return (syAmount * exchangeRate + ONE - 1) / ONE;\\n    }\\n\\n    function assetToSy(uint256 exchangeRate, uint256 assetAmount) internal pure returns (uint256) {\\n        return (assetAmount * ONE) / exchangeRate;\\n    }\\n\\n    function assetToSyUp(uint256 exchangeRate, uint256 assetAmount) internal pure returns (uint256) {\\n        return (assetAmount * ONE + exchangeRate - 1) / exchangeRate;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bc20ce8f41cd07513beb669eda02f0c5e9cafb74406cd4c89019525399d4dd\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // BulkSeller\\n    error BulkInsufficientSyForTrade(uint256 currentAmount, uint256 requiredAmount);\\n    error BulkInsufficientTokenForTrade(uint256 currentAmount, uint256 requiredAmount);\\n    error BulkInSufficientSyOut(uint256 actualSyOut, uint256 requiredSyOut);\\n    error BulkInSufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n    error BulkInsufficientSyReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error BulkNotMaintainer();\\n    error BulkNotAdmin();\\n    error BulkSellerAlreadyExisted(address token, address SY, address bulk);\\n    error BulkSellerInvalidToken(address token, address SY);\\n    error BulkBadRateTokenToSy(uint256 actualRate, uint256 currentRate, uint256 eps);\\n    error BulkBadRateSyToToken(uint256 actualRate, uint256 currentRate, uint256 eps);\\n\\n    // APPROX\\n    error ApproxFail();\\n    error ApproxParamsInvalid(uint256 guessMin, uint256 guessMax, uint256 eps);\\n    error ApproxBinarySearchInputInvalid(\\n        uint256 approxGuessMin,\\n        uint256 approxGuessMax,\\n        uint256 minGuessMin,\\n        uint256 maxGuessMax\\n    );\\n\\n    // MARKET + MARKET MATH CORE\\n    error MarketExpired();\\n    error MarketZeroAmountsInput();\\n    error MarketZeroAmountsOutput();\\n    error MarketZeroLnImpliedRate();\\n    error MarketInsufficientPtForTrade(int256 currentAmount, int256 requiredAmount);\\n    error MarketInsufficientPtReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error MarketInsufficientSyReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error MarketZeroTotalPtOrTotalAsset(int256 totalPt, int256 totalAsset);\\n    error MarketExchangeRateBelowOne(int256 exchangeRate);\\n    error MarketProportionMustNotEqualOne();\\n    error MarketRateScalarBelowZero(int256 rateScalar);\\n    error MarketScalarRootBelowZero(int256 scalarRoot);\\n    error MarketProportionTooHigh(int256 proportion, int256 maxProportion);\\n\\n    error OracleUninitialized();\\n    error OracleTargetTooOld(uint32 target, uint32 oldest);\\n    error OracleZeroCardinality();\\n\\n    error MarketFactoryExpiredPt();\\n    error MarketFactoryInvalidPt();\\n    error MarketFactoryMarketExists();\\n\\n    error MarketFactoryLnFeeRateRootTooHigh(uint80 lnFeeRateRoot, uint256 maxLnFeeRateRoot);\\n    error MarketFactoryOverriddenFeeTooHigh(uint80 overriddenFee, uint256 marketLnFeeRateRoot);\\n    error MarketFactoryReserveFeePercentTooHigh(uint8 reserveFeePercent, uint8 maxReserveFeePercent);\\n    error MarketFactoryZeroTreasury();\\n    error MarketFactoryInitialAnchorTooLow(int256 initialAnchor, int256 minInitialAnchor);\\n    error MFNotPendleMarket(address addr);\\n\\n    // ROUTER\\n    error RouterInsufficientLpOut(uint256 actualLpOut, uint256 requiredLpOut);\\n    error RouterInsufficientSyOut(uint256 actualSyOut, uint256 requiredSyOut);\\n    error RouterInsufficientPtOut(uint256 actualPtOut, uint256 requiredPtOut);\\n    error RouterInsufficientYtOut(uint256 actualYtOut, uint256 requiredYtOut);\\n    error RouterInsufficientPYOut(uint256 actualPYOut, uint256 requiredPYOut);\\n    error RouterInsufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n    error RouterInsufficientSyRepay(uint256 actualSyRepay, uint256 requiredSyRepay);\\n    error RouterInsufficientPtRepay(uint256 actualPtRepay, uint256 requiredPtRepay);\\n    error RouterNotAllSyUsed(uint256 netSyDesired, uint256 netSyUsed);\\n\\n    error RouterTimeRangeZero();\\n    error RouterCallbackNotPendleMarket(address caller);\\n    error RouterInvalidAction(bytes4 selector);\\n    error RouterInvalidFacet(address facet);\\n\\n    error RouterKyberSwapDataZero();\\n\\n    error SimulationResults(bool success, bytes res);\\n\\n    // YIELD CONTRACT\\n    error YCExpired();\\n    error YCNotExpired();\\n    error YieldContractInsufficientSy(uint256 actualSy, uint256 requiredSy);\\n    error YCNothingToRedeem();\\n    error YCPostExpiryDataNotSet();\\n    error YCNoFloatingSy();\\n\\n    // YieldFactory\\n    error YCFactoryInvalidExpiry();\\n    error YCFactoryYieldContractExisted();\\n    error YCFactoryZeroExpiryDivisor();\\n    error YCFactoryZeroTreasury();\\n    error YCFactoryInterestFeeRateTooHigh(uint256 interestFeeRate, uint256 maxInterestFeeRate);\\n    error YCFactoryRewardFeeRateTooHigh(uint256 newRewardFeeRate, uint256 maxRewardFeeRate);\\n\\n    // SY\\n    error SYInvalidTokenIn(address token);\\n    error SYInvalidTokenOut(address token);\\n    error SYZeroDeposit();\\n    error SYZeroRedeem();\\n    error SYInsufficientSharesOut(uint256 actualSharesOut, uint256 requiredSharesOut);\\n    error SYInsufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n\\n    // SY-specific\\n    error SYQiTokenMintFailed(uint256 errCode);\\n    error SYQiTokenRedeemFailed(uint256 errCode);\\n    error SYQiTokenRedeemRewardsFailed(uint256 rewardAccruedType0, uint256 rewardAccruedType1);\\n    error SYQiTokenBorrowRateTooHigh(uint256 borrowRate, uint256 borrowRateMax);\\n\\n    error SYCurveInvalidPid();\\n    error SYCurve3crvPoolNotFound();\\n\\n    error SYApeDepositAmountTooSmall(uint256 amountDeposited);\\n    error SYBalancerInvalidPid();\\n    error SYInvalidRewardToken(address token);\\n\\n    error SYStargateRedeemCapExceeded(uint256 amountLpDesired, uint256 amountLpRedeemable);\\n\\n    error SYBalancerReentrancy();\\n\\n    error NotFromTrustedRemote(uint16 srcChainId, bytes path);\\n\\n    error ApxETHNotEnoughBuffer();\\n\\n    // Liquidity Mining\\n    error VCInactivePool(address pool);\\n    error VCPoolAlreadyActive(address pool);\\n    error VCZeroVePendle(address user);\\n    error VCExceededMaxWeight(uint256 totalWeight, uint256 maxWeight);\\n    error VCEpochNotFinalized(uint256 wTime);\\n    error VCPoolAlreadyAddAndRemoved(address pool);\\n\\n    error VEInvalidNewExpiry(uint256 newExpiry);\\n    error VEExceededMaxLockTime();\\n    error VEInsufficientLockTime();\\n    error VENotAllowedReduceExpiry();\\n    error VEZeroAmountLocked();\\n    error VEPositionNotExpired();\\n    error VEZeroPosition();\\n    error VEZeroSlope(uint128 bias, uint128 slope);\\n    error VEReceiveOldSupply(uint256 msgTime);\\n\\n    error GCNotPendleMarket(address caller);\\n    error GCNotVotingController(address caller);\\n\\n    error InvalidWTime(uint256 wTime);\\n    error ExpiryInThePast(uint256 expiry);\\n    error ChainNotSupported(uint256 chainId);\\n\\n    error FDTotalAmountFundedNotMatch(uint256 actualTotalAmount, uint256 expectedTotalAmount);\\n    error FDEpochLengthMismatch();\\n    error FDInvalidPool(address pool);\\n    error FDPoolAlreadyExists(address pool);\\n    error FDInvalidNewFinishedEpoch(uint256 oldFinishedEpoch, uint256 newFinishedEpoch);\\n    error FDInvalidStartEpoch(uint256 startEpoch);\\n    error FDInvalidWTimeFund(uint256 lastFunded, uint256 wTime);\\n    error FDFutureFunding(uint256 lastFunded, uint256 currentWTime);\\n\\n    error BDInvalidEpoch(uint256 epoch, uint256 startTime);\\n\\n    // Cross-Chain\\n    error MsgNotFromSendEndpoint(uint16 srcChainId, bytes path);\\n    error MsgNotFromReceiveEndpoint(address sender);\\n    error InsufficientFeeToSendMsg(uint256 currentFee, uint256 requiredFee);\\n    error ApproxDstExecutionGasNotSet();\\n    error InvalidRetryData();\\n\\n    // GENERIC MSG\\n    error ArrayLengthMismatch();\\n    error ArrayEmpty();\\n    error ArrayOutOfBounds();\\n    error ZeroAddress();\\n    error FailedToSendEther();\\n    error InvalidMerkleProof();\\n\\n    error OnlyLayerZeroEndpoint();\\n    error OnlyYT();\\n    error OnlyYCFactory();\\n    error OnlyWhitelisted();\\n\\n    // Swap Aggregator\\n    error SAInsufficientTokenIn(address tokenIn, uint256 amountExpected, uint256 amountActual);\\n    error UnsupportedSelector(uint256 aggregatorType, bytes4 selector);\\n}\\n\",\"keccak256\":\"0xbebc9cfdfaa88bbf1e53d31c5f5c89265dac4c7ba31920d98b7b7bbd74c4345d\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/MiniHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary MiniHelpers {\\n    function isCurrentlyExpired(uint256 expiry) internal view returns (bool) {\\n        return (expiry <= block.timestamp);\\n    }\\n\\n    function isExpired(uint256 expiry, uint256 blockTime) internal pure returns (bool) {\\n        return (expiry <= blockTime);\\n    }\\n\\n    function isTimeInThePast(uint256 timestamp) internal view returns (bool) {\\n        return (timestamp <= block.timestamp); // same definition as isCurrentlyExpired\\n    }\\n}\\n\",\"keccak256\":\"0xfcd8768e3e9970df6d6375ff3f43caca7fa3a02cc43afd8f3e56bbde463a3bf5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2 ** 254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        unchecked {\\n            require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, \\\"Invalid exponent\\\");\\n\\n            if (x < 0) {\\n                // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n                // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n                // Fixed point division requires multiplying by ONE_18.\\n                return ((ONE_18 * ONE_18) / exp(-x));\\n            }\\n\\n            // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n            // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n            // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n            // decomposition.\\n            // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n            // decomposition, which will be lower than the smallest x_n.\\n            // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n            // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n            // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n            // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n            // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n            // decomposition.\\n\\n            // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n            // it and compute the accumulated product.\\n\\n            int256 firstAN;\\n            if (x >= x0) {\\n                x -= x0;\\n                firstAN = a0;\\n            } else if (x >= x1) {\\n                x -= x1;\\n                firstAN = a1;\\n            } else {\\n                firstAN = 1; // One with no decimal places\\n            }\\n\\n            // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n            // smaller terms.\\n            x *= 100;\\n\\n            // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n            // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n            int256 product = ONE_20;\\n\\n            if (x >= x2) {\\n                x -= x2;\\n                product = (product * a2) / ONE_20;\\n            }\\n            if (x >= x3) {\\n                x -= x3;\\n                product = (product * a3) / ONE_20;\\n            }\\n            if (x >= x4) {\\n                x -= x4;\\n                product = (product * a4) / ONE_20;\\n            }\\n            if (x >= x5) {\\n                x -= x5;\\n                product = (product * a5) / ONE_20;\\n            }\\n            if (x >= x6) {\\n                x -= x6;\\n                product = (product * a6) / ONE_20;\\n            }\\n            if (x >= x7) {\\n                x -= x7;\\n                product = (product * a7) / ONE_20;\\n            }\\n            if (x >= x8) {\\n                x -= x8;\\n                product = (product * a8) / ONE_20;\\n            }\\n            if (x >= x9) {\\n                x -= x9;\\n                product = (product * a9) / ONE_20;\\n            }\\n\\n            // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n            // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n            // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n            int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n            int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n            // The first term is simply x.\\n            term = x;\\n            seriesSum += term;\\n\\n            // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n            // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n            term = ((term * x) / ONE_20) / 2;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 3;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 4;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 5;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 6;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 7;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 8;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 9;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 10;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 11;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 12;\\n            seriesSum += term;\\n\\n            // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n            // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n            // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n            // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n            // and then drop two digits to return an 18 decimal value.\\n\\n            return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n        }\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        unchecked {\\n            // The real natural logarithm is not defined for negative numbers or zero.\\n            require(a > 0, \\\"out of bounds\\\");\\n            if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n                return _ln_36(a) / ONE_18;\\n            } else {\\n                return _ln(a);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) {\\n                // We solve the 0^0 indetermination by making it equal one.\\n                return uint256(ONE_18);\\n            }\\n\\n            if (x == 0) {\\n                return 0;\\n            }\\n\\n            // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n            // arrive at that r`esult. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n            // x^y = exp(y * ln(x)).\\n\\n            // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n            require(x < 2 ** 255, \\\"x out of bounds\\\");\\n            int256 x_int256 = int256(x);\\n\\n            // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n            // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n            // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n            require(y < MILD_EXPONENT_BOUND, \\\"y out of bounds\\\");\\n            int256 y_int256 = int256(y);\\n\\n            int256 logx_times_y;\\n            if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n                int256 ln_36_x = _ln_36(x_int256);\\n\\n                // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n                // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n                // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n                // (downscaled) last 18 decimals.\\n                logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n            } else {\\n                logx_times_y = _ln(x_int256) * y_int256;\\n            }\\n            logx_times_y /= ONE_18;\\n\\n            // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n            require(\\n                MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n                \\\"product out of bounds\\\"\\n            );\\n\\n            return uint256(exp(logx_times_y));\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        unchecked {\\n            if (a < ONE_18) {\\n                // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n                // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n                // Fixed point division requires multiplying by ONE_18.\\n                return (-_ln((ONE_18 * ONE_18) / a));\\n            }\\n\\n            // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n            // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n            // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n            // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n            // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n            // decomposition, which will be lower than the smallest a_n.\\n            // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n            // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n            // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n            // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n            // ONE_18 to convert them to fixed point.\\n            // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n            // by it and compute the accumulated sum.\\n\\n            int256 sum = 0;\\n            if (a >= a0 * ONE_18) {\\n                a /= a0; // Integer, not fixed point division\\n                sum += x0;\\n            }\\n\\n            if (a >= a1 * ONE_18) {\\n                a /= a1; // Integer, not fixed point division\\n                sum += x1;\\n            }\\n\\n            // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n            sum *= 100;\\n            a *= 100;\\n\\n            // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n            if (a >= a2) {\\n                a = (a * ONE_20) / a2;\\n                sum += x2;\\n            }\\n\\n            if (a >= a3) {\\n                a = (a * ONE_20) / a3;\\n                sum += x3;\\n            }\\n\\n            if (a >= a4) {\\n                a = (a * ONE_20) / a4;\\n                sum += x4;\\n            }\\n\\n            if (a >= a5) {\\n                a = (a * ONE_20) / a5;\\n                sum += x5;\\n            }\\n\\n            if (a >= a6) {\\n                a = (a * ONE_20) / a6;\\n                sum += x6;\\n            }\\n\\n            if (a >= a7) {\\n                a = (a * ONE_20) / a7;\\n                sum += x7;\\n            }\\n\\n            if (a >= a8) {\\n                a = (a * ONE_20) / a8;\\n                sum += x8;\\n            }\\n\\n            if (a >= a9) {\\n                a = (a * ONE_20) / a9;\\n                sum += x9;\\n            }\\n\\n            if (a >= a10) {\\n                a = (a * ONE_20) / a10;\\n                sum += x10;\\n            }\\n\\n            if (a >= a11) {\\n                a = (a * ONE_20) / a11;\\n                sum += x11;\\n            }\\n\\n            // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n            // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n            // Let z = (a - 1) / (a + 1).\\n            // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n            // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n            // division by ONE_20.\\n            int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n            int256 z_squared = (z * z) / ONE_20;\\n\\n            // num is the numerator of the series: the z^(2 * n + 1) term\\n            int256 num = z;\\n\\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n            int256 seriesSum = num;\\n\\n            // In each step, the numerator is multiplied by z^2\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 3;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 5;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 7;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 9;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 11;\\n\\n            // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n            // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n            seriesSum *= 2;\\n\\n            // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n            // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n            // value.\\n\\n            return (sum + seriesSum) / 100;\\n        }\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        unchecked {\\n            // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n            // worthwhile.\\n\\n            // First, we transform x to a 36 digit fixed point value.\\n            x *= ONE_18;\\n\\n            // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n            // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n            // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n            // division by ONE_36.\\n            int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n            int256 z_squared = (z * z) / ONE_36;\\n\\n            // num is the numerator of the series: the z^(2 * n + 1) term\\n            int256 num = z;\\n\\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n            int256 seriesSum = num;\\n\\n            // In each step, the numerator is multiplied by z^2\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 3;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 5;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 7;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 9;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 11;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 13;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 15;\\n\\n            // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n            // All that remains is multiplying by 2 (non fixed point).\\n            return seriesSum * 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x844f812a1d2528fbe65c1fbaf1c2fe022658b3ecc29385217b6517715d801b94\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/math/PMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable private-vars-leading-underscore, reason-string */\\n\\nlibrary PMath {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    int256 internal constant IONE = 1e18; // 18 decimal places\\n\\n    function subMax0(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return (a >= b ? a - b : 0);\\n        }\\n    }\\n\\n    function subNoNeg(int256 a, int256 b) internal pure returns (int256) {\\n        require(a >= b, \\\"negative\\\");\\n        return a - b; // no unchecked since if b is very negative, a - b might overflow\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        unchecked {\\n            return product / ONE;\\n        }\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        int256 product = a * b;\\n        unchecked {\\n            return product / IONE;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 aInflated = a * ONE;\\n        unchecked {\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        int256 aInflated = a * IONE;\\n        unchecked {\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function rawDivUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    function rawDivUp(int256 a, int256 b) internal pure returns (int256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    function tweakUp(uint256 a, uint256 factor) internal pure returns (uint256) {\\n        return mulDown(a, ONE + factor);\\n    }\\n\\n    function tweakDown(uint256 a, uint256 factor) internal pure returns (uint256) {\\n        return mulDown(a, ONE - factor);\\n    }\\n\\n    /// @return res = min(a + b, bound)\\n    /// @dev This function should handle arithmetic operation and bound check without overflow/underflow\\n    function addWithUpperBound(uint256 a, uint256 b, uint256 bound) internal pure returns (uint256 res) {\\n        unchecked {\\n            if (type(uint256).max - b < a) res = bound;\\n            else res = min(bound, a + b);\\n        }\\n    }\\n\\n    /// @return res = max(a - b, bound)\\n    /// @dev This function should handle arithmetic operation and bound check without overflow/underflow\\n    function subWithLowerBound(uint256 a, uint256 b, uint256 bound) internal pure returns (uint256 res) {\\n        unchecked {\\n            if (b > a) res = bound;\\n            else res = max(a - b, bound);\\n        }\\n    }\\n\\n    function clamp(uint256 x, uint256 lower, uint256 upper) internal pure returns (uint256 res) {\\n        res = x;\\n        if (x < lower) res = lower;\\n        else if (x > upper) res = upper;\\n    }\\n\\n    // @author Uniswap\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function square(uint256 x) internal pure returns (uint256) {\\n        return x * x;\\n    }\\n\\n    function squareDown(uint256 x) internal pure returns (uint256) {\\n        return mulDown(x, x);\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x > 0 ? x : -x);\\n    }\\n\\n    function neg(int256 x) internal pure returns (int256) {\\n        return x * (-1);\\n    }\\n\\n    function neg(uint256 x) internal pure returns (int256) {\\n        return Int(x) * (-1);\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y ? x : y);\\n    }\\n\\n    function max(int256 x, int256 y) internal pure returns (int256) {\\n        return (x > y ? x : y);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x < y ? x : y);\\n    }\\n\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return (x < y ? x : y);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               SIGNED CASTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function Int(uint256 x) internal pure returns (int256) {\\n        require(x <= uint256(type(int256).max));\\n        return int256(x);\\n    }\\n\\n    function Int128(int256 x) internal pure returns (int128) {\\n        require(type(int128).min <= x && x <= type(int128).max);\\n        return int128(x);\\n    }\\n\\n    function Int128(uint256 x) internal pure returns (int128) {\\n        return Int128(Int(x));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               UNSIGNED CASTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function Uint(int256 x) internal pure returns (uint256) {\\n        require(x >= 0);\\n        return uint256(x);\\n    }\\n\\n    function Uint32(uint256 x) internal pure returns (uint32) {\\n        require(x <= type(uint32).max);\\n        return uint32(x);\\n    }\\n\\n    function Uint64(uint256 x) internal pure returns (uint64) {\\n        require(x <= type(uint64).max);\\n        return uint64(x);\\n    }\\n\\n    function Uint112(uint256 x) internal pure returns (uint112) {\\n        require(x <= type(uint112).max);\\n        return uint112(x);\\n    }\\n\\n    function Uint96(uint256 x) internal pure returns (uint96) {\\n        require(x <= type(uint96).max);\\n        return uint96(x);\\n    }\\n\\n    function Uint128(uint256 x) internal pure returns (uint128) {\\n        require(x <= type(uint128).max);\\n        return uint128(x);\\n    }\\n\\n    function Uint192(uint256 x) internal pure returns (uint192) {\\n        require(x <= type(uint192).max);\\n        return uint192(x);\\n    }\\n\\n    function Uint80(uint256 x) internal pure returns (uint80) {\\n        require(x <= type(uint80).max);\\n        return uint80(x);\\n    }\\n\\n    function isAApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return mulDown(b, ONE - eps) <= a && a <= mulDown(b, ONE + eps);\\n    }\\n\\n    function isAGreaterApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return a >= b && a <= mulDown(b, ONE + eps);\\n    }\\n\\n    function isASmallerApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return a <= b && a >= mulDown(b, ONE - eps);\\n    }\\n}\\n\",\"keccak256\":\"0x6855d7a34d6b4a8eacb1675ce0cbd61bed3385a9c31828088558afb48eec48d3\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nenum PendleOracleType {\\n    PT_TO_SY,\\n    PT_TO_ASSET,\\n    LP_TO_SY,\\n    LP_TO_ASSET\\n}\\n\\ninterface IPChainlinkOracle is AggregatorV3Interface {}\\n\",\"keccak256\":\"0x1c6b6dad01df999c7f844801c79d65a188647fac8727e37038fbe306fb56ed26\",\"license\":\"MIT\"},\"@pendle/core-v2/contracts/interfaces/IPChainlinkOracleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPChainlinkOracle.sol\\\";\\n\\ninterface IPChainlinkOracleFactory {\\n    event OracleCreated(\\n        address indexed market,\\n        uint32 indexed twapDuration,\\n        PendleOracleType indexed baseOracleType,\\n        address oracle,\\n        bytes32 oracleId\\n    );\\n    event OracleWithQuoteCreated(\\n        address indexed market,\\n        uint32 indexed twapDuration,\\n        PendleOracleType indexed baseOracleType,\\n        address quoteOracle,\\n        address oracle,\\n        bytes32 oracleId\\n    );\\n}\\n\",\"keccak256\":\"0xa0b01846ced4deb7b3a7c3d39c9cabd2400f0d838104c53b33b1414243edffb3\",\"license\":\"MIT\"},\"@pendle/core-v2/contracts/interfaces/IPGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPGauge {\\n    function totalActiveSupply() external view returns (uint256);\\n\\n    function activeBalance(address user) external view returns (uint256);\\n\\n    // only available for newer factories. please check the verified contracts\\n    event RedeemRewards(address indexed user, uint256[] rewardsOut);\\n}\\n\",\"keccak256\":\"0x4ccb46450af0aa70f556b3e9e15c06a50ddbc9fe3543a013577839f2e43322c4\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPInterestManagerYT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPInterestManagerYT {\\n    event CollectInterestFee(uint256 amountInterestFee);\\n\\n    function userInterest(address user) external view returns (uint128 lastPYIndex, uint128 accruedInterest);\\n}\\n\",\"keccak256\":\"0x56228298c383a030df33bcf4430ec63ea9ed7e96c5bbf2f8195f179bc958841a\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IPPrincipalToken.sol\\\";\\nimport \\\"./IPYieldToken.sol\\\";\\nimport \\\"./IStandardizedYield.sol\\\";\\nimport \\\"./IPGauge.sol\\\";\\nimport \\\"../core/Market/MarketMathCore.sol\\\";\\n\\ninterface IPMarket is IERC20Metadata, IPGauge {\\n    event Mint(address indexed receiver, uint256 netLpMinted, uint256 netSyUsed, uint256 netPtUsed);\\n\\n    event Burn(\\n        address indexed receiverSy,\\n        address indexed receiverPt,\\n        uint256 netLpBurned,\\n        uint256 netSyOut,\\n        uint256 netPtOut\\n    );\\n\\n    event Swap(\\n        address indexed caller,\\n        address indexed receiver,\\n        int256 netPtOut,\\n        int256 netSyOut,\\n        uint256 netSyFee,\\n        uint256 netSyToReserve\\n    );\\n\\n    event UpdateImpliedRate(uint256 indexed timestamp, uint256 lnLastImpliedRate);\\n\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    function mint(\\n        address receiver,\\n        uint256 netSyDesired,\\n        uint256 netPtDesired\\n    ) external returns (uint256 netLpOut, uint256 netSyUsed, uint256 netPtUsed);\\n\\n    function burn(\\n        address receiverSy,\\n        address receiverPt,\\n        uint256 netLpToBurn\\n    ) external returns (uint256 netSyOut, uint256 netPtOut);\\n\\n    function swapExactPtForSy(\\n        address receiver,\\n        uint256 exactPtIn,\\n        bytes calldata data\\n    ) external returns (uint256 netSyOut, uint256 netSyFee);\\n\\n    function swapSyForExactPt(\\n        address receiver,\\n        uint256 exactPtOut,\\n        bytes calldata data\\n    ) external returns (uint256 netSyIn, uint256 netSyFee);\\n\\n    function redeemRewards(address user) external returns (uint256[] memory);\\n\\n    function readState(address router) external view returns (MarketState memory market);\\n\\n    function observe(uint32[] memory secondsAgos) external view returns (uint216[] memory lnImpliedRateCumulative);\\n\\n    function increaseObservationsCardinalityNext(uint16 cardinalityNext) external;\\n\\n    function readTokens() external view returns (IStandardizedYield _SY, IPPrincipalToken _PT, IPYieldToken _YT);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    function isExpired() external view returns (bool);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function observations(\\n        uint256 index\\n    ) external view returns (uint32 blockTimestamp, uint216 lnImpliedRateCumulative, bool initialized);\\n\\n    function _storage()\\n        external\\n        view\\n        returns (\\n            int128 totalPt,\\n            int128 totalSy,\\n            uint96 lastLnImpliedRate,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext\\n        );\\n}\\n\",\"keccak256\":\"0xcae6ee152a68790029af41459c47cdd44964467f47a855caee78394ea09ad8df\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPPYLpOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPPYLpOracle {\\n    event SetBlockCycleNumerator(uint16 newBlockCycleNumerator);\\n\\n    function getPtToAssetRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getYtToAssetRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getLpToAssetRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getPtToSyRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getYtToSyRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getLpToSyRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getOracleState(\\n        address market,\\n        uint32 duration\\n    )\\n        external\\n        view\\n        returns (bool increaseCardinalityRequired, uint16 cardinalityRequired, bool oldestObservationSatisfied);\\n\\n    function blockCycleNumerator() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xa7f26472f4f85a2cb991bbffd0f42be8ea4cc35b9c87d4570629a70b431b091c\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPPrincipalToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPPrincipalToken is IERC20Metadata {\\n    function burnByYT(address user, uint256 amount) external;\\n\\n    function mintByYT(address user, uint256 amount) external;\\n\\n    function initialize(address _YT) external;\\n\\n    function SY() external view returns (address);\\n\\n    function YT() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function isExpired() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0879ef0ffafe2ed731c7fe2a0281b602840c4bc715acf4e701ca51a17876fd0f\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPYieldToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IRewardManager.sol\\\";\\nimport \\\"./IPInterestManagerYT.sol\\\";\\n\\ninterface IPYieldToken is IERC20Metadata, IRewardManager, IPInterestManagerYT {\\n    event NewInterestIndex(uint256 indexed newIndex);\\n\\n    event Mint(\\n        address indexed caller,\\n        address indexed receiverPT,\\n        address indexed receiverYT,\\n        uint256 amountSyToMint,\\n        uint256 amountPYOut\\n    );\\n\\n    event Burn(address indexed caller, address indexed receiver, uint256 amountPYToRedeem, uint256 amountSyOut);\\n\\n    event RedeemRewards(address indexed user, uint256[] amountRewardsOut);\\n\\n    event RedeemInterest(address indexed user, uint256 interestOut);\\n\\n    event CollectRewardFee(address indexed rewardToken, uint256 amountRewardFee);\\n\\n    function mintPY(address receiverPT, address receiverYT) external returns (uint256 amountPYOut);\\n\\n    function redeemPY(address receiver) external returns (uint256 amountSyOut);\\n\\n    function redeemPYMulti(\\n        address[] calldata receivers,\\n        uint256[] calldata amountPYToRedeems\\n    ) external returns (uint256[] memory amountSyOuts);\\n\\n    function redeemDueInterestAndRewards(\\n        address user,\\n        bool redeemInterest,\\n        bool redeemRewards\\n    ) external returns (uint256 interestOut, uint256[] memory rewardsOut);\\n\\n    function rewardIndexesCurrent() external returns (uint256[] memory);\\n\\n    function pyIndexCurrent() external returns (uint256);\\n\\n    function pyIndexStored() external view returns (uint256);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    function SY() external view returns (address);\\n\\n    function PT() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function isExpired() external view returns (bool);\\n\\n    function doCacheIndexSameBlock() external view returns (bool);\\n\\n    function pyIndexLastUpdatedBlock() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xcf0a3e1860a9f7b979723d8585196664dc0aa0258a9f4d71170d86e1ffdfb93d\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IRewardManager {\\n    function userReward(address token, address user) external view returns (uint128 index, uint128 accrued);\\n}\\n\",\"keccak256\":\"0x8dfa58280700390049f9bdc27bcc6daa9f34aa53fba2d47a5c5bb3d1462ca604\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IStandardizedYield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IStandardizedYield is IERC20Metadata {\\n    /// @dev Emitted when any base tokens is deposited to mint shares\\n    event Deposit(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed tokenIn,\\n        uint256 amountDeposited,\\n        uint256 amountSyOut\\n    );\\n\\n    /// @dev Emitted when any shares are redeemed for base tokens\\n    event Redeem(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed tokenOut,\\n        uint256 amountSyToRedeem,\\n        uint256 amountTokenOut\\n    );\\n\\n    /// @dev check `assetInfo()` for more information\\n    enum AssetType {\\n        TOKEN,\\n        LIQUIDITY\\n    }\\n\\n    /// @dev Emitted when (`user`) claims their rewards\\n    event ClaimRewards(address indexed user, address[] rewardTokens, uint256[] rewardAmounts);\\n\\n    /**\\n     * @notice mints an amount of shares by depositing a base token.\\n     * @param receiver shares recipient address\\n     * @param tokenIn address of the base tokens to mint shares\\n     * @param amountTokenToDeposit amount of base tokens to be transferred from (`msg.sender`)\\n     * @param minSharesOut reverts if amount of shares minted is lower than this\\n     * @return amountSharesOut amount of shares minted\\n     * @dev Emits a {Deposit} event\\n     *\\n     * Requirements:\\n     * - (`tokenIn`) must be a valid base token.\\n     */\\n    function deposit(\\n        address receiver,\\n        address tokenIn,\\n        uint256 amountTokenToDeposit,\\n        uint256 minSharesOut\\n    ) external payable returns (uint256 amountSharesOut);\\n\\n    /**\\n     * @notice redeems an amount of base tokens by burning some shares\\n     * @param receiver recipient address\\n     * @param amountSharesToRedeem amount of shares to be burned\\n     * @param tokenOut address of the base token to be redeemed\\n     * @param minTokenOut reverts if amount of base token redeemed is lower than this\\n     * @param burnFromInternalBalance if true, burns from balance of `address(this)`, otherwise burns from `msg.sender`\\n     * @return amountTokenOut amount of base tokens redeemed\\n     * @dev Emits a {Redeem} event\\n     *\\n     * Requirements:\\n     * - (`tokenOut`) must be a valid base token.\\n     */\\n    function redeem(\\n        address receiver,\\n        uint256 amountSharesToRedeem,\\n        address tokenOut,\\n        uint256 minTokenOut,\\n        bool burnFromInternalBalance\\n    ) external returns (uint256 amountTokenOut);\\n\\n    /**\\n     * @notice exchangeRate * syBalance / 1e18 must return the asset balance of the account\\n     * @notice vice-versa, if a user uses some amount of tokens equivalent to X asset, the amount of sy\\n     he can mint must be X * exchangeRate / 1e18\\n     * @dev SYUtils's assetToSy & syToAsset should be used instead of raw multiplication\\n     & division\\n     */\\n    function exchangeRate() external view returns (uint256 res);\\n\\n    /**\\n     * @notice claims reward for (`user`)\\n     * @param user the user receiving their rewards\\n     * @return rewardAmounts an array of reward amounts in the same order as `getRewardTokens`\\n     * @dev\\n     * Emits a `ClaimRewards` event\\n     * See {getRewardTokens} for list of reward tokens\\n     */\\n    function claimRewards(address user) external returns (uint256[] memory rewardAmounts);\\n\\n    /**\\n     * @notice get the amount of unclaimed rewards for (`user`)\\n     * @param user the user to check for\\n     * @return rewardAmounts an array of reward amounts in the same order as `getRewardTokens`\\n     */\\n    function accruedRewards(address user) external view returns (uint256[] memory rewardAmounts);\\n\\n    function rewardIndexesCurrent() external returns (uint256[] memory indexes);\\n\\n    function rewardIndexesStored() external view returns (uint256[] memory indexes);\\n\\n    /**\\n     * @notice returns the list of reward token addresses\\n     */\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice returns the address of the underlying yield token\\n     */\\n    function yieldToken() external view returns (address);\\n\\n    /**\\n     * @notice returns all tokens that can mint this SY\\n     */\\n    function getTokensIn() external view returns (address[] memory res);\\n\\n    /**\\n     * @notice returns all tokens that can be redeemed by this SY\\n     */\\n    function getTokensOut() external view returns (address[] memory res);\\n\\n    function isValidTokenIn(address token) external view returns (bool);\\n\\n    function isValidTokenOut(address token) external view returns (bool);\\n\\n    function previewDeposit(\\n        address tokenIn,\\n        uint256 amountTokenToDeposit\\n    ) external view returns (uint256 amountSharesOut);\\n\\n    function previewRedeem(\\n        address tokenOut,\\n        uint256 amountSharesToRedeem\\n    ) external view returns (uint256 amountTokenOut);\\n\\n    /**\\n     * @notice This function contains information to interpret what the asset is\\n     * @return assetType the type of the asset (0 for ERC20 tokens, 1 for AMM liquidity tokens,\\n        2 for bridged yield bearing tokens like wstETH, rETH on Arbi whose the underlying asset doesn't exist on the chain)\\n     * @return assetAddress the address of the asset\\n     * @return assetDecimals the decimals of the asset\\n     */\\n    function assetInfo() external view returns (AssetType assetType, address assetAddress, uint8 assetDecimals);\\n}\\n\",\"keccak256\":\"0xe85f1526becc30e49ec0d4a42f01c54cc655fb1f815df2c71684fb76c9214ba5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/PendleLpOracleLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PendlePYOracleLib.sol\\\";\\n\\nlibrary PendleLpOracleLib {\\n    using PendlePYOracleLib for IPMarket;\\n    using PMath for uint256;\\n    using PMath for int256;\\n    using MarketMathCore for MarketState;\\n\\n    /**\\n      * This function returns the approximated twap rate LP/asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getLpToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = market.getSYandPYIndexCurrent();\\n        uint256 lpToAssetRateRaw = _getLpToAssetRateRaw(market, duration, pyIndex);\\n        if (syIndex >= pyIndex) {\\n            return lpToAssetRateRaw;\\n        } else {\\n            return (lpToAssetRateRaw * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /**\\n      * This function returns the approximated twap rate LP/asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getLpToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = market.getSYandPYIndexCurrent();\\n        uint256 lpToAssetRateRaw = _getLpToAssetRateRaw(market, duration, pyIndex);\\n        if (syIndex >= pyIndex) {\\n            return lpToAssetRateRaw.divDown(syIndex);\\n        } else {\\n            return lpToAssetRateRaw.divDown(pyIndex);\\n        }\\n    }\\n\\n    function _getLpToAssetRateRaw(\\n        IPMarket market,\\n        uint32 duration,\\n        uint256 pyIndex\\n    ) private view returns (uint256 lpToAssetRateRaw) {\\n        MarketState memory state = market.readState(address(0));\\n\\n        int256 totalHypotheticalAsset;\\n        if (state.expiry <= block.timestamp) {\\n            // 1 PT = 1 Asset post-expiry\\n            totalHypotheticalAsset = state.totalPt + PYIndexLib.syToAsset(PYIndex.wrap(pyIndex), state.totalSy);\\n        } else {\\n            MarketPreCompute memory comp = state.getMarketPreCompute(PYIndex.wrap(pyIndex), block.timestamp);\\n\\n            (int256 rateOracle, int256 rateHypTrade) = _getPtRatesRaw(market, state, duration);\\n            int256 cParam = LogExpMath.exp(comp.rateScalar.mulDown((rateOracle - comp.rateAnchor)));\\n\\n            int256 tradeSize = (cParam.mulDown(comp.totalAsset) - state.totalPt).divDown(\\n                PMath.IONE + cParam.divDown(rateHypTrade)\\n            );\\n\\n            totalHypotheticalAsset =\\n                comp.totalAsset -\\n                tradeSize.divDown(rateHypTrade) +\\n                (state.totalPt + tradeSize).divDown(rateOracle);\\n        }\\n\\n        lpToAssetRateRaw = totalHypotheticalAsset.divDown(state.totalLp).Uint();\\n    }\\n\\n    function _getPtRatesRaw(\\n        IPMarket market,\\n        MarketState memory state,\\n        uint32 duration\\n    ) private view returns (int256 rateOracle, int256 rateHypTrade) {\\n        uint256 lnImpliedRate = market.getMarketLnImpliedRate(duration);\\n        uint256 timeToExpiry = state.expiry - block.timestamp;\\n        rateOracle = MarketMathCore._getExchangeRateFromImpliedRate(lnImpliedRate, timeToExpiry);\\n\\n        int256 rateLastTrade = MarketMathCore._getExchangeRateFromImpliedRate(state.lastLnImpliedRate, timeToExpiry);\\n        rateHypTrade = (rateLastTrade + rateOracle) / 2;\\n    }\\n}\\n\",\"keccak256\":\"0xe3593acbbe7120bb2ee12591b57e2a53ae8f41d74e824ca9ede58b053cd28a8b\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/PendlePYOracleLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IPMarket.sol\\\";\\nimport \\\"../../core/libraries/math/PMath.sol\\\";\\n\\n// This library can & should be integrated directly for optimal gas usage.\\n// If you prefer not to integrate it directly, the PendlePtOracle contract (a pre-deployed version of this contract) can be used.\\nlibrary PendlePYOracleLib {\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    /**\\n     * This function returns the twap rate PT/Asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getPtToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getPtToAssetRateRaw(market, duration);\\n        } else {\\n            return (getPtToAssetRateRaw(market, duration) * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /**\\n     * This function returns the twap rate YT/Asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getYtToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getYtToAssetRateRaw(market, duration);\\n        } else {\\n            return (getYtToAssetRateRaw(market, duration) * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /// @notice Similar to getPtToAsset but returns the rate in SY instead\\n    function getPtToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getPtToAssetRateRaw(market, duration).divDown(syIndex);\\n        } else {\\n            return getPtToAssetRateRaw(market, duration).divDown(pyIndex);\\n        }\\n    }\\n\\n    /// @notice Similar to getPtToAsset but returns the rate in SY instead\\n    function getYtToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getYtToAssetRateRaw(market, duration).divDown(syIndex);\\n        } else {\\n            return getYtToAssetRateRaw(market, duration).divDown(pyIndex);\\n        }\\n    }\\n\\n    /// @notice returns the raw rate without taking into account whether SY is solvent\\n    function getPtToAssetRateRaw(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        uint256 expiry = market.expiry();\\n\\n        if (expiry <= block.timestamp) {\\n            return PMath.ONE;\\n        } else {\\n            uint256 lnImpliedRate = getMarketLnImpliedRate(market, duration);\\n            uint256 timeToExpiry = expiry - block.timestamp;\\n            uint256 assetToPtRate = MarketMathCore._getExchangeRateFromImpliedRate(lnImpliedRate, timeToExpiry).Uint();\\n            return PMath.ONE.divDown(assetToPtRate);\\n        }\\n    }\\n\\n    /// @notice returns the raw rate without taking into account whether SY is solvent\\n    function getYtToAssetRateRaw(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        return PMath.ONE - getPtToAssetRateRaw(market, duration);\\n    }\\n\\n    function getSYandPYIndexCurrent(IPMarket market) internal view returns (uint256 syIndex, uint256 pyIndex) {\\n        (IStandardizedYield SY, , IPYieldToken YT) = market.readTokens();\\n\\n        syIndex = SY.exchangeRate();\\n        uint256 pyIndexStored = YT.pyIndexStored();\\n\\n        if (YT.doCacheIndexSameBlock() && YT.pyIndexLastUpdatedBlock() == block.number) {\\n            pyIndex = pyIndexStored;\\n        } else {\\n            pyIndex = PMath.max(syIndex, pyIndexStored);\\n        }\\n    }\\n\\n    function getMarketLnImpliedRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        if (duration == 0) {\\n            (,,uint96 lnImpliedRate,,,) = IPMarket(market)._storage();\\n            return uint256(lnImpliedRate);\\n        }\\n\\n        uint32[] memory durations = new uint32[](2);\\n        durations[0] = duration;\\n\\n        uint216[] memory lnImpliedRateCumulative = market.observe(durations);\\n        return (lnImpliedRateCumulative[1] - lnImpliedRateCumulative[0]) / duration;\\n    }\\n}\\n\",\"keccak256\":\"0x5dea116d163afb0b084d666a8b4572fff8f04a31f9ebe13d83557363fee90158\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../interfaces/IPChainlinkOracle.sol\\\";\\nimport \\\"../PendleLpOracleLib.sol\\\";\\n\\n/**\\n * @dev The round data returned from this contract will follow:\\n * - There will be only one round (roundId=0)\\n * - startedAt=0, updatedAt=block.timestamp\\n */\\ncontract PendleChainlinkOracle is IPChainlinkOracle {\\n    error InvalidRoundId();\\n\\n    // solhint-disable immutable-vars-naming\\n    address public immutable factory;\\n\\n    address public immutable market;\\n    uint32 public immutable twapDuration;\\n    PendleOracleType public immutable baseOracleType;\\n\\n    uint256 public immutable fromTokenScale;\\n    uint256 public immutable toTokenScale;\\n\\n    function(IPMarket, uint32) internal view returns (uint256) private immutable _getRawPendlePrice;\\n\\n    modifier roundIdIsZero(uint80 roundId) {\\n        if (roundId != 0) {\\n            revert InvalidRoundId();\\n        }\\n        _;\\n    }\\n\\n    constructor(address _market, uint32 _twapDuration, PendleOracleType _baseOracleType) {\\n        factory = msg.sender;\\n        market = _market;\\n        twapDuration = _twapDuration;\\n        baseOracleType = _baseOracleType;\\n        (uint256 fromTokenDecimals, uint256 toTokenDecimals) = _readDecimals(_market, _baseOracleType);\\n        (fromTokenScale, toTokenScale) = (10 ** fromTokenDecimals, 10 ** toTokenDecimals);\\n        _getRawPendlePrice = _getRawPendlePriceFunc();\\n    }\\n\\n    // =================================================================\\n    //                          CHAINLINK INTERFACE\\n    // =================================================================\\n\\n    /**\\n     * @notice The round data returned from this contract will follow:\\n     * - answer will satisfy 1 natural unit of PendleToken = (answer/1e18) natural unit of OutputToken\\n     * - In other words, 10**(PendleToken.decimals) = (answer/1e18) * 10**(OutputToken.decimals)\\n     * @param roundId always 0 for this contract\\n     * @param answer The answer (in 18 decimals)\\n     * @param startedAt always 0 for this contract\\n     * @param updatedAt always block.timestamp for this contract\\n     * @param answeredInRound always 0 for this contract\\n     */\\n    function latestRoundData()\\n        public\\n        view\\n        virtual\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n    {\\n        roundId = 0;\\n        answer = _getPendleTokenPrice();\\n        startedAt = 0;\\n        updatedAt = block.timestamp;\\n        answeredInRound = 0;\\n    }\\n\\n    function getRoundData(\\n        uint80 roundId\\n    ) external view roundIdIsZero(roundId) returns (uint80, int256, uint256, uint256, uint80) {\\n        return latestRoundData();\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function description() external pure returns (string memory) {\\n        return \\\"Pendle Chainlink-compatible Oracle\\\";\\n    }\\n\\n    function version() external pure returns (uint256) {\\n        return 1;\\n    }\\n\\n    // =================================================================\\n    //                          PRICING FUNCTIONS\\n    // =================================================================\\n\\n    function _getPendleTokenPrice() internal view returns (int256) {\\n        return _descalePrice(_getRawPendlePrice(IPMarket(market), twapDuration));\\n    }\\n\\n    function _descalePrice(uint256 price) private view returns (int256 unwrappedPrice) {\\n        return PMath.Int((price * fromTokenScale) / toTokenScale);\\n    }\\n\\n    // =================================================================\\n    //                          USE ONLY AT INITIALIZATION\\n    // =================================================================\\n\\n    function _getRawPendlePriceFunc()\\n        internal\\n        view\\n        returns (function(IPMarket, uint32) internal view returns (uint256))\\n    {\\n        if (baseOracleType == PendleOracleType.PT_TO_SY) {\\n            return PendlePYOracleLib.getPtToSyRate;\\n        } else if (baseOracleType == PendleOracleType.PT_TO_ASSET) {\\n            return PendlePYOracleLib.getPtToAssetRate;\\n        } else if (baseOracleType == PendleOracleType.LP_TO_SY) {\\n            return PendleLpOracleLib.getLpToSyRate;\\n        } else if (baseOracleType == PendleOracleType.LP_TO_ASSET) {\\n            return PendleLpOracleLib.getLpToAssetRate;\\n        } else {\\n            revert(\\\"not supported\\\");\\n        }\\n    }\\n\\n    function _readDecimals(\\n        address _market,\\n        PendleOracleType _oracleType\\n    ) internal view returns (uint8 _fromDecimals, uint8 _toDecimals) {\\n        (IStandardizedYield SY, , ) = IPMarket(_market).readTokens();\\n\\n        uint8 syDecimals = SY.decimals();\\n        (, , uint8 assetDecimals) = SY.assetInfo();\\n\\n        if (_oracleType == PendleOracleType.PT_TO_ASSET) {\\n            return (assetDecimals, assetDecimals);\\n        } else if (_oracleType == PendleOracleType.PT_TO_SY) {\\n            return (assetDecimals, syDecimals);\\n        } else if (_oracleType == PendleOracleType.LP_TO_ASSET) {\\n            return (18, assetDecimals);\\n        } else if (_oracleType == PendleOracleType.LP_TO_SY) {\\n            return (18, syDecimals);\\n        } else {\\n            revert(\\\"not supported\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa53eac5458c69dd9400a218e9a4600c970154d68be17617ef408b4eb8dd4f700\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"./PendleChainlinkOracle.sol\\\";\\nimport \\\"./PendleChainlinkOracleWithQuote.sol\\\";\\nimport \\\"../../../interfaces/IPChainlinkOracleFactory.sol\\\";\\nimport \\\"../../../interfaces/IPPYLpOracle.sol\\\";\\n\\ncontract PendleChainlinkOracleFactory is IPChainlinkOracleFactory {\\n    error OracleAlreadyExists();\\n\\n    error OracleIncreaseCardinalityRequired(uint32 cardinalityRequired);\\n    error OracleOldestObservationNotSatisfied();\\n\\n    // [keccak256(market, duration, baseOracleType)]\\n    mapping(bytes32 oracleId => address oracleAddr) internal oracles;\\n\\n    // [keccak256(market, duration, baseOracleType, quoteOracle)]\\n    mapping(bytes32 oracleId => address oracleAddr) internal oraclesWithQuote;\\n\\n    address public immutable pyLpOracle;\\n\\n    constructor(address _pyLpOracle) {\\n        pyLpOracle = _pyLpOracle;\\n    }\\n\\n    // =================================================================\\n    //                          CREATE ORACLE\\n    // =================================================================\\n\\n    function createOracle(\\n        address market,\\n        uint32 twapDuration,\\n        PendleOracleType baseOracleType\\n    ) external returns (address oracle) {\\n        bytes32 oracleId = getOracleId(market, twapDuration, baseOracleType);\\n        if (oracles[oracleId] != address(0)) revert OracleAlreadyExists();\\n\\n        checkMarketOracleState(market, twapDuration);\\n\\n        oracle = address(new PendleChainlinkOracle(market, twapDuration, baseOracleType));\\n        oracles[oracleId] = oracle;\\n        emit OracleCreated(market, twapDuration, baseOracleType, oracle, oracleId);\\n    }\\n\\n    /**\\n     * @dev quoteOracle must has Chainlink-compatible interface\\n     */\\n    function createOracleWithQuote(\\n        address market,\\n        uint32 twapDuration,\\n        PendleOracleType baseOracleType,\\n        address quoteOracle\\n    ) external returns (address oracle) {\\n        bytes32 oracleId = getOracleWithQuoteId(market, twapDuration, baseOracleType, quoteOracle);\\n        if (oraclesWithQuote[oracleId] != address(0)) revert OracleAlreadyExists();\\n\\n        checkMarketOracleState(market, twapDuration);\\n\\n        oracle = address(new PendleChainlinkOracleWithQuote(market, twapDuration, baseOracleType, quoteOracle));\\n        oraclesWithQuote[oracleId] = oracle;\\n        emit OracleWithQuoteCreated(market, twapDuration, baseOracleType, quoteOracle, oracle, oracleId);\\n    }\\n\\n    // =================================================================\\n    //                          GET ORACLE\\n    // =================================================================\\n\\n    function getOracle(\\n        address market,\\n        uint32 twapDuration,\\n        PendleOracleType baseOracleType\\n    ) public view returns (address) {\\n        return oracles[getOracleId(market, twapDuration, baseOracleType)];\\n    }\\n\\n    function getOracleWithQuote(\\n        address market,\\n        uint32 twapDuration,\\n        PendleOracleType baseOracleType,\\n        address quoteOracle\\n    ) public view returns (address) {\\n        return oraclesWithQuote[getOracleWithQuoteId(market, twapDuration, baseOracleType, quoteOracle)];\\n    }\\n\\n    function getOracleId(\\n        address market,\\n        uint32 twapDuration,\\n        PendleOracleType baseOracleType\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(market, twapDuration, baseOracleType));\\n    }\\n\\n    function getOracleWithQuoteId(\\n        address market,\\n        uint32 twapDuration,\\n        PendleOracleType baseOracleType,\\n        address quoteOracle\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(market, twapDuration, baseOracleType, quoteOracle));\\n    }\\n\\n    // =================================================================\\n    //                          CHECK ORACLE STATE\\n    // =================================================================\\n\\n    function checkMarketOracleState(address market, uint32 twapDuration) public view {\\n        (bool increaseCardinalityRequired, uint32 cardinalityRequired, bool oldestObservationSatisfied) = IPPYLpOracle(\\n            pyLpOracle\\n        ).getOracleState(market, twapDuration);\\n\\n        if (increaseCardinalityRequired) {\\n            // call IPMarket(market).increaseObservationsCardinalityNext(cardinalityRequired) then wait for twapDuration seconds\\n            revert OracleIncreaseCardinalityRequired(cardinalityRequired);\\n        }\\n        if (!oldestObservationSatisfied) {\\n            // wait for twapDuration seconds\\n            revert OracleOldestObservationNotSatisfied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2610f56f4dcf8aff09cc4388f728169b75f464117eaf5aa5b1985385fed5d6a5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracleWithQuote.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"./PendleChainlinkOracle.sol\\\";\\n\\n/**\\n * @dev The round data returned from this contract will follow:\\n * - There will be only one round (roundId=0)\\n * - startedAt=0, updatedAt=quoteOracle.updatedAt()\\n */\\ncontract PendleChainlinkOracleWithQuote is PendleChainlinkOracle {\\n    // solhint-disable immutable-vars-naming\\n    address public immutable quoteOracle;\\n    int256 public immutable quoteScale;\\n\\n    constructor(\\n        address _market,\\n        uint32 _twapDuration,\\n        PendleOracleType _baseOracleType,\\n        address _quoteOracle\\n    ) PendleChainlinkOracle(_market, _twapDuration, _baseOracleType) {\\n        quoteOracle = _quoteOracle;\\n        quoteScale = PMath.Int(10 ** AggregatorV3Interface(_quoteOracle).decimals());\\n    }\\n\\n    /**\\n     * @notice The round data returned from this contract will follow:\\n     * - answer will satisfy 1 natural unit of PendleToken = (answer/1e18) natural unit of quoteToken\\n     * - In other words, 10**(PendleToken.decimals) = (answer/1e18) * 10**(quoteToken.decimals)\\n     * @return roundId always 0 for this contract\\n     * @return answer The answer (in 18 decimals)\\n     * @return startedAt always 0 for this contract\\n     * @return updatedAt will be the same as quoteOracle.updatedAt()\\n     * @return answeredInRound always 0 for this contract\\n     */\\n    function latestRoundData()\\n        public\\n        view\\n        override\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n    {\\n        (, int256 quoteAnswer, , uint256 quoteUpdatedAt, ) = AggregatorV3Interface(quoteOracle).latestRoundData();\\n\\n        roundId = 0;\\n        answer = (_getPendleTokenPrice() * quoteAnswer) / quoteScale;\\n        updatedAt = quoteUpdatedAt;\\n        startedAt = 0;\\n        answeredInRound = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc2ebff52d7db5740d4eabef823b49f0ccf4319e790e954e15bdc6d74ebe0c527\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a03461007157601f61482238819003918201601f19168301916001600160401b038311848410176100765780849260209460405283398101031261007157516001600160a01b038116810361007157608052604051614795908161008d823960805181818161013501526106410152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe604060808152600490813610156200001657600080fd5b600091823560e01c9081630b5af9f8146200030d5781631bdfe05314620002c45781632d9a4a9d14620002aa578163451d27b81462000164575080638ca06ea6146200011f578063ca6ec89a14620000e5578063e233c36614620000b15763e54f48df146200008457600080fd5b34620000ad57602090620000a66200009c3662000490565b92919091620005e1565b9051908152f35b5080fd5b5034620000ad57602091620000ca6200009c3662000490565b8152600183528190205490516001600160a01b039091168152f35b5034620000ad5760209162000105620000fe3662000447565b91620005af565b81528083528190205490516001600160a01b039091168152f35b5034620000ad5781600319360112620000ad57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b838334620000ad57620001773662000490565b9092916200018882858386620005e1565b8087526001602052858720546001600160a01b0392919083166200029a57620001b282866200060c565b86516120d18082019082821067ffffffffffffffff83111762000287578689868a8695620001e6956200268f88396200053a565b039089f080156200027d578316978181526001602052878120896bffffffffffffffffffffffff60a01b825416179055898710156200026a5750602098509163ffffffff6060927f0c00ff77242aa7973d8bb5cb73ecc1733bf615b0aaf967a50c2b7672f9110da394838a51971687528a8c8801528987015216941692a451908152f35b634e487b7160e01b815260218a52602490fd5b87513d8a823e3d90fd5b634e487b7160e01b8b5260418c5260248bfd5b86516363ed528560e01b81528990fd5b505034620000ad57602090620000a6620000fe3662000447565b919050346200030957366003190112620000ad57356001600160a01b0381168103620000ad5760243563ffffffff81168103620003095762000306916200060c565b80f35b8280fd5b838334620000ad57620003203662000447565b91906200032f838284620005af565b80865260208690528486205490916001600160a01b0391821662000437576200035981856200060c565b8551611f638082019082821067ffffffffffffffff831117620004245787848885946200038c946200072c873962000508565b039088f080156200041a5782169683815280602052868120886bffffffffffffffffffffffff60a01b82541617905588861015620004075750602097507f1f9e05a536e40324537d577d17a8b32d1d2a2894f53cce4c730bc82235d6ab589163ffffffff87928351958a87528b87015216941692a451908152f35b634e487b7160e01b815260218952602490fd5b86513d89823e3d90fd5b634e487b7160e01b8a5260418b5260248afd5b85516363ed528560e01b81528890fd5b60609060031901126200048b576004356001600160a01b03811681036200048b579060243563ffffffff811681036200048b579060443560048110156200048b5790565b600080fd5b60809060031901126200048b576001600160a01b039060043582811681036200048b579160243563ffffffff811681036200048b579160443560048110156200048b579160643590811681036200048b5790565b906004821015620004f25752565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03909116815263ffffffff919091166020820152606081019291620005389160400190620004e4565b565b6001600160a01b03918216815263ffffffff909216602083015260808201949391926060929062000570906040860190620004e4565b16910152565b90601f8019910116810190811067ffffffffffffffff8211176200059957604052565b634e487b7160e01b600052604160045260246000fd5b9190620005db90620005cc60405193849260208401968762000508565b03601f19810183528262000576565b51902090565b9290620005cc620005db926040519485936020850197886200053a565b519081151582036200048b57565b60405162439f4b60e91b81526001600160a01b03918216600482015263ffffffff9092166024830152606090829060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156200071f57600080918193620006b5575b50620006985750156200068657565b604051631cedb8bf60e11b8152600490fd5b6040516380b1d95f60e01b815261ffff9091166004820152602490fd5b915091506060813d821162000716575b81620006d46060938362000576565b81010312620000ad57620006e881620005fe565b9060208101519261ffff8416840362000713575060406200070a9101620005fe565b91903862000677565b80fd5b3d9150620006c5565b6040513d6000823e3d90fdfe6101608060405234620001285760608162001f6380380380916200002482856200012d565b83398101031262000128576200003a8162000167565b9060208101519063ffffffff821682036200012857604001516004811015620001285760ff6200008c620000846200009493868496336080528160a05260c0528160e05262000243565b94166200017c565b92166200017c565b610120908152610100918252620000aa620001a1565b61014090815260405191611ad693846200048d853960805184610274015260a05184818160d0015281816102f20152610393015260c05184818160af015281816102d10152610511015260e0518461054a01525183818161016001526104b5015251828181610187015261023801525181818160fa015261031c0152f35b600080fd5b601f909101601f19168101906001600160401b038211908210176200015157604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200012857565b604d81116200018b57600a0a90565b634e487b7160e01b600052601160045260246000fd5b60e05160048110156200021e5780620001ba5750600490565b60018103620001c95750600390565b60028103620001d85750600290565b600303620001e557600190565b60405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081cdd5c1c1bdc9d1959609a1b6044820152606490fd5b0390fd5b634e487b7160e01b600052602160045260246000fd5b519060ff821682036200012857565b60408051630b2339af60e21b81526060949392600492916001600160a01b0391879082908690829086165afa908115620003dd576000916200042f575b50825163313ce56760e01b81529491166020858581845afa948515620003dd57908791600096620003e8575b508351630a40bee560e41b815291908290869082905afa968715620003dd576000976200037d575b505082811015620003685760018103620002f057505050508190565b9294928062000300575050509190565b9294926003810362000316575050505060129190565b92945090916002036200032b57505060129190565b6200021a92505191829162461bcd60e51b8352820160609060208152600d60208201526c1b9bdd081cdd5c1c1bdc9d1959609a1b60408201520190565b602183634e487b7160e01b6000525260246000fd5b8181989293983d8311620003d5575b6200039881836200012d565b81010312620003d257600282511015620003d257508181620003c16020620003c9940162000167565b500162000234565b943880620002d4565b80fd5b503d6200038c565b83513d6000823e3d90fd5b9150946020823d821162000426575b8162000406602093836200012d565b81010312620003d25750866200041d859262000234565b959091620002ac565b3d9150620003f7565b908782813d831162000484575b6200044881836200012d565b81010312620003d25781519183831683036200048057602081015184811603620004805784015183811603620003d257503862000280565b5080fd5b503d6200043c56fe608060408181526004908136101561001657600080fd5b600092833560e01c9081630aa33a24146105355750806326d89545146104f4578063313ce567146104d85780634ae5fa9b1461049d57806354fd4d50146104815780637284e416146103c257806380f556051461037e5780639a6fc8f5146102a3578063c45a01551461025f578063ee81d997146102205763feaf968c1461009d57600080fd5b346101db57826003193601126101db577f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001811461020c57806002146101f857806003146101df5760041461014b57634e487b7160e01b855260518452602485fd5b6101ac9293506101859161015e91611487565b7f0000000000000000000000000000000000000000000000000000000000000000906105c3565b7f0000000000000000000000000000000000000000000000000000000000000000906105d6565b906001600160ff1b0382116101db5791808360a094519382855260208501528301524260608301526080820152f35b8280fd5b506101ac929350610185916101f391611454565b61015e565b506101ac929350610185916101f39161062e565b506101ac929350610185916101f3916105f6565b83823461025b578160031936011261025b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5080fd5b83823461025b578160031936011261025b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101db5760203660031901126101db57813569ffffffffffffffffffff811680910361037a5761036d577f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001811461020c57806002146101f857806003146101df5760041461014b57634e487b7160e01b855260518452602485fd5b5163bfbe031f60e01b8152fd5b8380fd5b83823461025b578160031936011261025b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5090346101db57826003193601126101db57815190606082019082821067ffffffffffffffff83111761046e57508252602281526020907f50656e646c6520436861696e6c696e6b2d636f6d70617469626c65204f72616382820152616c6560f01b8382015282519382859384528251928382860152825b84811061045857505050828201840152601f01601f19168101030190f35b818101830151888201880152879550820161043a565b634e487b7160e01b855260419052602484fd5b83823461025b578160031936011261025b576020905160018152f35b83823461025b578160031936011261025b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83823461025b578160031936011261025b576020905160128152f35b83823461025b578160031936011261025b576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8390853461058d578060031936011261058d577f0000000000000000000000000000000000000000000000000000000000000000908382101561057a57602083838152f35b634e487b7160e01b815260218452602490fd5b80fd5b90670de0b6b3a7640000918281029281840414901517156105ad57565b634e487b7160e01b600052601160045260246000fd5b818102929181159184041417156105ad57565b81156105e0570490565b634e487b7160e01b600052601260045260246000fd5b9061060c6106038361157e565b928391946106f7565b9181811061061957505090565b6106269061062b936105c3565b6105d6565b90565b61064361063a8261157e565b938491936106f7565b91808210610658575061062661062b92610590565b905061062661062b92610590565b90670de0b6b3a7640000918281029281840414901517156105ad5761062b916105d6565b90601f8019910116810190811067ffffffffffffffff8211176106ac57604052565b634e487b7160e01b600052604160045260246000fd5b818103929160001380158285131691841216176105ad57565b919091600083820193841291129080158216911516176105ad57565b60405163794052f360e01b8152600060048201819052936001600160a01b0393909260249261012090818186818a87165afa968715610bbb578897610af8575b50505060a085015142106107875750505090610776604061076c61077b94610766855191602087015190610c3f565b906106db565b925b015191610bff565b610d18565b9080821261058d575090565b604051936080850185811067ffffffffffffffff821117610ae5576040528685528660208601528660408601528660608601524260a08701511115610ad3576107d44260a0880151610bc6565b9060808701516301e133809182820291808305841490151715610a30576001600160ff1b0391828511610a6d578415610ac057600160ff1b8114600019861416610aad578490058a811315610a96578852602089015161083391610c3f565b80602089015288519081158015610a8e575b610a71575050875161010089015191602089015193610866868b51956105c3565b04908111610a6d5761087790610d22565b92670de0b6b3a76400008412610a55579061077661089861089e93836106db565b91610bff565b670de0b6b3a76400008114610a4357898112670de0b6b3a764000082810312811690670de0b6b3a76400008381031390151617610a30579361092c6109619461091d6109369561091761095c9b9a9661077661091261090d8d61077660029f670de0b6b3a76400000391610bff565b611012565b610bff565b906106c2565b60408b015260c08b0151610bd3565b606089015261181e565b61094e6109474260a08a0151610bc6565b8092610bd3565b948591610100890151610bd3565b6106db565b059061098e670de0b6b3a764000061098886516109826040890151886106c2565b90610c1c565b05610d22565b6109be836107766109b8670de0b6b3a76400006109af60208b015187610c1c565b058a51906106c2565b93610bff565b9182670de0b6b3a764000001928312600116610a1e57509361076661077694610776610912610a106040976109176020610a03610a189a61077b9f9e61077690610bff565b9801519161077689610bff565b9489516106db565b9261076e565b634e487b7160e01b8852601160045287fd5b634e487b7160e01b8a526011600452868afd5b60405163a9c8b14d60e01b8152600490fd5b60405163329e322960e21b8152600481018590528890fd5b8a80fd5b60449250876040519263b1c4aefb60e01b84526004840152820152fd5b508015610845565b879060405190630e520c3b60e11b82526004820152fd5b634e487b7160e01b8b526011600452878bfd5b634e487b7160e01b8b526012600452878bfd5b60405163b2094b5960e01b8152600490fd5b634e487b7160e01b885260416004528488fd5b90918093975082813d8311610bb4575b610b12818361068a565b81010312610b9d5760405192830183811067ffffffffffffffff821117610ba15760405281518352602082015160208401526040820151604084015260608201519081168103610b9d5760608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100809101519082015293388080610737565b8780fd5b634e487b7160e01b895260416004528589fd5b503d610b08565b6040513d8a823e3d90fd5b919082039182116105ad57565b6301e1338091610be2916105c3565b046001600160ff1b038111610bfa5761062b90610d22565b600080fd5b90670de0b6b3a7640000918281029281840514901517156105ad57565b818102929160008212600160ff1b8214166105ad5781840514901517156105ad57565b6000821215610cb757600019915b600080821315610c835750670de0b6b3a764000091610c6b916105c3565b046001600160ff1b038111610bfa5761062b91610c1c565b600160ff1b8214610ca35791610c6b91670de0b6b3a764000093036105c3565b634e487b7160e01b81526011600452602490fd5b600191610c4d565b15610cc657565b60405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908195e1c1bdb995b9d60821b6044820152606490fd5b80156105e0576ec097ce7bc90715b34b9f10000000000590565b81156105e0570590565b680238fd42c5cf03ffff1981121580610fff575b610d3f90610cbf565b60008112610fea576064906806f05b59d3b20000008112610f9d576806f05b59d3b1ffffff190168056bc75e2d6310000082770195e54c5dd42177f53a27172fa9ec630262827000000000925b0280829168ad78ebc5ac62000000811215610f77575b50806856bc75e2d63100000084921215610f53575b682b5e3af16b18800000811215610f31575b6815af1d78b58c400000811215610f0f575b680ad78ebc5ac6200000811215610eee575b81811215610ecd575b6802b5e3af16b1880000811215610eac575b68015af1d78b58c40000811215610e8b575b60028282800205056003838383020505600484848302050560058585830205056006868683020505600787878302050590600888888402050592600989898602050594600a8a8a8802050596600b8b8b8a02050598600c8c8c8c0205059a0101010101010101010101010205020590565b6806f5f1775788937937829168015af1d78b58c3ffff190193020591610e1a565b6808f00f760a4b2db55d82916802b5e3af16b187ffff190193020591610e08565b680ebc5fb41746121110829168056bc75e2d630fffff190193020591610df6565b68280e60114edb805d038291680ad78ebc5ac61fffff190193020591610ded565b690127fa27722cc06cc5e282916815af1d78b58c3fffff190193020591610ddb565b693f1fce3da636ea5cf8508291682b5e3af16b187fffff190193020591610dc9565b6b02df0ab5a80a22c61ab5a70082916856bc75e2d630ffffff190193020591610db7565b6e01855144814a7ff805980ff0084000925068ad78ebc5ac61ffffff1901905082610da2565b6803782dace9d90000008112610fd7576803782dace9d8ffffff190168056bc75e2d63100000826b1425982cf597cd205cef738092610d8c565b68056bc75e2d6310000082600192610d8c565b610ff690600003610d22565b61062b90610cfe565b5068070c1cc73b00c80000811315610d36565b60008113156110e55780670c7d713b49da000012806110d4575b156110cb57670de0b6b3a7640000906ec097ce7bc90715b34b9f10000000009061106f908302828101906ec097ce7bc90715b34b9f0fffffffff19018302610d18565b9080828002059181838202058284820205838582020591848684020593858786020595808888020597880205600f900596600d900595600b900594600990059360079005926005900591600390050101010101010160011b0590565b61062b9061111a565b50670f43fc2c04ee0000811261102c565b60405162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b6044820152606490fd5b670de0b6b3a7640000811261143d5760649060007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c0000000000000821215611412575b73011798004d755d3c8bc8e03204cf44619e0000008212156113f1575b8202908202816e01855144814a7ff805980ff008400082818112156113ca575b5050506b02df0ab5a80a22c61ab5a700808212156113aa575b50693f1fce3da636ea5cf8508082121561138a575b50690127fa27722cc06cc5e28082121561136a575b5068280e60114edb805d038082121561134a575b50680ebc5fb4174612111080821215611333575b506808f00f760a4b2db55d80821215611313575b506806f5f1775788937937808212156112f3575b506806248f33704b286603808212156112d4575b506805c548670b9510e7ac808212156112b5575b5061127468056bc75e2d6310000091828082019168056bc75e2d630fffff190102610d18565b9080828002059181838202058284820205916003600560076009600b888a89020598808b8b02059a8b0205059805960594059205010101010160011b010590565b68056bc75e2d631000006756bc75e2d63100009202059101903861124e565b68056bc75e2d6310000067ad78ebc5ac6200009202059101903861123a565b68056bc75e2d6310000068015af1d78b58c4000092020591019038611226565b68056bc75e2d631000006802b5e3af16b188000092020591019038611212565b68056bc75e2d6310000080920205910190386111fe565b68056bc75e2d63100000680ad78ebc5ac6200000920205910190386111ea565b68056bc75e2d631000006815af1d78b58c400000920205910190386111d6565b68056bc75e2d63100000682b5e3af16b18800000920205910190386111c1565b68056bc75e2d631000006856bc75e2d631000000920205910190386111ac565b68056bc75e2d631000009192945068ad78ebc5ac6200000093500205910190388080611193565b6b1425982cf597cd205cef7380909105906803782dace9d900000001611173565b50770195e54c5dd42177f53a27172fa9ec63026282700000000090056806f05b59d3b2000000611156565b61144961144e91610cfe565b61111a565b60000390565b9061145e8261157e565b9081811061147157505061062b916114b8565b611482610626929361062b956114b8565b6105c3565b6114908161157e565b9091908083106114ad575061062b926114a8916114b8565b610666565b915061062b926114a8915b6040516370c264df60e11b815290916020826004816001600160a01b0387165afa9182156115725760009261153f575b504282116114ff57505050670de0b6b3a764000090565b61150f6115179161151d9461181e565b914290610bc6565b90610bd3565b60008112610bfa5780156105e0576ec097ce7bc90715b34b9f10000000000490565b90916020823d821161156a575b816115596020938361068a565b8101031261058d57505190386114e8565b3d915061154c565b6040513d6000823e3d90fd5b906040918251630b2339af60e21b815260608160048160018060a01b038096165afa9384156116cc576000918295611784575b5082815192633ba0b9a960e01b8452836004816020978894165afa92831561174a57600093611755575b5082951690805193636951ac2760e11b85528085600481865afa94851561174a5760009561171b575b50815163516399df60e01b8152928184600481845afa938415611710576000946116d6575b5083611650575b50505060001461163e575090565b908082111561164b575090565b905090565b82516360e0a9e160e01b81529293508190839060049082905afa9283156116cc575060009261168f575b50506001600160801b03164314388080611630565b81813d83116116c5575b6116a3818361068a565b8101031261025b5751906001600160801b038216820361058d5750388061167a565b503d611699565b513d6000823e3d90fd5b8281819693963d8311611709575b6116ee818361068a565b8101031261025b575190811515820361058d57509238611629565b503d6116e4565b83513d6000823e3d90fd5b90948582813d8311611743575b611732818361068a565b8101031261058d5750519338611604565b503d611728565b82513d6000823e3d90fd5b90928482813d831161177d575b61176c818361068a565b8101031261058d57505191386115db565b503d611762565b9094506060813d82116117d6575b8161179f6060938361068a565b8101031261025b5780519083821682036101db576020810151848116036101db5785015191838316830361058d57509093386115b1565b3d9150611792565b519081600f0b8203610bfa57565b519061ffff82168203610bfa57565b8051156118085760200190565b634e487b7160e01b600052603260045260246000fd5b9063ffffffff8091169081156119d3576040928351606081019167ffffffffffffffff92828110848211176106ac578652600282526020918281018736823786611867836117fb565b52875195869263883bdbfd60e01b84526024840190866004860152518091526044840192916000905b878383106119b6575060009694869003948694506001600160a01b0316925050505afa9283156119ab576000936118fd575b50505080516001101561180857918201516001600160d81b03929083169083906118eb906117fb565b511690038281116105ad578216041690565b9091923d8082843e61190f818461068a565b820191838184031261025b578051908582116101db57019082601f8301121561058d578151948511611997578460051b9187519561194f8685018861068a565b8652848087019382010193841161025b578401915b8383106119785750505050503880806118c2565b82516001600160d81b03811681036101db578152918401918401611964565b634e487b7160e01b81526041600452602490fd5b85513d6000823e3d90fd5b8451821686528a9650948501949093019260019190910190611890565b50506040516361fdc86b60e11b81529060c090829060049082906001600160a01b03165afa90811561157257600091611a14575b506001600160601b031690565b60c0813d8211611a98575b81611a2c60c0938361068a565b8101031261025b57611a3d816117de565b50611a4a602082016117de565b506040810151916001600160601b038316830361058d575090611a9160a083611a7d60606001600160601b0396016117ec565b50611a8a608082016117ec565b50016117ec565b5090611a07565b3d9150611a1f56fea264697066735822122001a8a84c0807ae5ed4b25b37f232e0543b8eebfc4d73799458bd2de3b57770c364736f6c634300081400336101a08060405234620001a757608081620020d1803803809162000024828562000212565b833981010312620001a7576200003a816200024c565b9060208101519063ffffffff82168203620001a75760408101516004811015620001a7576200009c6200009460ff959286936200007e6060620000a497016200024c565b96336080528160a05260c0528160e05262000312565b951662000270565b931662000270565b90610120918252610100928352620000bb6200027f565b61014090815261016082815260405163313ce56760e01b81529192909190602090829060049082906001600160a01b03165afa80156200020657600090620001c2575b60ff915016604d8111620001ac57600a0a916001600160ff1b038311620001a75761018092835260405193611b7895866200055987396080518661015e015260a0518681816101ed0152611978015260c0518681816103b3015261199a015260e051866104250152518581816103130152611a210152518481816101270152611a48015251836119bb015251828181610367015261193e0152518181816103ef0152611a8a0152f35b600080fd5b634e487b7160e01b600052601160045260246000fd5b6020823d8211620001fd575b81620001dd6020938362000212565b81010312620001fa5750620001f460ff9162000261565b620000fe565b80fd5b3d9150620001ce565b6040513d6000823e3d90fd5b601f909101601f19168101906001600160401b038211908210176200023657604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001a757565b519060ff82168203620001a757565b604d8111620001ac57600a0a90565b60e0516004811015620002fc5780620002985750600490565b60018103620002a75750600390565b60028103620002b65750600290565b600303620002c357600190565b60405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081cdd5c1c1bdc9d1959609a1b6044820152606490fd5b0390fd5b634e487b7160e01b600052602160045260246000fd5b60408051630b2339af60e21b81526060949392600492916001600160a01b0391879082908690829086165afa908115620004a957600091620004fb575b50825163313ce56760e01b81529491166020858581845afa948515620004a957908791600096620004b4575b508351630a40bee560e41b815291908290869082905afa968715620004a9576000976200044c575b505082811015620004375760018103620003bf57505050508190565b92949280620003cf575050509190565b92949260038103620003e5575050505060129190565b9294509091600203620003fa57505060129190565b620002f892505191829162461bcd60e51b8352820160609060208152600d60208201526c1b9bdd081cdd5c1c1bdc9d1959609a1b60408201520190565b602183634e487b7160e01b6000525260246000fd5b8181989293983d8311620004a1575b62000467818362000212565b81010312620001fa57600282511015620001fa575081816200049060206200049894016200024c565b500162000261565b943880620003a3565b503d6200045b565b83513d6000823e3d90fd5b9150946020823d8211620004f2575b81620004d26020938362000212565b81010312620001fa575086620004e9859262000261565b9590916200037b565b3d9150620004c3565b908782813d831162000550575b62000514818362000212565b81010312620001fa5781519183831683036200054c576020810151848116036200054c5784015183811603620001fa5750386200034f565b5080fd5b503d6200050856fe608060408181526004918236101561001657600080fd5b600092833560e01c9182630aa33a241461041257508163172009a6146103d757816326d8954514610396578163289d77cc14610352578163313ce567146103365781634ae5fa9b146102fb57816354fd4d50146102df5781637284e4161461021c57816380f55605146101d85781639a6fc8f51461018d57508063c45a01551461014a578063ee81d997146101105763feaf968c146100b457600080fd5b3461010c578160031936011261010c57610108906100d0611920565b945169ffffffffffffffffffff94851681526020810193909352604083019190915260608201529116608082015290819060a0820190565b0390f35b5080fd5b503461010c578160031936011261010c57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461010c578160031936011261010c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b8284346101d55760203660031901126101d55782359069ffffffffffffffffffff82168092036101d557506101c857610108906100d0611920565b5163bfbe031f60e01b8152fd5b80fd5b50503461010c578160031936011261010c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346102db57826003193601126102db57815190606082019082821067ffffffffffffffff8311176102c857508252602281526020907f50656e646c6520436861696e6c696e6b2d636f6d70617469626c65204f72616382820152616c6560f01b8382015282519382859384528251928382860152825b8481106102b257505050828201840152601f01601f19168101030190f35b8181018301518882018801528795508201610294565b634e487b7160e01b855260419052602484fd5b8280fd5b50503461010c578160031936011261010c576020905160018152f35b50503461010c578160031936011261010c57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503461010c578160031936011261010c576020905160128152f35b50503461010c578160031936011261010c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461010c578160031936011261010c576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50503461010c578160031936011261010c57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b84346101d557806003193601126101d5577f0000000000000000000000000000000000000000000000000000000000000000908382101561045557602083838152f35b634e487b7160e01b815260218452602490fd5b90670de0b6b3a76400009182810292818404149015171561048557565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561048557565b81156104b8570490565b634e487b7160e01b600052601260045260246000fd5b906104e46104db836113e7565b928391946105cf565b918181106104f157505090565b6104fe906105039361049b565b6104ae565b90565b61051b610512826113e7565b938491936105cf565b9180821061053057506104fe61050392610468565b90506104fe61050392610468565b90670de0b6b3a76400009182810292818404149015171561048557610503916104ae565b90601f8019910116810190811067ffffffffffffffff82111761058457604052565b634e487b7160e01b600052604160045260246000fd5b8181039291600013801582851316918412161761048557565b9190916000838201938412911290801582169115161761048557565b60405163794052f360e01b8152600060048201526001600160a01b039291906101209081816024818887165afa948515610a195760009561096d575b50505060a0830151421061065d575050610648604061063e61064d94610638855191602087015190610ab4565b906105b3565b925b015191610a59565b610b8d565b600081126106585790565b600080fd5b9092604051936080850185811067ffffffffffffffff82111761058457604052600085526000602086015260006040860152600060608601524260a0850151111561095b576106b04260a0860151610a25565b9160808501516301e133808102908082056301e133801490151715610485576001600160ff1b03841161065857836106e791610a99565b6000811315610943578652602085015161070091610ab4565b8060208701528451908115801561093b575b61091d5750508351610100850151916020870151916301e13380610738868a519661049b565b046001600160ff1b0381116106585761075090610b97565b92670de0b6b3a76400008412610904579061064861077161077793836105b3565b91610a59565b94670de0b6b3a764000086146108f25760008612670de0b6b3a764000087810312811690670de0b6b3a76400008881031390151617610485576108056002956107f661080f956107f061083a986106486107eb6107e68e6108359f61064890670de0b6b3a76400000391610a59565b610e87565b610a59565b9061059a565b60408b015260c0890151610a32565b6060890152611687565b6108276108204260a0880151610a25565b8092610a32565b938491610100870151610a32565b6105b3565b05610866670de0b6b3a7640000610860865161085a60408901518761059a565b90610a76565b05610b97565b61089682610648610890670de0b6b3a764000061088760208b015187610a76565b0588519061059a565b93610a59565b9485670de0b6b3a76400000195861260011661048557610638610648946106486107eb6108e46040976107f060206108d761064d9e6106486108ec9c610a59565b9801519161064889610a59565b9489516105b3565b92610640565b60405163a9c8b14d60e01b8152600490fd5b60405163329e322960e21b815260048101859052602490fd5b604492506040519163b1c4aefb60e01b835260048301526024820152fd5b508015610712565b60249060405190630e520c3b60e11b82526004820152fd5b60405163b2094b5960e01b8152600490fd5b90918093955082813d8311610a12575b6109878183610562565b810103126106585760405192830183811067ffffffffffffffff82111761058457604052815183526020820151602084015260408201516040840152606082015190811681036106585760608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151908201529138808061060b565b503d61097d565b6040513d6000823e3d90fd5b9190820391821161048557565b6301e1338091610a419161049b565b046001600160ff1b0381116106585761050390610b97565b90670de0b6b3a76400009182810292818405149015171561048557565b818102929160008212600160ff1b82141661048557818405149015171561048557565b81156104b857600160ff1b8114600019831416610485570590565b6000821215610b2c57600019915b600080821315610af85750670de0b6b3a764000091610ae09161049b565b046001600160ff1b0381116106585761050391610a76565b600160ff1b8214610b185791610ae091670de0b6b3a7640000930361049b565b634e487b7160e01b81526011600452602490fd5b600191610ac2565b15610b3b57565b60405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908195e1c1bdb995b9d60821b6044820152606490fd5b80156104b8576ec097ce7bc90715b34b9f10000000000590565b81156104b8570590565b680238fd42c5cf03ffff1981121580610e74575b610bb490610b34565b60008112610e5f576064906806f05b59d3b20000008112610e12576806f05b59d3b1ffffff190168056bc75e2d6310000082770195e54c5dd42177f53a27172fa9ec630262827000000000925b0280829168ad78ebc5ac62000000811215610dec575b50806856bc75e2d63100000084921215610dc8575b682b5e3af16b18800000811215610da6575b6815af1d78b58c400000811215610d84575b680ad78ebc5ac6200000811215610d63575b81811215610d42575b6802b5e3af16b1880000811215610d21575b68015af1d78b58c40000811215610d00575b60028282800205056003838383020505600484848302050560058585830205056006868683020505600787878302050590600888888402050592600989898602050594600a8a8a8802050596600b8b8b8a02050598600c8c8c8c0205059a0101010101010101010101010205020590565b6806f5f1775788937937829168015af1d78b58c3ffff190193020591610c8f565b6808f00f760a4b2db55d82916802b5e3af16b187ffff190193020591610c7d565b680ebc5fb41746121110829168056bc75e2d630fffff190193020591610c6b565b68280e60114edb805d038291680ad78ebc5ac61fffff190193020591610c62565b690127fa27722cc06cc5e282916815af1d78b58c3fffff190193020591610c50565b693f1fce3da636ea5cf8508291682b5e3af16b187fffff190193020591610c3e565b6b02df0ab5a80a22c61ab5a70082916856bc75e2d630ffffff190193020591610c2c565b6e01855144814a7ff805980ff0084000925068ad78ebc5ac61ffffff1901905082610c17565b6803782dace9d90000008112610e4c576803782dace9d8ffffff190168056bc75e2d63100000826b1425982cf597cd205cef738092610c01565b68056bc75e2d6310000082600192610c01565b610e6b90600003610b97565b61050390610b73565b5068070c1cc73b00c80000811315610bab565b6000811315610f5a5780670c7d713b49da00001280610f49575b15610f4057670de0b6b3a7640000906ec097ce7bc90715b34b9f100000000090610ee4908302828101906ec097ce7bc90715b34b9f0fffffffff19018302610b8d565b9080828002059181838202058284820205838582020591848684020593858786020595808888020597880205600f900596600d900595600b900594600990059360079005926005900591600390050101010101010160011b0590565b61050390610f8f565b50670f43fc2c04ee00008112610ea1565b60405162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b6044820152606490fd5b670de0b6b3a764000081126112b25760649060007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c0000000000000821215611287575b73011798004d755d3c8bc8e03204cf44619e000000821215611266575b8202908202816e01855144814a7ff805980ff0084000828181121561123f575b5050506b02df0ab5a80a22c61ab5a7008082121561121f575b50693f1fce3da636ea5cf850808212156111ff575b50690127fa27722cc06cc5e2808212156111df575b5068280e60114edb805d03808212156111bf575b50680ebc5fb41746121110808212156111a8575b506808f00f760a4b2db55d80821215611188575b506806f5f177578893793780821215611168575b506806248f33704b28660380821215611149575b506805c548670b9510e7ac8082121561112a575b506110e968056bc75e2d6310000091828082019168056bc75e2d630fffff190102610b8d565b9080828002059181838202058284820205916003600560076009600b888a89020598808b8b02059a8b0205059805960594059205010101010160011b010590565b68056bc75e2d631000006756bc75e2d6310000920205910190386110c3565b68056bc75e2d6310000067ad78ebc5ac620000920205910190386110af565b68056bc75e2d6310000068015af1d78b58c400009202059101903861109b565b68056bc75e2d631000006802b5e3af16b188000092020591019038611087565b68056bc75e2d631000008092020591019038611073565b68056bc75e2d63100000680ad78ebc5ac62000009202059101903861105f565b68056bc75e2d631000006815af1d78b58c4000009202059101903861104b565b68056bc75e2d63100000682b5e3af16b1880000092020591019038611036565b68056bc75e2d631000006856bc75e2d63100000092020591019038611021565b68056bc75e2d631000009192945068ad78ebc5ac6200000093500205910190388080611008565b6b1425982cf597cd205cef7380909105906803782dace9d900000001610fe8565b50770195e54c5dd42177f53a27172fa9ec63026282700000000090056806f05b59d3b2000000610fcb565b6112be6112c391610b73565b610f8f565b60000390565b906112d3826113e7565b908181106112e65750506105039161132d565b6112f76104fe92936105039561132d565b61049b565b611305816113e7565b90919080831061132257506105039261131d9161132d565b61053e565b91506105039261131d915b6040516370c264df60e11b815290916020826004816001600160a01b0387165afa918215610a19576000926113b4575b5042821161137457505050670de0b6b3a764000090565b61138461138c9161139294611687565b914290610a25565b90610a32565b600081126106585780156104b8576ec097ce7bc90715b34b9f10000000000490565b90916020823d82116113df575b816113ce60209383610562565b810103126101d5575051903861135d565b3d91506113c1565b906040918251630b2339af60e21b815260608160048160018060a01b038096165afa9384156115355760009182956115ed575b5082815192633ba0b9a960e01b8452836004816020978894165afa9283156115b3576000936115be575b5082951690805193636951ac2760e11b85528085600481865afa9485156115b357600095611584575b50815163516399df60e01b8152928184600481845afa9384156115795760009461153f575b50836114b9575b5050506000146114a7575090565b90808211156114b4575090565b905090565b82516360e0a9e160e01b81529293508190839060049082905afa92831561153557506000926114f8575b50506001600160801b03164314388080611499565b81813d831161152e575b61150c8183610562565b8101031261010c5751906001600160801b03821682036101d5575038806114e3565b503d611502565b513d6000823e3d90fd5b8281819693963d8311611572575b6115578183610562565b8101031261010c57519081151582036101d557509238611492565b503d61154d565b83513d6000823e3d90fd5b90948582813d83116115ac575b61159b8183610562565b810103126101d5575051933861146d565b503d611591565b82513d6000823e3d90fd5b90928482813d83116115e6575b6115d58183610562565b810103126101d55750519138611444565b503d6115cb565b9094506060813d821161163f575b8161160860609383610562565b8101031261010c5780519083821682036102db576020810151848116036102db578501519183831683036101d5575090933861141a565b3d91506115fb565b519081600f0b820361065857565b519061ffff8216820361065857565b8051156116715760200190565b634e487b7160e01b600052603260045260246000fd5b9063ffffffff80911690811561183c576040928351606081019167ffffffffffffffff92828110848211176105845786526002825260209182810187368237866116d083611664565b52875195869263883bdbfd60e01b84526024840190866004860152518091526044840192916000905b8783831061181f575060009694869003948694506001600160a01b0316925050505afa92831561181457600093611766575b50505080516001101561167157918201516001600160d81b039290831690839061175490611664565b51169003828111610485578216041690565b9091923d8082843e6117788184610562565b820191838184031261010c578051908582116102db57019082601f830112156101d5578151948511611800578460051b918751956117b886850188610562565b8652848087019382010193841161010c578401915b8383106117e157505050505038808061172b565b82516001600160d81b03811681036102db5781529184019184016117cd565b634e487b7160e01b81526041600452602490fd5b85513d6000823e3d90fd5b8451821686528a96509485019490930192600191909101906116f9565b50506040516361fdc86b60e11b81529060c090829060049082906001600160a01b03165afa908115610a195760009161187d575b506001600160601b031690565b60c0813d8211611901575b8161189560c09383610562565b8101031261010c576118a681611647565b506118b360208201611647565b506040810151916001600160601b03831683036101d55750906118fa60a0836118e660606001600160601b039601611655565b506118f360808201611655565b5001611655565b5090611870565b3d9150611888565b519069ffffffffffffffffffff8216820361065857565b604051633fabe5a360e21b81526001600160a01b039160a0826004817f000000000000000000000000000000000000000000000000000000000000000087165afa918215610a19576000908193611af0575b506000937f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000080600114611adf5780600214611ace5780600314611ab857600414611a0f57634e487b7160e01b600052605160045260246000fd5b611a1f611a4691611a6d936112fc565b7f00000000000000000000000000000000000000000000000000000000000000009061049b565b7f0000000000000000000000000000000000000000000000000000000000000000906104ae565b6001600160ff1b03811161065857611aaf91611a8891610a76565b7f000000000000000000000000000000000000000000000000000000000000000090610a99565b91600091600090565b50611ac9611a4691611a6d936112c9565b611a1f565b50611ac9611a4691611a6d93610506565b50611ac9611a4691611a6d936104ce565b925060a0833d8211611b3a575b81611b0a60a09383610562565b810103126101d55750611b1c82611909565b506020820151611b33608060608501519401611909565b5038611972565b3d9150611afd56fea2646970667358221220a765b1933ec94990f8bbd4ded12b00f5de3ffbb475b58ad21f714158f83d731c64736f6c63430008140033a26469706673582212200905494ac67d9dffc16f34c72553f569117dfa29e79a1abd20f47f51be751e2c64736f6c63430008140033",
  "deployedBytecode": "0x604060808152600490813610156200001657600080fd5b600091823560e01c9081630b5af9f8146200030d5781631bdfe05314620002c45781632d9a4a9d14620002aa578163451d27b81462000164575080638ca06ea6146200011f578063ca6ec89a14620000e5578063e233c36614620000b15763e54f48df146200008457600080fd5b34620000ad57602090620000a66200009c3662000490565b92919091620005e1565b9051908152f35b5080fd5b5034620000ad57602091620000ca6200009c3662000490565b8152600183528190205490516001600160a01b039091168152f35b5034620000ad5760209162000105620000fe3662000447565b91620005af565b81528083528190205490516001600160a01b039091168152f35b5034620000ad5781600319360112620000ad57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b838334620000ad57620001773662000490565b9092916200018882858386620005e1565b8087526001602052858720546001600160a01b0392919083166200029a57620001b282866200060c565b86516120d18082019082821067ffffffffffffffff83111762000287578689868a8695620001e6956200268f88396200053a565b039089f080156200027d578316978181526001602052878120896bffffffffffffffffffffffff60a01b825416179055898710156200026a5750602098509163ffffffff6060927f0c00ff77242aa7973d8bb5cb73ecc1733bf615b0aaf967a50c2b7672f9110da394838a51971687528a8c8801528987015216941692a451908152f35b634e487b7160e01b815260218a52602490fd5b87513d8a823e3d90fd5b634e487b7160e01b8b5260418c5260248bfd5b86516363ed528560e01b81528990fd5b505034620000ad57602090620000a6620000fe3662000447565b919050346200030957366003190112620000ad57356001600160a01b0381168103620000ad5760243563ffffffff81168103620003095762000306916200060c565b80f35b8280fd5b838334620000ad57620003203662000447565b91906200032f838284620005af565b80865260208690528486205490916001600160a01b0391821662000437576200035981856200060c565b8551611f638082019082821067ffffffffffffffff831117620004245787848885946200038c946200072c873962000508565b039088f080156200041a5782169683815280602052868120886bffffffffffffffffffffffff60a01b82541617905588861015620004075750602097507f1f9e05a536e40324537d577d17a8b32d1d2a2894f53cce4c730bc82235d6ab589163ffffffff87928351958a87528b87015216941692a451908152f35b634e487b7160e01b815260218952602490fd5b86513d89823e3d90fd5b634e487b7160e01b8a5260418b5260248afd5b85516363ed528560e01b81528890fd5b60609060031901126200048b576004356001600160a01b03811681036200048b579060243563ffffffff811681036200048b579060443560048110156200048b5790565b600080fd5b60809060031901126200048b576001600160a01b039060043582811681036200048b579160243563ffffffff811681036200048b579160443560048110156200048b579160643590811681036200048b5790565b906004821015620004f25752565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03909116815263ffffffff919091166020820152606081019291620005389160400190620004e4565b565b6001600160a01b03918216815263ffffffff909216602083015260808201949391926060929062000570906040860190620004e4565b16910152565b90601f8019910116810190811067ffffffffffffffff8211176200059957604052565b634e487b7160e01b600052604160045260246000fd5b9190620005db90620005cc60405193849260208401968762000508565b03601f19810183528262000576565b51902090565b9290620005cc620005db926040519485936020850197886200053a565b519081151582036200048b57565b60405162439f4b60e91b81526001600160a01b03918216600482015263ffffffff9092166024830152606090829060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156200071f57600080918193620006b5575b50620006985750156200068657565b604051631cedb8bf60e11b8152600490fd5b6040516380b1d95f60e01b815261ffff9091166004820152602490fd5b915091506060813d821162000716575b81620006d46060938362000576565b81010312620000ad57620006e881620005fe565b9060208101519261ffff8416840362000713575060406200070a9101620005fe565b91903862000677565b80fd5b3d9150620006c5565b6040513d6000823e3d90fdfe6101608060405234620001285760608162001f6380380380916200002482856200012d565b83398101031262000128576200003a8162000167565b9060208101519063ffffffff821682036200012857604001516004811015620001285760ff6200008c620000846200009493868496336080528160a05260c0528160e05262000243565b94166200017c565b92166200017c565b610120908152610100918252620000aa620001a1565b61014090815260405191611ad693846200048d853960805184610274015260a05184818160d0015281816102f20152610393015260c05184818160af015281816102d10152610511015260e0518461054a01525183818161016001526104b5015251828181610187015261023801525181818160fa015261031c0152f35b600080fd5b601f909101601f19168101906001600160401b038211908210176200015157604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200012857565b604d81116200018b57600a0a90565b634e487b7160e01b600052601160045260246000fd5b60e05160048110156200021e5780620001ba5750600490565b60018103620001c95750600390565b60028103620001d85750600290565b600303620001e557600190565b60405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081cdd5c1c1bdc9d1959609a1b6044820152606490fd5b0390fd5b634e487b7160e01b600052602160045260246000fd5b519060ff821682036200012857565b60408051630b2339af60e21b81526060949392600492916001600160a01b0391879082908690829086165afa908115620003dd576000916200042f575b50825163313ce56760e01b81529491166020858581845afa948515620003dd57908791600096620003e8575b508351630a40bee560e41b815291908290869082905afa968715620003dd576000976200037d575b505082811015620003685760018103620002f057505050508190565b9294928062000300575050509190565b9294926003810362000316575050505060129190565b92945090916002036200032b57505060129190565b6200021a92505191829162461bcd60e51b8352820160609060208152600d60208201526c1b9bdd081cdd5c1c1bdc9d1959609a1b60408201520190565b602183634e487b7160e01b6000525260246000fd5b8181989293983d8311620003d5575b6200039881836200012d565b81010312620003d257600282511015620003d257508181620003c16020620003c9940162000167565b500162000234565b943880620002d4565b80fd5b503d6200038c565b83513d6000823e3d90fd5b9150946020823d821162000426575b8162000406602093836200012d565b81010312620003d25750866200041d859262000234565b959091620002ac565b3d9150620003f7565b908782813d831162000484575b6200044881836200012d565b81010312620003d25781519183831683036200048057602081015184811603620004805784015183811603620003d257503862000280565b5080fd5b503d6200043c56fe608060408181526004908136101561001657600080fd5b600092833560e01c9081630aa33a24146105355750806326d89545146104f4578063313ce567146104d85780634ae5fa9b1461049d57806354fd4d50146104815780637284e416146103c257806380f556051461037e5780639a6fc8f5146102a3578063c45a01551461025f578063ee81d997146102205763feaf968c1461009d57600080fd5b346101db57826003193601126101db577f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001811461020c57806002146101f857806003146101df5760041461014b57634e487b7160e01b855260518452602485fd5b6101ac9293506101859161015e91611487565b7f0000000000000000000000000000000000000000000000000000000000000000906105c3565b7f0000000000000000000000000000000000000000000000000000000000000000906105d6565b906001600160ff1b0382116101db5791808360a094519382855260208501528301524260608301526080820152f35b8280fd5b506101ac929350610185916101f391611454565b61015e565b506101ac929350610185916101f39161062e565b506101ac929350610185916101f3916105f6565b83823461025b578160031936011261025b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5080fd5b83823461025b578160031936011261025b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101db5760203660031901126101db57813569ffffffffffffffffffff811680910361037a5761036d577f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001811461020c57806002146101f857806003146101df5760041461014b57634e487b7160e01b855260518452602485fd5b5163bfbe031f60e01b8152fd5b8380fd5b83823461025b578160031936011261025b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5090346101db57826003193601126101db57815190606082019082821067ffffffffffffffff83111761046e57508252602281526020907f50656e646c6520436861696e6c696e6b2d636f6d70617469626c65204f72616382820152616c6560f01b8382015282519382859384528251928382860152825b84811061045857505050828201840152601f01601f19168101030190f35b818101830151888201880152879550820161043a565b634e487b7160e01b855260419052602484fd5b83823461025b578160031936011261025b576020905160018152f35b83823461025b578160031936011261025b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83823461025b578160031936011261025b576020905160128152f35b83823461025b578160031936011261025b576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8390853461058d578060031936011261058d577f0000000000000000000000000000000000000000000000000000000000000000908382101561057a57602083838152f35b634e487b7160e01b815260218452602490fd5b80fd5b90670de0b6b3a7640000918281029281840414901517156105ad57565b634e487b7160e01b600052601160045260246000fd5b818102929181159184041417156105ad57565b81156105e0570490565b634e487b7160e01b600052601260045260246000fd5b9061060c6106038361157e565b928391946106f7565b9181811061061957505090565b6106269061062b936105c3565b6105d6565b90565b61064361063a8261157e565b938491936106f7565b91808210610658575061062661062b92610590565b905061062661062b92610590565b90670de0b6b3a7640000918281029281840414901517156105ad5761062b916105d6565b90601f8019910116810190811067ffffffffffffffff8211176106ac57604052565b634e487b7160e01b600052604160045260246000fd5b818103929160001380158285131691841216176105ad57565b919091600083820193841291129080158216911516176105ad57565b60405163794052f360e01b8152600060048201819052936001600160a01b0393909260249261012090818186818a87165afa968715610bbb578897610af8575b50505060a085015142106107875750505090610776604061076c61077b94610766855191602087015190610c3f565b906106db565b925b015191610bff565b610d18565b9080821261058d575090565b604051936080850185811067ffffffffffffffff821117610ae5576040528685528660208601528660408601528660608601524260a08701511115610ad3576107d44260a0880151610bc6565b9060808701516301e133809182820291808305841490151715610a30576001600160ff1b0391828511610a6d578415610ac057600160ff1b8114600019861416610aad578490058a811315610a96578852602089015161083391610c3f565b80602089015288519081158015610a8e575b610a71575050875161010089015191602089015193610866868b51956105c3565b04908111610a6d5761087790610d22565b92670de0b6b3a76400008412610a55579061077661089861089e93836106db565b91610bff565b670de0b6b3a76400008114610a4357898112670de0b6b3a764000082810312811690670de0b6b3a76400008381031390151617610a30579361092c6109619461091d6109369561091761095c9b9a9661077661091261090d8d61077660029f670de0b6b3a76400000391610bff565b611012565b610bff565b906106c2565b60408b015260c08b0151610bd3565b606089015261181e565b61094e6109474260a08a0151610bc6565b8092610bd3565b948591610100890151610bd3565b6106db565b059061098e670de0b6b3a764000061098886516109826040890151886106c2565b90610c1c565b05610d22565b6109be836107766109b8670de0b6b3a76400006109af60208b015187610c1c565b058a51906106c2565b93610bff565b9182670de0b6b3a764000001928312600116610a1e57509361076661077694610776610912610a106040976109176020610a03610a189a61077b9f9e61077690610bff565b9801519161077689610bff565b9489516106db565b9261076e565b634e487b7160e01b8852601160045287fd5b634e487b7160e01b8a526011600452868afd5b60405163a9c8b14d60e01b8152600490fd5b60405163329e322960e21b8152600481018590528890fd5b8a80fd5b60449250876040519263b1c4aefb60e01b84526004840152820152fd5b508015610845565b879060405190630e520c3b60e11b82526004820152fd5b634e487b7160e01b8b526011600452878bfd5b634e487b7160e01b8b526012600452878bfd5b60405163b2094b5960e01b8152600490fd5b634e487b7160e01b885260416004528488fd5b90918093975082813d8311610bb4575b610b12818361068a565b81010312610b9d5760405192830183811067ffffffffffffffff821117610ba15760405281518352602082015160208401526040820151604084015260608201519081168103610b9d5760608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100809101519082015293388080610737565b8780fd5b634e487b7160e01b895260416004528589fd5b503d610b08565b6040513d8a823e3d90fd5b919082039182116105ad57565b6301e1338091610be2916105c3565b046001600160ff1b038111610bfa5761062b90610d22565b600080fd5b90670de0b6b3a7640000918281029281840514901517156105ad57565b818102929160008212600160ff1b8214166105ad5781840514901517156105ad57565b6000821215610cb757600019915b600080821315610c835750670de0b6b3a764000091610c6b916105c3565b046001600160ff1b038111610bfa5761062b91610c1c565b600160ff1b8214610ca35791610c6b91670de0b6b3a764000093036105c3565b634e487b7160e01b81526011600452602490fd5b600191610c4d565b15610cc657565b60405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908195e1c1bdb995b9d60821b6044820152606490fd5b80156105e0576ec097ce7bc90715b34b9f10000000000590565b81156105e0570590565b680238fd42c5cf03ffff1981121580610fff575b610d3f90610cbf565b60008112610fea576064906806f05b59d3b20000008112610f9d576806f05b59d3b1ffffff190168056bc75e2d6310000082770195e54c5dd42177f53a27172fa9ec630262827000000000925b0280829168ad78ebc5ac62000000811215610f77575b50806856bc75e2d63100000084921215610f53575b682b5e3af16b18800000811215610f31575b6815af1d78b58c400000811215610f0f575b680ad78ebc5ac6200000811215610eee575b81811215610ecd575b6802b5e3af16b1880000811215610eac575b68015af1d78b58c40000811215610e8b575b60028282800205056003838383020505600484848302050560058585830205056006868683020505600787878302050590600888888402050592600989898602050594600a8a8a8802050596600b8b8b8a02050598600c8c8c8c0205059a0101010101010101010101010205020590565b6806f5f1775788937937829168015af1d78b58c3ffff190193020591610e1a565b6808f00f760a4b2db55d82916802b5e3af16b187ffff190193020591610e08565b680ebc5fb41746121110829168056bc75e2d630fffff190193020591610df6565b68280e60114edb805d038291680ad78ebc5ac61fffff190193020591610ded565b690127fa27722cc06cc5e282916815af1d78b58c3fffff190193020591610ddb565b693f1fce3da636ea5cf8508291682b5e3af16b187fffff190193020591610dc9565b6b02df0ab5a80a22c61ab5a70082916856bc75e2d630ffffff190193020591610db7565b6e01855144814a7ff805980ff0084000925068ad78ebc5ac61ffffff1901905082610da2565b6803782dace9d90000008112610fd7576803782dace9d8ffffff190168056bc75e2d63100000826b1425982cf597cd205cef738092610d8c565b68056bc75e2d6310000082600192610d8c565b610ff690600003610d22565b61062b90610cfe565b5068070c1cc73b00c80000811315610d36565b60008113156110e55780670c7d713b49da000012806110d4575b156110cb57670de0b6b3a7640000906ec097ce7bc90715b34b9f10000000009061106f908302828101906ec097ce7bc90715b34b9f0fffffffff19018302610d18565b9080828002059181838202058284820205838582020591848684020593858786020595808888020597880205600f900596600d900595600b900594600990059360079005926005900591600390050101010101010160011b0590565b61062b9061111a565b50670f43fc2c04ee0000811261102c565b60405162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b6044820152606490fd5b670de0b6b3a7640000811261143d5760649060007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c0000000000000821215611412575b73011798004d755d3c8bc8e03204cf44619e0000008212156113f1575b8202908202816e01855144814a7ff805980ff008400082818112156113ca575b5050506b02df0ab5a80a22c61ab5a700808212156113aa575b50693f1fce3da636ea5cf8508082121561138a575b50690127fa27722cc06cc5e28082121561136a575b5068280e60114edb805d038082121561134a575b50680ebc5fb4174612111080821215611333575b506808f00f760a4b2db55d80821215611313575b506806f5f1775788937937808212156112f3575b506806248f33704b286603808212156112d4575b506805c548670b9510e7ac808212156112b5575b5061127468056bc75e2d6310000091828082019168056bc75e2d630fffff190102610d18565b9080828002059181838202058284820205916003600560076009600b888a89020598808b8b02059a8b0205059805960594059205010101010160011b010590565b68056bc75e2d631000006756bc75e2d63100009202059101903861124e565b68056bc75e2d6310000067ad78ebc5ac6200009202059101903861123a565b68056bc75e2d6310000068015af1d78b58c4000092020591019038611226565b68056bc75e2d631000006802b5e3af16b188000092020591019038611212565b68056bc75e2d6310000080920205910190386111fe565b68056bc75e2d63100000680ad78ebc5ac6200000920205910190386111ea565b68056bc75e2d631000006815af1d78b58c400000920205910190386111d6565b68056bc75e2d63100000682b5e3af16b18800000920205910190386111c1565b68056bc75e2d631000006856bc75e2d631000000920205910190386111ac565b68056bc75e2d631000009192945068ad78ebc5ac6200000093500205910190388080611193565b6b1425982cf597cd205cef7380909105906803782dace9d900000001611173565b50770195e54c5dd42177f53a27172fa9ec63026282700000000090056806f05b59d3b2000000611156565b61144961144e91610cfe565b61111a565b60000390565b9061145e8261157e565b9081811061147157505061062b916114b8565b611482610626929361062b956114b8565b6105c3565b6114908161157e565b9091908083106114ad575061062b926114a8916114b8565b610666565b915061062b926114a8915b6040516370c264df60e11b815290916020826004816001600160a01b0387165afa9182156115725760009261153f575b504282116114ff57505050670de0b6b3a764000090565b61150f6115179161151d9461181e565b914290610bc6565b90610bd3565b60008112610bfa5780156105e0576ec097ce7bc90715b34b9f10000000000490565b90916020823d821161156a575b816115596020938361068a565b8101031261058d57505190386114e8565b3d915061154c565b6040513d6000823e3d90fd5b906040918251630b2339af60e21b815260608160048160018060a01b038096165afa9384156116cc576000918295611784575b5082815192633ba0b9a960e01b8452836004816020978894165afa92831561174a57600093611755575b5082951690805193636951ac2760e11b85528085600481865afa94851561174a5760009561171b575b50815163516399df60e01b8152928184600481845afa938415611710576000946116d6575b5083611650575b50505060001461163e575090565b908082111561164b575090565b905090565b82516360e0a9e160e01b81529293508190839060049082905afa9283156116cc575060009261168f575b50506001600160801b03164314388080611630565b81813d83116116c5575b6116a3818361068a565b8101031261025b5751906001600160801b038216820361058d5750388061167a565b503d611699565b513d6000823e3d90fd5b8281819693963d8311611709575b6116ee818361068a565b8101031261025b575190811515820361058d57509238611629565b503d6116e4565b83513d6000823e3d90fd5b90948582813d8311611743575b611732818361068a565b8101031261058d5750519338611604565b503d611728565b82513d6000823e3d90fd5b90928482813d831161177d575b61176c818361068a565b8101031261058d57505191386115db565b503d611762565b9094506060813d82116117d6575b8161179f6060938361068a565b8101031261025b5780519083821682036101db576020810151848116036101db5785015191838316830361058d57509093386115b1565b3d9150611792565b519081600f0b8203610bfa57565b519061ffff82168203610bfa57565b8051156118085760200190565b634e487b7160e01b600052603260045260246000fd5b9063ffffffff8091169081156119d3576040928351606081019167ffffffffffffffff92828110848211176106ac578652600282526020918281018736823786611867836117fb565b52875195869263883bdbfd60e01b84526024840190866004860152518091526044840192916000905b878383106119b6575060009694869003948694506001600160a01b0316925050505afa9283156119ab576000936118fd575b50505080516001101561180857918201516001600160d81b03929083169083906118eb906117fb565b511690038281116105ad578216041690565b9091923d8082843e61190f818461068a565b820191838184031261025b578051908582116101db57019082601f8301121561058d578151948511611997578460051b9187519561194f8685018861068a565b8652848087019382010193841161025b578401915b8383106119785750505050503880806118c2565b82516001600160d81b03811681036101db578152918401918401611964565b634e487b7160e01b81526041600452602490fd5b85513d6000823e3d90fd5b8451821686528a9650948501949093019260019190910190611890565b50506040516361fdc86b60e11b81529060c090829060049082906001600160a01b03165afa90811561157257600091611a14575b506001600160601b031690565b60c0813d8211611a98575b81611a2c60c0938361068a565b8101031261025b57611a3d816117de565b50611a4a602082016117de565b506040810151916001600160601b038316830361058d575090611a9160a083611a7d60606001600160601b0396016117ec565b50611a8a608082016117ec565b50016117ec565b5090611a07565b3d9150611a1f56fea264697066735822122001a8a84c0807ae5ed4b25b37f232e0543b8eebfc4d73799458bd2de3b57770c364736f6c634300081400336101a08060405234620001a757608081620020d1803803809162000024828562000212565b833981010312620001a7576200003a816200024c565b9060208101519063ffffffff82168203620001a75760408101516004811015620001a7576200009c6200009460ff959286936200007e6060620000a497016200024c565b96336080528160a05260c0528160e05262000312565b951662000270565b931662000270565b90610120918252610100928352620000bb6200027f565b61014090815261016082815260405163313ce56760e01b81529192909190602090829060049082906001600160a01b03165afa80156200020657600090620001c2575b60ff915016604d8111620001ac57600a0a916001600160ff1b038311620001a75761018092835260405193611b7895866200055987396080518661015e015260a0518681816101ed0152611978015260c0518681816103b3015261199a015260e051866104250152518581816103130152611a210152518481816101270152611a48015251836119bb015251828181610367015261193e0152518181816103ef0152611a8a0152f35b600080fd5b634e487b7160e01b600052601160045260246000fd5b6020823d8211620001fd575b81620001dd6020938362000212565b81010312620001fa5750620001f460ff9162000261565b620000fe565b80fd5b3d9150620001ce565b6040513d6000823e3d90fd5b601f909101601f19168101906001600160401b038211908210176200023657604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001a757565b519060ff82168203620001a757565b604d8111620001ac57600a0a90565b60e0516004811015620002fc5780620002985750600490565b60018103620002a75750600390565b60028103620002b65750600290565b600303620002c357600190565b60405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081cdd5c1c1bdc9d1959609a1b6044820152606490fd5b0390fd5b634e487b7160e01b600052602160045260246000fd5b60408051630b2339af60e21b81526060949392600492916001600160a01b0391879082908690829086165afa908115620004a957600091620004fb575b50825163313ce56760e01b81529491166020858581845afa948515620004a957908791600096620004b4575b508351630a40bee560e41b815291908290869082905afa968715620004a9576000976200044c575b505082811015620004375760018103620003bf57505050508190565b92949280620003cf575050509190565b92949260038103620003e5575050505060129190565b9294509091600203620003fa57505060129190565b620002f892505191829162461bcd60e51b8352820160609060208152600d60208201526c1b9bdd081cdd5c1c1bdc9d1959609a1b60408201520190565b602183634e487b7160e01b6000525260246000fd5b8181989293983d8311620004a1575b62000467818362000212565b81010312620001fa57600282511015620001fa575081816200049060206200049894016200024c565b500162000261565b943880620003a3565b503d6200045b565b83513d6000823e3d90fd5b9150946020823d8211620004f2575b81620004d26020938362000212565b81010312620001fa575086620004e9859262000261565b9590916200037b565b3d9150620004c3565b908782813d831162000550575b62000514818362000212565b81010312620001fa5781519183831683036200054c576020810151848116036200054c5784015183811603620001fa5750386200034f565b5080fd5b503d6200050856fe608060408181526004918236101561001657600080fd5b600092833560e01c9182630aa33a241461041257508163172009a6146103d757816326d8954514610396578163289d77cc14610352578163313ce567146103365781634ae5fa9b146102fb57816354fd4d50146102df5781637284e4161461021c57816380f55605146101d85781639a6fc8f51461018d57508063c45a01551461014a578063ee81d997146101105763feaf968c146100b457600080fd5b3461010c578160031936011261010c57610108906100d0611920565b945169ffffffffffffffffffff94851681526020810193909352604083019190915260608201529116608082015290819060a0820190565b0390f35b5080fd5b503461010c578160031936011261010c57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461010c578160031936011261010c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b8284346101d55760203660031901126101d55782359069ffffffffffffffffffff82168092036101d557506101c857610108906100d0611920565b5163bfbe031f60e01b8152fd5b80fd5b50503461010c578160031936011261010c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346102db57826003193601126102db57815190606082019082821067ffffffffffffffff8311176102c857508252602281526020907f50656e646c6520436861696e6c696e6b2d636f6d70617469626c65204f72616382820152616c6560f01b8382015282519382859384528251928382860152825b8481106102b257505050828201840152601f01601f19168101030190f35b8181018301518882018801528795508201610294565b634e487b7160e01b855260419052602484fd5b8280fd5b50503461010c578160031936011261010c576020905160018152f35b50503461010c578160031936011261010c57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503461010c578160031936011261010c576020905160128152f35b50503461010c578160031936011261010c57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461010c578160031936011261010c576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50503461010c578160031936011261010c57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b84346101d557806003193601126101d5577f0000000000000000000000000000000000000000000000000000000000000000908382101561045557602083838152f35b634e487b7160e01b815260218452602490fd5b90670de0b6b3a76400009182810292818404149015171561048557565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561048557565b81156104b8570490565b634e487b7160e01b600052601260045260246000fd5b906104e46104db836113e7565b928391946105cf565b918181106104f157505090565b6104fe906105039361049b565b6104ae565b90565b61051b610512826113e7565b938491936105cf565b9180821061053057506104fe61050392610468565b90506104fe61050392610468565b90670de0b6b3a76400009182810292818404149015171561048557610503916104ae565b90601f8019910116810190811067ffffffffffffffff82111761058457604052565b634e487b7160e01b600052604160045260246000fd5b8181039291600013801582851316918412161761048557565b9190916000838201938412911290801582169115161761048557565b60405163794052f360e01b8152600060048201526001600160a01b039291906101209081816024818887165afa948515610a195760009561096d575b50505060a0830151421061065d575050610648604061063e61064d94610638855191602087015190610ab4565b906105b3565b925b015191610a59565b610b8d565b600081126106585790565b600080fd5b9092604051936080850185811067ffffffffffffffff82111761058457604052600085526000602086015260006040860152600060608601524260a0850151111561095b576106b04260a0860151610a25565b9160808501516301e133808102908082056301e133801490151715610485576001600160ff1b03841161065857836106e791610a99565b6000811315610943578652602085015161070091610ab4565b8060208701528451908115801561093b575b61091d5750508351610100850151916020870151916301e13380610738868a519661049b565b046001600160ff1b0381116106585761075090610b97565b92670de0b6b3a76400008412610904579061064861077161077793836105b3565b91610a59565b94670de0b6b3a764000086146108f25760008612670de0b6b3a764000087810312811690670de0b6b3a76400008881031390151617610485576108056002956107f661080f956107f061083a986106486107eb6107e68e6108359f61064890670de0b6b3a76400000391610a59565b610e87565b610a59565b9061059a565b60408b015260c0890151610a32565b6060890152611687565b6108276108204260a0880151610a25565b8092610a32565b938491610100870151610a32565b6105b3565b05610866670de0b6b3a7640000610860865161085a60408901518761059a565b90610a76565b05610b97565b61089682610648610890670de0b6b3a764000061088760208b015187610a76565b0588519061059a565b93610a59565b9485670de0b6b3a76400000195861260011661048557610638610648946106486107eb6108e46040976107f060206108d761064d9e6106486108ec9c610a59565b9801519161064889610a59565b9489516105b3565b92610640565b60405163a9c8b14d60e01b8152600490fd5b60405163329e322960e21b815260048101859052602490fd5b604492506040519163b1c4aefb60e01b835260048301526024820152fd5b508015610712565b60249060405190630e520c3b60e11b82526004820152fd5b60405163b2094b5960e01b8152600490fd5b90918093955082813d8311610a12575b6109878183610562565b810103126106585760405192830183811067ffffffffffffffff82111761058457604052815183526020820151602084015260408201516040840152606082015190811681036106585760608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151908201529138808061060b565b503d61097d565b6040513d6000823e3d90fd5b9190820391821161048557565b6301e1338091610a419161049b565b046001600160ff1b0381116106585761050390610b97565b90670de0b6b3a76400009182810292818405149015171561048557565b818102929160008212600160ff1b82141661048557818405149015171561048557565b81156104b857600160ff1b8114600019831416610485570590565b6000821215610b2c57600019915b600080821315610af85750670de0b6b3a764000091610ae09161049b565b046001600160ff1b0381116106585761050391610a76565b600160ff1b8214610b185791610ae091670de0b6b3a7640000930361049b565b634e487b7160e01b81526011600452602490fd5b600191610ac2565b15610b3b57565b60405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908195e1c1bdb995b9d60821b6044820152606490fd5b80156104b8576ec097ce7bc90715b34b9f10000000000590565b81156104b8570590565b680238fd42c5cf03ffff1981121580610e74575b610bb490610b34565b60008112610e5f576064906806f05b59d3b20000008112610e12576806f05b59d3b1ffffff190168056bc75e2d6310000082770195e54c5dd42177f53a27172fa9ec630262827000000000925b0280829168ad78ebc5ac62000000811215610dec575b50806856bc75e2d63100000084921215610dc8575b682b5e3af16b18800000811215610da6575b6815af1d78b58c400000811215610d84575b680ad78ebc5ac6200000811215610d63575b81811215610d42575b6802b5e3af16b1880000811215610d21575b68015af1d78b58c40000811215610d00575b60028282800205056003838383020505600484848302050560058585830205056006868683020505600787878302050590600888888402050592600989898602050594600a8a8a8802050596600b8b8b8a02050598600c8c8c8c0205059a0101010101010101010101010205020590565b6806f5f1775788937937829168015af1d78b58c3ffff190193020591610c8f565b6808f00f760a4b2db55d82916802b5e3af16b187ffff190193020591610c7d565b680ebc5fb41746121110829168056bc75e2d630fffff190193020591610c6b565b68280e60114edb805d038291680ad78ebc5ac61fffff190193020591610c62565b690127fa27722cc06cc5e282916815af1d78b58c3fffff190193020591610c50565b693f1fce3da636ea5cf8508291682b5e3af16b187fffff190193020591610c3e565b6b02df0ab5a80a22c61ab5a70082916856bc75e2d630ffffff190193020591610c2c565b6e01855144814a7ff805980ff0084000925068ad78ebc5ac61ffffff1901905082610c17565b6803782dace9d90000008112610e4c576803782dace9d8ffffff190168056bc75e2d63100000826b1425982cf597cd205cef738092610c01565b68056bc75e2d6310000082600192610c01565b610e6b90600003610b97565b61050390610b73565b5068070c1cc73b00c80000811315610bab565b6000811315610f5a5780670c7d713b49da00001280610f49575b15610f4057670de0b6b3a7640000906ec097ce7bc90715b34b9f100000000090610ee4908302828101906ec097ce7bc90715b34b9f0fffffffff19018302610b8d565b9080828002059181838202058284820205838582020591848684020593858786020595808888020597880205600f900596600d900595600b900594600990059360079005926005900591600390050101010101010160011b0590565b61050390610f8f565b50670f43fc2c04ee00008112610ea1565b60405162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b6044820152606490fd5b670de0b6b3a764000081126112b25760649060007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c0000000000000821215611287575b73011798004d755d3c8bc8e03204cf44619e000000821215611266575b8202908202816e01855144814a7ff805980ff0084000828181121561123f575b5050506b02df0ab5a80a22c61ab5a7008082121561121f575b50693f1fce3da636ea5cf850808212156111ff575b50690127fa27722cc06cc5e2808212156111df575b5068280e60114edb805d03808212156111bf575b50680ebc5fb41746121110808212156111a8575b506808f00f760a4b2db55d80821215611188575b506806f5f177578893793780821215611168575b506806248f33704b28660380821215611149575b506805c548670b9510e7ac8082121561112a575b506110e968056bc75e2d6310000091828082019168056bc75e2d630fffff190102610b8d565b9080828002059181838202058284820205916003600560076009600b888a89020598808b8b02059a8b0205059805960594059205010101010160011b010590565b68056bc75e2d631000006756bc75e2d6310000920205910190386110c3565b68056bc75e2d6310000067ad78ebc5ac620000920205910190386110af565b68056bc75e2d6310000068015af1d78b58c400009202059101903861109b565b68056bc75e2d631000006802b5e3af16b188000092020591019038611087565b68056bc75e2d631000008092020591019038611073565b68056bc75e2d63100000680ad78ebc5ac62000009202059101903861105f565b68056bc75e2d631000006815af1d78b58c4000009202059101903861104b565b68056bc75e2d63100000682b5e3af16b1880000092020591019038611036565b68056bc75e2d631000006856bc75e2d63100000092020591019038611021565b68056bc75e2d631000009192945068ad78ebc5ac6200000093500205910190388080611008565b6b1425982cf597cd205cef7380909105906803782dace9d900000001610fe8565b50770195e54c5dd42177f53a27172fa9ec63026282700000000090056806f05b59d3b2000000610fcb565b6112be6112c391610b73565b610f8f565b60000390565b906112d3826113e7565b908181106112e65750506105039161132d565b6112f76104fe92936105039561132d565b61049b565b611305816113e7565b90919080831061132257506105039261131d9161132d565b61053e565b91506105039261131d915b6040516370c264df60e11b815290916020826004816001600160a01b0387165afa918215610a19576000926113b4575b5042821161137457505050670de0b6b3a764000090565b61138461138c9161139294611687565b914290610a25565b90610a32565b600081126106585780156104b8576ec097ce7bc90715b34b9f10000000000490565b90916020823d82116113df575b816113ce60209383610562565b810103126101d5575051903861135d565b3d91506113c1565b906040918251630b2339af60e21b815260608160048160018060a01b038096165afa9384156115355760009182956115ed575b5082815192633ba0b9a960e01b8452836004816020978894165afa9283156115b3576000936115be575b5082951690805193636951ac2760e11b85528085600481865afa9485156115b357600095611584575b50815163516399df60e01b8152928184600481845afa9384156115795760009461153f575b50836114b9575b5050506000146114a7575090565b90808211156114b4575090565b905090565b82516360e0a9e160e01b81529293508190839060049082905afa92831561153557506000926114f8575b50506001600160801b03164314388080611499565b81813d831161152e575b61150c8183610562565b8101031261010c5751906001600160801b03821682036101d5575038806114e3565b503d611502565b513d6000823e3d90fd5b8281819693963d8311611572575b6115578183610562565b8101031261010c57519081151582036101d557509238611492565b503d61154d565b83513d6000823e3d90fd5b90948582813d83116115ac575b61159b8183610562565b810103126101d5575051933861146d565b503d611591565b82513d6000823e3d90fd5b90928482813d83116115e6575b6115d58183610562565b810103126101d55750519138611444565b503d6115cb565b9094506060813d821161163f575b8161160860609383610562565b8101031261010c5780519083821682036102db576020810151848116036102db578501519183831683036101d5575090933861141a565b3d91506115fb565b519081600f0b820361065857565b519061ffff8216820361065857565b8051156116715760200190565b634e487b7160e01b600052603260045260246000fd5b9063ffffffff80911690811561183c576040928351606081019167ffffffffffffffff92828110848211176105845786526002825260209182810187368237866116d083611664565b52875195869263883bdbfd60e01b84526024840190866004860152518091526044840192916000905b8783831061181f575060009694869003948694506001600160a01b0316925050505afa92831561181457600093611766575b50505080516001101561167157918201516001600160d81b039290831690839061175490611664565b51169003828111610485578216041690565b9091923d8082843e6117788184610562565b820191838184031261010c578051908582116102db57019082601f830112156101d5578151948511611800578460051b918751956117b886850188610562565b8652848087019382010193841161010c578401915b8383106117e157505050505038808061172b565b82516001600160d81b03811681036102db5781529184019184016117cd565b634e487b7160e01b81526041600452602490fd5b85513d6000823e3d90fd5b8451821686528a96509485019490930192600191909101906116f9565b50506040516361fdc86b60e11b81529060c090829060049082906001600160a01b03165afa908115610a195760009161187d575b506001600160601b031690565b60c0813d8211611901575b8161189560c09383610562565b8101031261010c576118a681611647565b506118b360208201611647565b506040810151916001600160601b03831683036101d55750906118fa60a0836118e660606001600160601b039601611655565b506118f360808201611655565b5001611655565b5090611870565b3d9150611888565b519069ffffffffffffffffffff8216820361065857565b604051633fabe5a360e21b81526001600160a01b039160a0826004817f000000000000000000000000000000000000000000000000000000000000000087165afa918215610a19576000908193611af0575b506000937f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000080600114611adf5780600214611ace5780600314611ab857600414611a0f57634e487b7160e01b600052605160045260246000fd5b611a1f611a4691611a6d936112fc565b7f00000000000000000000000000000000000000000000000000000000000000009061049b565b7f0000000000000000000000000000000000000000000000000000000000000000906104ae565b6001600160ff1b03811161065857611aaf91611a8891610a76565b7f000000000000000000000000000000000000000000000000000000000000000090610a99565b91600091600090565b50611ac9611a4691611a6d936112c9565b611a1f565b50611ac9611a4691611a6d93610506565b50611ac9611a4691611a6d936104ce565b925060a0833d8211611b3a575b81611b0a60a09383610562565b810103126101d55750611b1c82611909565b506020820151611b33608060608501519401611909565b5038611972565b3d9150611afd56fea2646970667358221220a765b1933ec94990f8bbd4ded12b00f5de3ffbb475b58ad21f714158f83d731c64736f6c63430008140033a26469706673582212200905494ac67d9dffc16f34c72553f569117dfa29e79a1abd20f47f51be751e2c64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createOracleWithQuote(address,uint32,uint8,address)": {
        "details": "quoteOracle must has Chainlink-compatible interface"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6237,
        "contract": "@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracleFactory.sol:PendleChainlinkOracleFactory",
        "label": "oracles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 6241,
        "contract": "@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracleFactory.sol:PendleChainlinkOracleFactory",
        "label": "oraclesWithQuote",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}