{
  "address": "0x39EEB8955948B980d9ad09F92F95cdD980751ce1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sourceFeed",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_targetDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDecimalsUpscaleNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sourceDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sourceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1f8fc63ccf8ee57e7b537424766b8f83ecf1d01ed6957a98fb94e12c3f6cf46",
  "receipt": {
    "to": null,
    "from": "0x0f5e3D9AEe7Ab5fDa909Af1ef147D98a7f4B3022",
    "contractAddress": "0x39EEB8955948B980d9ad09F92F95cdD980751ce1",
    "transactionIndex": 0,
    "gasUsed": "439099",
    "logsBloom": "0x
    "blockHash": "0x8de673303723e8568d5e6ca6025ecc3af3b31d8a73d0ea5578d9fe56f6d82476",
    "transactionHash": "0xc1f8fc63ccf8ee57e7b537424766b8f83ecf1d01ed6957a98fb94e12c3f6cf46",
    "logs": [],
    "blockNumber": 24740052,
    "cumulativeGasUsed": "439099",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe5bd703E6C4C7679e10D429D87EF4550a9fA6fF4",
    8
  ],
  "numDeployments": 1,
  "solcInputHash": "963d7ec2e9c548189da8b3dbaa9834cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceFeed\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_targetDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDecimalsUpscaleNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sourceDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sourceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements AggregatorV3Interface to mimic being a Chainlink price feed\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_sourceFeed\":\"Address of the source Chainlink price feed\",\"_targetDecimals\":\"Target decimal precision (must be less than or equal to source decimals)\"}},\"description()\":{\"returns\":{\"_0\":\"Description string\"}},\"getRoundData(uint80)\":{\"params\":{\"_roundId\":\"The round ID to retrieve data for\"},\"returns\":{\"answer\":\"The price with adjusted decimals\",\"answeredInRound\":\"The round in which the answer was computed\",\"roundId\":\"The round ID\",\"startedAt\":\"The timestamp when the round started\",\"updatedAt\":\"The timestamp when the round was updated\"}},\"latestRoundData()\":{\"returns\":{\"answer\":\"The price with adjusted decimals\",\"answeredInRound\":\"The round in which the answer was computed\",\"roundId\":\"The round ID\",\"startedAt\":\"The timestamp when the round started\",\"updatedAt\":\"The timestamp when the round was updated\"}},\"version()\":{\"returns\":{\"_0\":\"Version number\"}}},\"title\":\"ChainlinkDecimalConverter\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidDecimalsUpscaleNotSupported()\":[{\"notice\":\"Error thrown when target decimals exceed source decimals\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor to initialize the decimal converter\"},\"decimals()\":{\"notice\":\"Target decimals for price conversion\"},\"description()\":{\"notice\":\"Returns the description of the original feed\"},\"getRoundData(uint80)\":{\"notice\":\"Gets data for a specific round\"},\"latestRoundData()\":{\"notice\":\"Gets data for the latest round\"},\"sourceDecimals()\":{\"notice\":\"Original decimals from the source feed\"},\"sourceFeed()\":{\"notice\":\"Original Chainlink price feed\"},\"version()\":{\"notice\":\"Returns the version of the original feed\"}},\"notice\":\"Converts between Chainlink price feeds with different decimal precisions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle_aggregator/helper/ChainlinkDecimalConverter.sol\":\"ChainlinkDecimalConverter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/oracle_aggregator/helper/ChainlinkDecimalConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interface/chainlink/IAggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title ChainlinkDecimalConverter\\n * @notice Converts between Chainlink price feeds with different decimal precisions\\n * @dev Implements AggregatorV3Interface to mimic being a Chainlink price feed\\n */\\ncontract ChainlinkDecimalConverter is AggregatorV3Interface {\\n    /// @notice Original Chainlink price feed\\n    AggregatorV3Interface public immutable sourceFeed;\\n\\n    /// @notice Original decimals from the source feed\\n    uint8 public immutable sourceDecimals;\\n\\n    /// @notice Target decimals for price conversion\\n    uint8 public immutable override decimals;\\n\\n    /// @notice Scaling factor to convert between source and target decimals\\n    int256 private immutable scalingFactor;\\n\\n    /**\\n     * @notice Error thrown when target decimals exceed source decimals\\n     */\\n    error InvalidDecimalsUpscaleNotSupported();\\n\\n    /**\\n     * @notice Constructor to initialize the decimal converter\\n     * @param _sourceFeed Address of the source Chainlink price feed\\n     * @param _targetDecimals Target decimal precision (must be less than or equal to source decimals)\\n     */\\n    constructor(address _sourceFeed, uint8 _targetDecimals) {\\n        sourceFeed = AggregatorV3Interface(_sourceFeed);\\n        sourceDecimals = sourceFeed.decimals();\\n        decimals = _targetDecimals;\\n\\n        // We only support downscaling (reducing precision), not upscaling\\n        if (_targetDecimals > sourceDecimals) {\\n            revert InvalidDecimalsUpscaleNotSupported();\\n        }\\n\\n        // Calculate the scaling factor to convert from source to target decimals\\n        uint8 decimalDifference = sourceDecimals - _targetDecimals;\\n        scalingFactor = int256(10 ** decimalDifference);\\n    }\\n\\n    /**\\n     * @notice Returns the description of the original feed\\n     * @return Description string\\n     */\\n    function description() external view override returns (string memory) {\\n        return sourceFeed.description();\\n    }\\n\\n    /**\\n     * @notice Returns the version of the original feed\\n     * @return Version number\\n     */\\n    function version() external view override returns (uint256) {\\n        return sourceFeed.version();\\n    }\\n\\n    /**\\n     * @notice Gets data for a specific round\\n     * @param _roundId The round ID to retrieve data for\\n     * @return roundId The round ID\\n     * @return answer The price with adjusted decimals\\n     * @return startedAt The timestamp when the round started\\n     * @return updatedAt The timestamp when the round was updated\\n     * @return answeredInRound The round in which the answer was computed\\n     */\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        (roundId, answer, startedAt, updatedAt, answeredInRound) = sourceFeed\\n            .getRoundData(_roundId);\\n        answer = answer / scalingFactor;\\n    }\\n\\n    /**\\n     * @notice Gets data for the latest round\\n     * @return roundId The round ID\\n     * @return answer The price with adjusted decimals\\n     * @return startedAt The timestamp when the round started\\n     * @return updatedAt The timestamp when the round was updated\\n     * @return answeredInRound The round in which the answer was computed\\n     */\\n    function latestRoundData()\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        (roundId, answer, startedAt, updatedAt, answeredInRound) = sourceFeed\\n            .latestRoundData();\\n        answer = answer / scalingFactor;\\n    }\\n}\\n\",\"keccak256\":\"0x26634975e3127af79f755b5a35a598e9c6db117c11b61e2fd6938b0ddf45cf1c\",\"license\":\"MIT\"},\"contracts/oracle_aggregator/interface/chainlink/IAggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x114f2a4b1de25cf837f38b10c4c1bca07d53587f2367e37c6f310a953fd20bd4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620009d0380380620009d083398101604081905262000035916200011d565b6001600160a01b03821660808190526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa15801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a6919062000162565b60ff90811660a081905290821660c08190521115620000d85760405163f00f549960e01b815260040160405180910390fd5b60008160a051620000ea91906200019d565b9050620000f981600a620002bc565b60e05250620002cd915050565b805160ff811681146200011857600080fd5b919050565b600080604083850312156200013157600080fd5b82516001600160a01b03811681146200014957600080fd5b9150620001596020840162000106565b90509250929050565b6000602082840312156200017557600080fd5b620001808262000106565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115620001b957620001b962000187565b92915050565b600181815b8085111562000200578160001904821115620001e457620001e462000187565b80851615620001f257918102915b93841c9390800290620001c4565b509250929050565b6000826200021957506001620001b9565b816200022857506000620001b9565b81600181146200024157600281146200024c576200026c565b6001915050620001b9565b60ff84111562000260576200026062000187565b50506001821b620001b9565b5060208310610133831016604e8410600b841016171562000291575081810a620001b9565b6200029d8383620001bf565b8060001904821115620002b457620002b462000187565b029392505050565b60006200018060ff84168362000208565b60805160a05160c05160e0516106a76200032960003960008181610364015261042f0152600060870152600061017901526000818161013a015281816101a701528181610230015281816102e8015261039e01526106a76000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639a6fc8f51161005b5780639a6fc8f5146100eb578063a1a927b114610135578063be231cb314610174578063feaf968c1461019b57600080fd5b8063313ce5671461008257806354fd4d50146100c05780637284e416146100d6575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020015b60405180910390f35b6100c86101a3565b6040519081526020016100b7565b6100de61022c565b6040516100b79190610481565b6100fe6100f93660046104cf565b6102b4565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100b7565b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b7565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100fe610394565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022791906104f3565b905090565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637284e4166040518163ffffffff1660e01b8152600401600060405180830381865afa15801561028c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102279190810190610522565b604051639a6fc8f560e01b815269ffffffffffffffffffff8216600482015260009081908190819081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639a6fc8f59060240160a060405180830381865afa15801561032f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035391906105cf565b9398509196509450925090506103897f000000000000000000000000000000000000000000000000000000000000000085610627565b935091939590929450565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e91906105cf565b9398509196509450925090506104547f000000000000000000000000000000000000000000000000000000000000000085610627565b93509091929394565b60005b83811015610478578181015183820152602001610460565b50506000910152565b60208152600082518060208401526104a081604085016020870161045d565b601f01601f19169190910160400192915050565b69ffffffffffffffffffff811681146104cc57600080fd5b50565b6000602082840312156104e157600080fd5b81356104ec816104b4565b9392505050565b60006020828403121561050557600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561053457600080fd5b815167ffffffffffffffff8082111561054c57600080fd5b818401915084601f83011261056057600080fd5b8151818111156105725761057261050c565b604051601f8201601f19908116603f0116810190838211818310171561059a5761059a61050c565b816040528281528760208487010111156105b357600080fd5b6105c483602083016020880161045d565b979650505050505050565b600080600080600060a086880312156105e757600080fd5b85516105f2816104b4565b809550506020860151935060408601519250606086015191506080860151610619816104b4565b809150509295509295909350565b60008261064457634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561066c57634e487b7160e01b600052601160045260246000fd5b50059056fea264697066735822122069fc60bd763ef5a077a9cdcc88f03874ab47afec0b5dcf23fdf7325542a36cb264736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80639a6fc8f51161005b5780639a6fc8f5146100eb578063a1a927b114610135578063be231cb314610174578063feaf968c1461019b57600080fd5b8063313ce5671461008257806354fd4d50146100c05780637284e416146100d6575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020015b60405180910390f35b6100c86101a3565b6040519081526020016100b7565b6100de61022c565b6040516100b79190610481565b6100fe6100f93660046104cf565b6102b4565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100b7565b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b7565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6100fe610394565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022791906104f3565b905090565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637284e4166040518163ffffffff1660e01b8152600401600060405180830381865afa15801561028c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102279190810190610522565b604051639a6fc8f560e01b815269ffffffffffffffffffff8216600482015260009081908190819081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639a6fc8f59060240160a060405180830381865afa15801561032f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035391906105cf565b9398509196509450925090506103897f000000000000000000000000000000000000000000000000000000000000000085610627565b935091939590929450565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e91906105cf565b9398509196509450925090506104547f000000000000000000000000000000000000000000000000000000000000000085610627565b93509091929394565b60005b83811015610478578181015183820152602001610460565b50506000910152565b60208152600082518060208401526104a081604085016020870161045d565b601f01601f19169190910160400192915050565b69ffffffffffffffffffff811681146104cc57600080fd5b50565b6000602082840312156104e157600080fd5b81356104ec816104b4565b9392505050565b60006020828403121561050557600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561053457600080fd5b815167ffffffffffffffff8082111561054c57600080fd5b818401915084601f83011261056057600080fd5b8151818111156105725761057261050c565b604051601f8201601f19908116603f0116810190838211818310171561059a5761059a61050c565b816040528281528760208487010111156105b357600080fd5b6105c483602083016020880161045d565b979650505050505050565b600080600080600060a086880312156105e757600080fd5b85516105f2816104b4565b809550506020860151935060408601519250606086015191506080860151610619816104b4565b809150509295509295909350565b60008261064457634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561066c57634e487b7160e01b600052601160045260246000fd5b50059056fea264697066735822122069fc60bd763ef5a077a9cdcc88f03874ab47afec0b5dcf23fdf7325542a36cb264736f6c63430008140033",
  "devdoc": {
    "details": "Implements AggregatorV3Interface to mimic being a Chainlink price feed",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_sourceFeed": "Address of the source Chainlink price feed",
          "_targetDecimals": "Target decimal precision (must be less than or equal to source decimals)"
        }
      },
      "description()": {
        "returns": {
          "_0": "Description string"
        }
      },
      "getRoundData(uint80)": {
        "params": {
          "_roundId": "The round ID to retrieve data for"
        },
        "returns": {
          "answer": "The price with adjusted decimals",
          "answeredInRound": "The round in which the answer was computed",
          "roundId": "The round ID",
          "startedAt": "The timestamp when the round started",
          "updatedAt": "The timestamp when the round was updated"
        }
      },
      "latestRoundData()": {
        "returns": {
          "answer": "The price with adjusted decimals",
          "answeredInRound": "The round in which the answer was computed",
          "roundId": "The round ID",
          "startedAt": "The timestamp when the round started",
          "updatedAt": "The timestamp when the round was updated"
        }
      },
      "version()": {
        "returns": {
          "_0": "Version number"
        }
      }
    },
    "title": "ChainlinkDecimalConverter",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidDecimalsUpscaleNotSupported()": [
        {
          "notice": "Error thrown when target decimals exceed source decimals"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor to initialize the decimal converter"
      },
      "decimals()": {
        "notice": "Target decimals for price conversion"
      },
      "description()": {
        "notice": "Returns the description of the original feed"
      },
      "getRoundData(uint80)": {
        "notice": "Gets data for a specific round"
      },
      "latestRoundData()": {
        "notice": "Gets data for the latest round"
      },
      "sourceDecimals()": {
        "notice": "Original decimals from the source feed"
      },
      "sourceFeed()": {
        "notice": "Original Chainlink price feed"
      },
      "version()": {
        "notice": "Returns the version of the original feed"
      }
    },
    "notice": "Converts between Chainlink price feeds with different decimal precisions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}