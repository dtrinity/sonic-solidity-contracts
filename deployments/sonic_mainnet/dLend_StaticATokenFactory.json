{
  "address": "0x777DB2EA92316F03ee5a31245b1787FBeBAC81f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staticAToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "StaticTokenCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "underlyings",
          "type": "address[]"
        }
      ],
      "name": "createStaticATokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "getStaticAToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStaticATokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f327d55eae615e073a03fec7a55bde76bbbd7c51768cf006dfd56c49e00672b",
  "receipt": {
    "to": null,
    "from": "0x0f5e3D9AEe7Ab5fDa909Af1ef147D98a7f4B3022",
    "contractAddress": "0x777DB2EA92316F03ee5a31245b1787FBeBAC81f1",
    "transactionIndex": 0,
    "gasUsed": "4581886",
    "logsBloom": "0x
    "blockHash": "0xfc58c22283ada30d9d1e469ee769be498370d05a36cdb4f9f3cbfb8ab31389fe",
    "transactionHash": "0x0f327d55eae615e073a03fec7a55bde76bbbd7c51768cf006dfd56c49e00672b",
    "logs": [],
    "blockNumber": 32057518,
    "cumulativeGasUsed": "4581886",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEdC3cfB1aa36c570cc1D374876268bDda2D460CC"
  ],
  "numDeployments": 1,
  "solcInputHash": "74fe7c2ac35994cc8a21c285cfb30f54",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staticAToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"StaticTokenCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"createStaticATokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getStaticAToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticATokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BGD labs (modified by dTrinity)\",\"kind\":\"dev\",\"methods\":{\"createStaticATokens(address[])\":{\"params\":{\"underlyings\":\"the addresses of the underlyings to create.\"},\"returns\":{\"_0\":\"address[] addresses of the new staticATokens.\"}},\"getStaticAToken(address)\":{\"params\":{\"underlying\":\"the address of the underlying.\"},\"returns\":{\"_0\":\"address the staticAToken address.\"}},\"getStaticATokens()\":{\"returns\":{\"_0\":\"address[] list of tokens\"}}},\"title\":\"StaticATokenFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createStaticATokens(address[])\":{\"notice\":\"Creates new staticATokens\"},\"getStaticAToken(address)\":{\"notice\":\"Returns the staticAToken for a given underlying.\"},\"getStaticATokens()\":{\"notice\":\"Returns all tokens deployed via this registry.\"}},\"notice\":\"Factory contract that keeps track of all deployed static aToken wrappers for a specified pool. This registry also acts as a factory, allowing to deploy new static aTokens on demand. There can only be one static aToken per underlying on the registry at a time.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/atoken_wrapper/StaticATokenFactory.sol\":\"StaticATokenFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x085baeca105c618ae1fdebcc02702c0dad166d9935fb4b5ad11548fd317896ee\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(\\n            value <= type(uint224).max,\\n            \\\"SafeCast: value doesn't fit in 224 bits\\\"\\n        );\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(\\n            value <= type(uint128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(\\n            value <= type(uint96).max,\\n            \\\"SafeCast: value doesn't fit in 96 bits\\\"\\n        );\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(\\n            value <= type(uint64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(\\n            value <= type(uint32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(\\n            value <= type(uint16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(\\n            value <= type(uint8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(\\n            value >= type(int128).min && value <= type(int128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(\\n            value >= type(int64).min && value <= type(int64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(\\n            value >= type(int32).min && value <= type(int32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(\\n            value >= type(int16).min && value <= type(int16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(\\n            value >= type(int8).min && value <= type(int8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(\\n            value <= uint256(type(int256).max),\\n            \\\"SafeCast: value doesn't fit in an int256\\\"\\n        );\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x340633abb6f61235fcdfa3a78cc177c53fcd60670d4618e4b5e25d52aea8a563\",\"license\":\"MIT\"},\"contracts/dlend/core/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || isConstructor() || !initialized,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x5ab7f0be68d5345dc5cfcea3743c25455efc6ffa86f8b2fd4d26ea326af241a1\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {IPriceOracleGetter} from \\\"./IPriceOracleGetter.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title IAaveOracle\\n * @author Aave\\n * @notice Defines the basic interface for the Aave Oracle\\n */\\ninterface IAaveOracle is IPriceOracleGetter {\\n    /**\\n     * @dev Emitted after the base currency is set\\n     * @param baseCurrency The base currency of used for price quotes\\n     * @param baseCurrencyUnit The unit of the base currency\\n     */\\n    event BaseCurrencySet(\\n        address indexed baseCurrency,\\n        uint256 baseCurrencyUnit\\n    );\\n\\n    /**\\n     * @dev Emitted after the price source of an asset is updated\\n     * @param asset The address of the asset\\n     * @param source The price source of the asset\\n     */\\n    event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n    /**\\n     * @dev Emitted after the address of fallback oracle is updated\\n     * @param fallbackOracle The address of the fallback oracle\\n     */\\n    event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider\\n     * @return The address of the PoolAddressesProvider contract\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Sets or replaces price sources of assets\\n     * @param assets The addresses of the assets\\n     * @param sources The addresses of the price sources\\n     */\\n    function setAssetSources(\\n        address[] calldata assets,\\n        address[] calldata sources\\n    ) external;\\n\\n    /**\\n     * @notice Sets the fallback oracle\\n     * @param fallbackOracle The address of the fallback oracle\\n     */\\n    function setFallbackOracle(address fallbackOracle) external;\\n\\n    /**\\n     * @notice Returns a list of prices from a list of assets addresses\\n     * @param assets The list of assets addresses\\n     * @return The prices of the given assets\\n     */\\n    function getAssetsPrices(\\n        address[] calldata assets\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns the address of the source for an asset address\\n     * @param asset The address of the asset\\n     * @return The address of the source\\n     */\\n    function getSourceOfAsset(address asset) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the fallback oracle\\n     * @return The address of the fallback oracle\\n     */\\n    function getFallbackOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4a38466a0cb79795d36206d17392c9c41ca045a9f1007e4dc61428e880f72940\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/interfaces/IERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IERC20WithPermit\\n * @author Aave\\n * @notice Interface for the permit function (EIP-2612)\\n */\\ninterface IERC20WithPermit is IERC20 {\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e31a94b11adbb3ce0c8e6be07aa919c7c966870db51efdf68081c3408ba60ca\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     */\\n    event BackUnbacked(\\n        address indexed reserve,\\n        address indexed backer,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     */\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(\\n        address indexed asset,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     */\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     */\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     * @return The backed amount\\n     */\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     */\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    function swapBorrowRateMode(\\n        address asset,\\n        uint256 interestRateMode\\n    ) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     */\\n    function setUserUseReserveAsCollateral(\\n        address asset,\\n        bool useAsCollateral\\n    ) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     */\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     */\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     */\\n    function getConfiguration(\\n        address asset\\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     */\\n    function getUserConfiguration(\\n        address user\\n    ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n     * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\\n     * combination with variable debt supply/balances.\\n     * If using this function externally, consider that is possible to have an increasing normalized\\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n     * (e.g. only updates with non-zero variable debt supply)\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(\\n        address asset\\n    ) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(\\n        uint8 id,\\n        DataTypes.EModeCategory memory config\\n    ) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(\\n        uint8 id\\n    ) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd0b171fc95506162c4ad89274a4e0586ebc6f28cc2a343da801debfb4adba2e7\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddressFromID(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     */\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     */\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     */\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     */\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     */\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x351127e1f52bdabe039a4c4a977d595b063955047328cbf57853727ff767ccde\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n    /**\\n     * @notice Returns the base currency address\\n     * @dev Address 0x0 is reserved for USD as base currency.\\n     * @return Returns the base currency address.\\n     */\\n    function BASE_CURRENCY() external view returns (address);\\n\\n    /**\\n     * @notice Returns the base currency unit\\n     * @dev 1 ether for ETH, 1e8 for USD.\\n     * @return Returns the base currency unit.\\n     */\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the asset price in the base currency\\n     * @param asset The address of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdaaa39d40743c1306595754057491f3d91e6cf9bc018d6b6d32b16ed57c9d313\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted tokens\\n     * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Mint(\\n        address indexed caller,\\n        address indexed onBehalfOf,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted after the burn action\\n     * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n     * @param from The address from which the tokens will be burned\\n     * @param target The address that will receive the underlying, if any\\n     * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Burn(\\n        address indexed from,\\n        address indexed target,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Returns the scaled balance of the user.\\n     * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n     * at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     */\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled total supply\\n     */\\n    function getScaledUserBalanceAndSupply(\\n        address user\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns last index interest was accrued to the user's balance\\n     * @param user The address of the user\\n     * @return The last index interest was accrued to the user's balance, expressed in ray\\n     */\\n    function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9dc231c84960de4258692507e00dd3af912e46683e0245fbc2f5ffae43ac731e\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n    uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n    uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n    /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n    uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n    uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n    uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n    uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n    uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n    uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n    uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n    uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n    uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n    uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\n    uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n    uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n    uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n    uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n    uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n    uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n    uint256 internal constant MAX_VALID_LTV = 65535;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\\n    uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n    uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n    uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n    uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n    uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n    uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n    /**\\n     * @notice Sets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @param ltv The new ltv\\n     */\\n    function setLtv(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 ltv\\n    ) internal pure {\\n        require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n        self.data = (self.data & LTV_MASK) | ltv;\\n    }\\n\\n    /**\\n     * @notice Gets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @return The loan to value\\n     */\\n    function getLtv(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return self.data & ~LTV_MASK;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @param threshold The new liquidation threshold\\n     */\\n    function setLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 threshold\\n    ) internal pure {\\n        require(\\n            threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,\\n            Errors.INVALID_LIQ_THRESHOLD\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n            (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation threshold\\n     */\\n    function getLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\n            LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @param bonus The new liquidation bonus\\n     */\\n    function setLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 bonus\\n    ) internal pure {\\n        require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n        self.data =\\n            (self.data & LIQUIDATION_BONUS_MASK) |\\n            (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation bonus\\n     */\\n    function getLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_BONUS_MASK) >>\\n            LIQUIDATION_BONUS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @param decimals The decimals\\n     */\\n    function setDecimals(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 decimals\\n    ) internal pure {\\n        require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n        self.data =\\n            (self.data & DECIMALS_MASK) |\\n            (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @return The decimals of the asset\\n     */\\n    function getDecimals(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     */\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @return The active state\\n     */\\n    function getActive(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @param frozen The frozen state\\n     */\\n    function setFrozen(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool frozen\\n    ) internal pure {\\n        self.data =\\n            (self.data & FROZEN_MASK) |\\n            (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @return The frozen state\\n     */\\n    function getFrozen(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~FROZEN_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the paused state of the reserve\\n     * @param self The reserve configuration\\n     * @param paused The paused state\\n     */\\n    function setPaused(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool paused\\n    ) internal pure {\\n        self.data =\\n            (self.data & PAUSED_MASK) |\\n            (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the paused state of the reserve\\n     * @param self The reserve configuration\\n     * @return The paused state\\n     */\\n    function getPaused(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~PAUSED_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the borrowable in isolation flag for the reserve.\\n     * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n     * amount will be accumulated in the isolated collateral's total debt exposure.\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n     * consistency in the debt ceiling calculations.\\n     * @param self The reserve configuration\\n     * @param borrowable True if the asset is borrowable\\n     */\\n    function setBorrowableInIsolation(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool borrowable\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n            (uint256(borrowable ? 1 : 0) <<\\n                BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowable in isolation flag for the reserve.\\n     * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n     * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n     * consistency in the debt ceiling calculations.\\n     * @param self The reserve configuration\\n     * @return The borrowable in isolation flag\\n     */\\n    function getBorrowableInIsolation(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the siloed borrowing flag for the reserve.\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n     * @param self The reserve configuration\\n     * @param siloed True if the asset is siloed\\n     */\\n    function setSiloedBorrowing(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool siloed\\n    ) internal pure {\\n        self.data =\\n            (self.data & SILOED_BORROWING_MASK) |\\n            (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the siloed borrowing flag for the reserve.\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n     * @param self The reserve configuration\\n     * @return The siloed borrowing flag\\n     */\\n    function getSiloedBorrowing(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Enables or disables borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the borrowing needs to be enabled, false otherwise\\n     */\\n    function setBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrowing state\\n     */\\n    function getBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Enables or disables stable rate borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n     */\\n    function setStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & STABLE_BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) <<\\n                STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the stable rate borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The stable rate borrowing state\\n     */\\n    function getStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @param reserveFactor The reserve factor\\n     */\\n    function setReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 reserveFactor\\n    ) internal pure {\\n        require(\\n            reserveFactor <= MAX_VALID_RESERVE_FACTOR,\\n            Errors.INVALID_RESERVE_FACTOR\\n        );\\n\\n        self.data =\\n            (self.data & RESERVE_FACTOR_MASK) |\\n            (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @return The reserve factor\\n     */\\n    function getReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~RESERVE_FACTOR_MASK) >>\\n            RESERVE_FACTOR_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the borrow cap of the reserve\\n     * @param self The reserve configuration\\n     * @param borrowCap The borrow cap\\n     */\\n    function setBorrowCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 borrowCap\\n    ) internal pure {\\n        require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n        self.data =\\n            (self.data & BORROW_CAP_MASK) |\\n            (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrow cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrow cap\\n     */\\n    function getBorrowCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the supply cap of the reserve\\n     * @param self The reserve configuration\\n     * @param supplyCap The supply cap\\n     */\\n    function setSupplyCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 supplyCap\\n    ) internal pure {\\n        require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n        self.data =\\n            (self.data & SUPPLY_CAP_MASK) |\\n            (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the supply cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The supply cap\\n     */\\n    function getSupplyCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the debt ceiling in isolation mode for the asset\\n     * @param self The reserve configuration\\n     * @param ceiling The maximum debt ceiling for the asset\\n     */\\n    function setDebtCeiling(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 ceiling\\n    ) internal pure {\\n        require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n        self.data =\\n            (self.data & DEBT_CEILING_MASK) |\\n            (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n     * @param self The reserve configuration\\n     * @return The debt ceiling (0 = isolation mode disabled)\\n     */\\n    function getDebtCeiling(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation protocol fee of the reserve\\n     * @param self The reserve configuration\\n     * @param liquidationProtocolFee The liquidation protocol fee\\n     */\\n    function setLiquidationProtocolFee(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 liquidationProtocolFee\\n    ) internal pure {\\n        require(\\n            liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n            Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n            (liquidationProtocolFee <<\\n                LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation protocol fee\\n     * @param self The reserve configuration\\n     * @return The liquidation protocol fee\\n     */\\n    function getLiquidationProtocolFee(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>\\n            LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the unbacked mint cap of the reserve\\n     * @param self The reserve configuration\\n     * @param unbackedMintCap The unbacked mint cap\\n     */\\n    function setUnbackedMintCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 unbackedMintCap\\n    ) internal pure {\\n        require(\\n            unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP,\\n            Errors.INVALID_UNBACKED_MINT_CAP\\n        );\\n\\n        self.data =\\n            (self.data & UNBACKED_MINT_CAP_MASK) |\\n            (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the unbacked mint cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The unbacked mint cap\\n     */\\n    function getUnbackedMintCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~UNBACKED_MINT_CAP_MASK) >>\\n            UNBACKED_MINT_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the eMode asset category\\n     * @param self The reserve configuration\\n     * @param category The asset category when the user selects the eMode\\n     */\\n    function setEModeCategory(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 category\\n    ) internal pure {\\n        require(\\n            category <= MAX_VALID_EMODE_CATEGORY,\\n            Errors.INVALID_EMODE_CATEGORY\\n        );\\n\\n        self.data =\\n            (self.data & EMODE_CATEGORY_MASK) |\\n            (category << EMODE_CATEGORY_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the eMode asset category\\n     * @param self The reserve configuration\\n     * @return The eMode category for the asset\\n     */\\n    function getEModeCategory(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~EMODE_CATEGORY_MASK) >>\\n            EMODE_CATEGORY_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the flashloanable flag for the reserve\\n     * @param self The reserve configuration\\n     * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\\n     */\\n    function setFlashLoanEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool flashLoanEnabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & FLASHLOAN_ENABLED_MASK) |\\n            (uint256(flashLoanEnabled ? 1 : 0) <<\\n                FLASHLOAN_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the flashloanable flag for the reserve\\n     * @param self The reserve configuration\\n     * @return The flashloanable flag\\n     */\\n    function getFlashLoanEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flag representing active\\n     * @return The state flag representing frozen\\n     * @return The state flag representing borrowing enabled\\n     * @return The state flag representing stableRateBorrowing enabled\\n     * @return The state flag representing paused\\n     */\\n    function getFlags(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool, bool, bool, bool, bool) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_MASK) != 0,\\n            (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n            (dataLocal & ~PAUSED_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the configuration parameters of the reserve from storage\\n     * @param self The reserve configuration\\n     * @return The state param representing ltv\\n     * @return The state param representing liquidation threshold\\n     * @return The state param representing liquidation bonus\\n     * @return The state param representing reserve decimals\\n     * @return The state param representing reserve factor\\n     * @return The state param representing eMode category\\n     */\\n    function getParams(\\n        DataTypes.ReserveConfigurationMap memory self\\n    )\\n        internal\\n        pure\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            dataLocal & ~LTV_MASK,\\n            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>\\n                LIQUIDATION_BONUS_START_BIT_POSITION,\\n            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n            (dataLocal & ~RESERVE_FACTOR_MASK) >>\\n                RESERVE_FACTOR_START_BIT_POSITION,\\n            (dataLocal & ~EMODE_CATEGORY_MASK) >>\\n                EMODE_CATEGORY_START_BIT_POSITION\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the caps parameters of the reserve from storage\\n     * @param self The reserve configuration\\n     * @return The state param representing borrow cap\\n     * @return The state param representing supply cap.\\n     */\\n    function getCaps(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0a611b80cf2d5912049a99cb057371a8a040a17c73f20d4e5c77f644be009b3d\",\"license\":\"BUSL-1.1\"},\"contracts/dlend/core/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n    string public constant CALLER_NOT_POOL_ADMIN = \\\"1\\\"; // 'The caller of the function is not a pool admin'\\n    string public constant CALLER_NOT_EMERGENCY_ADMIN = \\\"2\\\"; // 'The caller of the function is not an emergency admin'\\n    string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = \\\"3\\\"; // 'The caller of the function is not a pool or emergency admin'\\n    string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = \\\"4\\\"; // 'The caller of the function is not a risk or pool admin'\\n    string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = \\\"5\\\"; // 'The caller of the function is not an asset listing or pool admin'\\n    string public constant CALLER_NOT_BRIDGE = \\\"6\\\"; // 'The caller of the function is not a bridge'\\n    string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = \\\"7\\\"; // 'Pool addresses provider is not registered'\\n    string public constant INVALID_ADDRESSES_PROVIDER_ID = \\\"8\\\"; // 'Invalid id for the pool addresses provider'\\n    string public constant NOT_CONTRACT = \\\"9\\\"; // 'Address is not a contract'\\n    string public constant CALLER_NOT_POOL_CONFIGURATOR = \\\"10\\\"; // 'The caller of the function is not the pool configurator'\\n    string public constant CALLER_NOT_ATOKEN = \\\"11\\\"; // 'The caller of the function is not an AToken'\\n    string public constant INVALID_ADDRESSES_PROVIDER = \\\"12\\\"; // 'The address of the pool addresses provider is invalid'\\n    string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = \\\"13\\\"; // 'Invalid return value of the flashloan executor function'\\n    string public constant RESERVE_ALREADY_ADDED = \\\"14\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant NO_MORE_RESERVES_ALLOWED = \\\"15\\\"; // 'Maximum amount of reserves in the pool reached'\\n    string public constant EMODE_CATEGORY_RESERVED = \\\"16\\\"; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n    string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = \\\"17\\\"; // 'Invalid eMode category assignment to asset'\\n    string public constant RESERVE_LIQUIDITY_NOT_ZERO = \\\"18\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant FLASHLOAN_PREMIUM_INVALID = \\\"19\\\"; // 'Invalid flashloan premium'\\n    string public constant INVALID_RESERVE_PARAMS = \\\"20\\\"; // 'Invalid risk parameters for the reserve'\\n    string public constant INVALID_EMODE_CATEGORY_PARAMS = \\\"21\\\"; // 'Invalid risk parameters for the eMode category'\\n    string public constant BRIDGE_PROTOCOL_FEE_INVALID = \\\"22\\\"; // 'Invalid bridge protocol fee'\\n    string public constant CALLER_MUST_BE_POOL = \\\"23\\\"; // 'The caller of this function must be a pool'\\n    string public constant INVALID_MINT_AMOUNT = \\\"24\\\"; // 'Invalid amount to mint'\\n    string public constant INVALID_BURN_AMOUNT = \\\"25\\\"; // 'Invalid amount to burn'\\n    string public constant INVALID_AMOUNT = \\\"26\\\"; // 'Amount must be greater than 0'\\n    string public constant RESERVE_INACTIVE = \\\"27\\\"; // 'Action requires an active reserve'\\n    string public constant RESERVE_FROZEN = \\\"28\\\"; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant RESERVE_PAUSED = \\\"29\\\"; // 'Action cannot be performed because the reserve is paused'\\n    string public constant BORROWING_NOT_ENABLED = \\\"30\\\"; // 'Borrowing is not enabled'\\n    string public constant STABLE_BORROWING_NOT_ENABLED = \\\"31\\\"; // 'Stable borrowing is not enabled'\\n    string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"32\\\"; // 'User cannot withdraw more than the available balance'\\n    string public constant INVALID_INTEREST_RATE_MODE_SELECTED = \\\"33\\\"; // 'Invalid interest rate mode selected'\\n    string public constant COLLATERAL_BALANCE_IS_ZERO = \\\"34\\\"; // 'The collateral balance is 0'\\n    string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =\\n        \\\"35\\\"; // 'Health factor is lesser than the liquidation threshold'\\n    string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"36\\\"; // 'There is not enough collateral to cover a new borrow'\\n    string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"37\\\"; // 'Collateral is (mostly) the same currency that is being borrowed'\\n    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"38\\\"; // 'The requested amount is greater than the max loan size in stable rate mode'\\n    string public constant NO_DEBT_OF_SELECTED_TYPE = \\\"39\\\"; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n    string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"40\\\"; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n    string public constant NO_OUTSTANDING_STABLE_DEBT = \\\"41\\\"; // 'User does not have outstanding stable rate debt on this reserve'\\n    string public constant NO_OUTSTANDING_VARIABLE_DEBT = \\\"42\\\"; // 'User does not have outstanding variable rate debt on this reserve'\\n    string public constant UNDERLYING_BALANCE_ZERO = \\\"43\\\"; // 'The underlying balance needs to be greater than 0'\\n    string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"44\\\"; // 'Interest rate rebalance conditions were not met'\\n    string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"45\\\"; // 'Health factor is not below the threshold'\\n    string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"46\\\"; // 'The collateral chosen cannot be liquidated'\\n    string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"47\\\"; // 'User did not borrow the specified currency'\\n    string public constant INCONSISTENT_FLASHLOAN_PARAMS = \\\"49\\\"; // 'Inconsistent flashloan parameters'\\n    string public constant BORROW_CAP_EXCEEDED = \\\"50\\\"; // 'Borrow cap is exceeded'\\n    string public constant SUPPLY_CAP_EXCEEDED = \\\"51\\\"; // 'Supply cap is exceeded'\\n    string public constant UNBACKED_MINT_CAP_EXCEEDED = \\\"52\\\"; // 'Unbacked mint cap is exceeded'\\n    string public constant DEBT_CEILING_EXCEEDED = \\\"53\\\"; // 'Debt ceiling is exceeded'\\n    string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = \\\"54\\\"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\\n    string public constant STABLE_DEBT_NOT_ZERO = \\\"55\\\"; // 'Stable debt supply is not zero'\\n    string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = \\\"56\\\"; // 'Variable debt supply is not zero'\\n    string public constant LTV_VALIDATION_FAILED = \\\"57\\\"; // 'Ltv validation failed'\\n    string public constant INCONSISTENT_EMODE_CATEGORY = \\\"58\\\"; // 'Inconsistent eMode category'\\n    string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = \\\"59\\\"; // 'Price oracle sentinel validation failed'\\n    string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = \\\"60\\\"; // 'Asset is not borrowable in isolation mode'\\n    string public constant RESERVE_ALREADY_INITIALIZED = \\\"61\\\"; // 'Reserve has already been initialized'\\n    string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = \\\"62\\\"; // 'User is in isolation mode or ltv is zero'\\n    string public constant INVALID_LTV = \\\"63\\\"; // 'Invalid ltv parameter for the reserve'\\n    string public constant INVALID_LIQ_THRESHOLD = \\\"64\\\"; // 'Invalid liquidity threshold parameter for the reserve'\\n    string public constant INVALID_LIQ_BONUS = \\\"65\\\"; // 'Invalid liquidity bonus parameter for the reserve'\\n    string public constant INVALID_DECIMALS = \\\"66\\\"; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n    string public constant INVALID_RESERVE_FACTOR = \\\"67\\\"; // 'Invalid reserve factor parameter for the reserve'\\n    string public constant INVALID_BORROW_CAP = \\\"68\\\"; // 'Invalid borrow cap for the reserve'\\n    string public constant INVALID_SUPPLY_CAP = \\\"69\\\"; // 'Invalid supply cap for the reserve'\\n    string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = \\\"70\\\"; // 'Invalid liquidation protocol fee for the reserve'\\n    string public constant INVALID_EMODE_CATEGORY = \\\"71\\\"; // 'Invalid eMode category for the reserve'\\n    string public constant INVALID_UNBACKED_MINT_CAP = \\\"72\\\"; // 'Invalid unbacked mint cap for the reserve'\\n    string public constant INVALID_DEBT_CEILING = \\\"73\\\"; // 'Invalid debt ceiling for the reserve\\n    string public constant INVALID_RESERVE_INDEX = \\\"74\\\"; // 'Invalid reserve index'\\n    string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"75\\\"; // 'ACL admin cannot be set to the zero address'\\n    string public constant INCONSISTENT_PARAMS_LENGTH = \\\"76\\\"; // 'Array parameters that should be equal length are not'\\n    string public constant ZERO_ADDRESS_NOT_VALID = \\\"77\\\"; // 'Zero address not valid'\\n    string public constant INVALID_EXPIRATION = \\\"78\\\"; // 'Invalid expiration'\\n    string public constant INVALID_SIGNATURE = \\\"79\\\"; // 'Invalid signature'\\n    string public constant OPERATION_NOT_SUPPORTED = \\\"80\\\"; // 'Operation not supported'\\n    string public constant DEBT_CEILING_NOT_ZERO = \\\"81\\\"; // 'Debt ceiling is not zero'\\n    string public constant ASSET_NOT_LISTED = \\\"82\\\"; // 'Asset is not listed'\\n    string public constant INVALID_OPTIMAL_USAGE_RATIO = \\\"83\\\"; // 'Invalid optimal usage ratio'\\n    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = \\\"84\\\"; // 'Invalid optimal stable to total debt ratio'\\n    string public constant UNDERLYING_CANNOT_BE_RESCUED = \\\"85\\\"; // 'The underlying asset cannot be rescued'\\n    string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = \\\"86\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant POOL_ADDRESSES_DO_NOT_MATCH = \\\"87\\\"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n    string public constant STABLE_BORROWING_ENABLED = \\\"88\\\"; // 'Stable borrowing is enabled'\\n    string public constant SILOED_BORROWING_VIOLATION = \\\"89\\\"; // 'User is trying to borrow multiple assets including a siloed one'\\n    string public constant RESERVE_DEBT_NOT_ZERO = \\\"90\\\"; // the total debt of the reserve needs to be 0\\n    string public constant FLASHLOAN_DISABLED = \\\"91\\\"; // FlashLoaning for this asset is disabled\\n}\\n\",\"keccak256\":\"0x61fd1ef22c6b7efdd802727883649132f7c558cfbe2c2a2ed29ce693ee4dfd62\",\"license\":\"BUSL-1.1\"},\"contracts/dlend/core/protocol/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @title MathUtils library\\n * @author Aave\\n * @notice Provides functions to perform linear and compounded interest calculations\\n */\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     */\\n    function calculateLinearInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 result = rate *\\n            (block.timestamp - uint256(lastUpdateTimestamp));\\n        unchecked {\\n            result = result / SECONDS_PER_YEAR;\\n        }\\n\\n        return WadRayMath.RAY + result;\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great\\n     * gas cost reductions. The whitepaper contains reference to the approximation and a table showing the margin of\\n     * error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     */\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n        if (exp == 0) {\\n            return WadRayMath.RAY;\\n        }\\n\\n        uint256 expMinusOne;\\n        uint256 expMinusTwo;\\n        uint256 basePowerTwo;\\n        uint256 basePowerThree;\\n        unchecked {\\n            expMinusOne = exp - 1;\\n\\n            expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n            basePowerTwo =\\n                rate.rayMul(rate) /\\n                (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n            basePowerThree = basePowerTwo.rayMul(rate) / SECONDS_PER_YEAR;\\n        }\\n\\n        uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\n        unchecked {\\n            secondTerm /= 2;\\n        }\\n        uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\n        unchecked {\\n            thirdTerm /= 6;\\n        }\\n\\n        return\\n            WadRayMath.RAY +\\n            (rate * exp) /\\n            SECONDS_PER_YEAR +\\n            secondTerm +\\n            thirdTerm;\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     * @return The interest rate compounded between lastUpdateTimestamp and current block timestamp, in ray\\n     */\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x18cdcc1679b2970a0443a25534127c355f699b983d7023f10b28c82da2bef55f\",\"license\":\"BUSL-1.1\"},\"contracts/dlend/core/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary WadRayMath {\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     */\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     */\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     */\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     */\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c1abb430116063faa543c319b0ffe659bd9dc3b8e9641788472088d047dfb2d\",\"license\":\"BUSL-1.1\"},\"contracts/dlend/core/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62: siloed borrowing enabled\\n        //bit 63: flashloaning enabled\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0xb6ea55e0a2e139d5ab2b870a956f93b9bc83ff124cc4a0e656a81a5ac718e0a8\",\"license\":\"BUSL-1.1\"},\"contracts/dlend/periphery/rewards/interfaces/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAaveOracle} from \\\"contracts/dlend/core/interfaces/IAaveOracle.sol\\\";\\nimport {IRewardsDistributor} from \\\"./IRewardsDistributor.sol\\\";\\nimport {ITransferStrategyBase} from \\\"./ITransferStrategyBase.sol\\\";\\nimport {RewardsDataTypes} from \\\"../libraries/RewardsDataTypes.sol\\\";\\n\\n/**\\n * @title IRewardsController\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Controller.\\n */\\ninterface IRewardsController is IRewardsDistributor {\\n    /**\\n     * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Emitted when rewards are claimed\\n     * @param user The address of the user rewards has been claimed on behalf of\\n     * @param reward The address of the token reward is claimed\\n     * @param to The address of the receiver of the rewards\\n     * @param claimer The address of the claimer\\n     * @param amount The amount of rewards claimed\\n     */\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed reward,\\n        address indexed to,\\n        address claimer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when a transfer strategy is installed for the reward distribution\\n     * @param reward The address of the token reward\\n     * @param transferStrategy The address of TransferStrategy contract\\n     */\\n    event TransferStrategyInstalled(\\n        address indexed reward,\\n        address indexed transferStrategy\\n    );\\n\\n    /**\\n     * @dev Emitted when the reward oracle is updated\\n     * @param reward The address of the token reward\\n     * @param rewardOracle The address of oracle\\n     */\\n    event RewardOracleUpdated(\\n        address indexed reward,\\n        address indexed rewardOracle\\n    );\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n     * @param reward The address of the reward token\\n     * @param transferStrategy The address of the TransferStrategy logic contract\\n     */\\n    function setTransferStrategy(\\n        address reward,\\n        ITransferStrategyBase transferStrategy\\n    ) external;\\n\\n    /**\\n     * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n     * @notice At the moment of reward configuration, the Incentives Controller performs\\n     * a check to see if the reward asset oracle is compatible with IAaveOracle interface.\\n     * This check is enforced for integrators to be able to show incentives at\\n     * the current Aave UI without the need to setup an external price registry\\n     * @param reward The address of the reward to set the price aggregator\\n     * @param rewardOracle The address of price aggregator that follows IAaveOracle interface\\n     */\\n    function setRewardOracle(address reward, IAaveOracle rewardOracle) external;\\n\\n    /**\\n     * @dev Get the price aggregator oracle address\\n     * @param reward The address of the reward\\n     * @return The price oracle of the reward\\n     */\\n    function getRewardOracle(address reward) external view returns (address);\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n     * @param user The address of the user\\n     * @return The claimer address\\n     */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\n     * @param reward The address of the reward\\n     * @return The address of the TransferStrategy contract\\n     */\\n    function getTransferStrategy(\\n        address reward\\n    ) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n     * @param config The assets configuration input, the list of structs contains the following fields:\\n     *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n     *   uint256 totalSupply: The total supply of the asset to incentivize\\n     *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n     *   address asset: The asset address to incentivize\\n     *   address reward: The reward token address\\n     *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n     *   IAaveOracle rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n     */\\n    function configureAssets(\\n        RewardsDataTypes.RewardsConfigInput[] memory config\\n    ) external;\\n\\n    /**\\n     * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n     * @dev The units of `totalSupply` and `userBalance` should be the same.\\n     * @param user The address of the user whose asset balance has changed\\n     * @param totalSupply The total supply of the asset prior to user balance change\\n     * @param userBalance The previous user balance prior to balance change\\n     **/\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance\\n    ) external;\\n\\n    /**\\n     * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets List of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param to The address that will be receiving the rewards\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\n     * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param user The address to check and claim rewards\\n     * @param to The address that will be receiving the rewards\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewardsToSelf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param to The address that will be receiving the rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n     **/\\n    function claimAllRewards(\\n        address[] calldata assets,\\n        address to\\n    )\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param user The address to check and claim rewards\\n     * @param to The address that will be receiving the rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n     **/\\n    function claimAllRewardsOnBehalf(\\n        address[] calldata assets,\\n        address user,\\n        address to\\n    )\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n     **/\\n    function claimAllRewardsToSelf(\\n        address[] calldata assets\\n    )\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Recieve more fund from the user to existing reward\\n     * @param reward The reward address is being distributed\\n     * @param amount The token amount is being funded\\n     * @param from The address of the one who funds the rewards\\n     */\\n    function depositRewardFrom(\\n        address reward,\\n        uint256 amount,\\n        address from\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb994ef5f2fc457254a9e7e689fefb7eb1e30e1d8a52cd23edfdcd017053ad310\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/rewards/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface IRewardsDistributor {\\n    /**\\n     * @dev Emitted when the configuration of the rewards of an asset is updated.\\n     * @param asset The address of the incentivized asset\\n     * @param reward The address of the reward token\\n     * @param oldEmission The old emissions per second value of the reward distribution\\n     * @param newEmission The new emissions per second value of the reward distribution\\n     * @param oldDistributionEnd The old end timestamp of the reward distribution\\n     * @param newDistributionEnd The new end timestamp of the reward distribution\\n     * @param assetIndex The index of the asset distribution\\n     */\\n    event AssetConfigUpdated(\\n        address indexed asset,\\n        address indexed reward,\\n        uint256 oldEmission,\\n        uint256 newEmission,\\n        uint256 oldDistributionEnd,\\n        uint256 newDistributionEnd,\\n        uint256 assetIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n     * @param asset The address of the incentivized asset\\n     * @param reward The address of the reward token\\n     * @param user The address of the user that rewards are accrued on behalf of\\n     * @param assetIndex The index of the asset distribution\\n     * @param userIndex The index of the asset distribution on behalf of the user\\n     * @param rewardsAccrued The amount of rewards accrued\\n     */\\n    event Accrued(\\n        address indexed asset,\\n        address indexed reward,\\n        address indexed user,\\n        uint256 assetIndex,\\n        uint256 userIndex,\\n        uint256 rewardsAccrued\\n    );\\n\\n    /**\\n     * @dev Sets the end date for the distribution\\n     * @param asset The asset to incentivize\\n     * @param reward The reward token that incentives the asset\\n     * @param newDistributionEnd The end date of the incentivization, in unix time format\\n     **/\\n    function setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) external;\\n\\n    /**\\n     * @dev Sets the emission per second of a set of reward distributions\\n     * @param asset The asset is being incentivized\\n     * @param rewards List of reward addresses are being distributed\\n     * @param newEmissionsPerSecond List of new reward emissions per second\\n     */\\n    function setEmissionPerSecond(\\n        address asset,\\n        address[] calldata rewards,\\n        uint88[] calldata newEmissionsPerSecond\\n    ) external;\\n\\n    /**\\n     * @dev Gets the end date for the distribution\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The timestamp with the end of the distribution, in unix time format\\n     **/\\n    function getDistributionEnd(\\n        address asset,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the index of a user on a reward distribution\\n     * @param user Address of the user\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The current user asset index, not including new distributions\\n     **/\\n    function getUserAssetIndex(\\n        address user,\\n        address asset,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the configuration of the distribution reward for a certain asset\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The index of the asset distribution\\n     * @return The emission per second of the reward distribution\\n     * @return The timestamp of the last update of the index\\n     * @return The timestamp of the distribution end\\n     **/\\n    function getRewardsData(\\n        address asset,\\n        address reward\\n    ) external view returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @dev Calculates the next value of an specific distribution index, with validations.\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The old index of the asset distribution\\n     * @return The new index of the asset distribution\\n     **/\\n    function getAssetIndex(\\n        address asset,\\n        address reward\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Returns the list of available reward token addresses of an incentivized asset\\n     * @param asset The incentivized asset\\n     * @return List of rewards addresses of the input asset\\n     **/\\n    function getRewardsByAsset(\\n        address asset\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the list of available reward addresses\\n     * @return List of rewards supported in this contract\\n     **/\\n    function getRewardsList() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n     * @param user The address of the user\\n     * @param reward The address of the reward token\\n     * @return Unclaimed rewards, not including new distributions\\n     **/\\n    function getUserAccruedRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n     * @param assets List of incentivized assets to check eligible distributions\\n     * @param user The address of the user\\n     * @param reward The address of the reward token\\n     * @return The rewards amount\\n     **/\\n    function getUserRewards(\\n        address[] calldata assets,\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n     * @param assets List of incentivized assets to check eligible distributions\\n     * @param user The address of the user\\n     * @return The list of reward addresses\\n     * @return The list of unclaimed amount of rewards\\n     **/\\n    function getAllUserRewards(\\n        address[] calldata assets,\\n        address user\\n    ) external view returns (address[] memory, uint256[] memory);\\n\\n    /**\\n     * @dev Returns the decimals of an asset to calculate the distribution delta\\n     * @param asset The address to retrieve decimals\\n     * @return The decimals of an underlying asset\\n     */\\n    function getAssetDecimals(address asset) external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the address of the emission manager\\n     * @return The address of the EmissionManager\\n     */\\n    function EMISSION_MANAGER() external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of the emission manager.\\n     * Deprecated: This getter is maintained for compatibility purposes. Use the `EMISSION_MANAGER()` function instead.\\n     * @return The address of the EmissionManager\\n     */\\n    function getEmissionManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3f0367363d8a7c57341daecef130113e9c530e658add58211d03a4942b3a2d3b\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\ninterface ITransferStrategyBase {\\n    event EmergencyWithdrawal(\\n        address indexed caller,\\n        address indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n     * @param to Account to transfer rewards\\n     * @param reward Address of the reward token\\n     * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n     * @return Returns true bool if transfer logic succeeds\\n     */\\n    function performTransfer(\\n        address to,\\n        address reward,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @return Returns the address of the Incentives Controller\\n     */\\n    function getIncentivesController() external view returns (address);\\n\\n    /**\\n     * @return Returns the address of the Rewards admin\\n     */\\n    function getRewardsAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n     * @param token Address of the token to withdraw funds from this contract\\n     * @param to Address of the recipient of the withdrawal\\n     * @param amount Amount of the withdrawal\\n     */\\n    function emergencyWithdrawal(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6aa5b1ca768dcd76e0267e2240454cecf4083f27cce82119a065f4b5efb4c7a0\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/rewards/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAaveOracle} from \\\"contracts/dlend/core/interfaces/IAaveOracle.sol\\\";\\nimport {ITransferStrategyBase} from \\\"../interfaces/ITransferStrategyBase.sol\\\";\\n\\nlibrary RewardsDataTypes {\\n    struct RewardsConfigInput {\\n        uint88 emissionPerSecond;\\n        uint256 totalSupply;\\n        uint32 distributionEnd;\\n        address asset;\\n        address reward;\\n        ITransferStrategyBase transferStrategy;\\n        IAaveOracle rewardOracle;\\n    }\\n\\n    struct UserAssetBalance {\\n        address asset;\\n        uint256 userBalance;\\n        uint256 totalSupply;\\n    }\\n\\n    struct UserData {\\n        // Liquidity index of the reward distribution for the user\\n        uint104 index;\\n        // Amount of accrued rewards for the user since last user index update\\n        uint128 accrued;\\n    }\\n\\n    struct RewardData {\\n        // Liquidity index of the reward distribution\\n        uint104 index;\\n        // Amount of reward tokens distributed per second\\n        uint88 emissionPerSecond;\\n        // Timestamp of the last reward index update\\n        uint32 lastUpdateTimestamp;\\n        // The end of the distribution of rewards (in seconds)\\n        uint32 distributionEnd;\\n        // Map of user addresses and their rewards data (userAddress => userData)\\n        mapping(address => UserData) usersData;\\n    }\\n\\n    struct AssetData {\\n        // Map of reward token addresses and their data (rewardTokenAddress => rewardData)\\n        mapping(address => RewardData) rewards;\\n        // List of reward token addresses for the asset\\n        mapping(uint128 => address) availableRewards;\\n        // Count of reward tokens for the asset\\n        uint128 availableRewardsCount;\\n        // Number of decimals of the asset\\n        uint8 decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xc6625e9076735888c704a5fc654389e0d604865d025f27033891617aab3e47d7\",\"license\":\"AGPL-3.0\"},\"contracts/vaults/atoken_wrapper/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (\\n                address(0),\\n                RecoverError.InvalidSignatureLength,\\n                bytes32(signature.length)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\\n            hash,\\n            signature\\n        );\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs &\\n                bytes32(\\n                    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n                );\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\\n            hash,\\n            r,\\n            vs\\n        );\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\\n            hash,\\n            v,\\n            r,\\n            s\\n        );\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x71ccb4f3110820174f3933676e59bddc5f6f5506d406e41ff63145239a8419ea\",\"license\":\"MIT\"},\"contracts/vaults/atoken_wrapper/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        EVENTS\\n  ////////////////////////////////////////////////////////////// */\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        METADATA STORAGE\\n  ////////////////////////////////////////////////////////////// */\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public decimals;\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        ERC20 STORAGE\\n  ////////////////////////////////////////////////////////////// */\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        EIP-2612 STORAGE\\n  ////////////////////////////////////////////////////////////// */\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        CONSTRUCTOR\\n  ////////////////////////////////////////////////////////////// */\\n\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        ERC20 LOGIC\\n  ////////////////////////////////////////////////////////////// */\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _beforeTokenTransfer(msg.sender, to, amount);\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _beforeTokenTransfer(from, to, amount);\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max)\\n            allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /* //////////////////////////////////////////////////////////////\\n                          EIP-2612 LOGIC\\n  ////////////////////////////////////////////////////////////// */\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address signer = ECDSA.recover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                PERMIT_TYPEHASH,\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(signer == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[signer][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /* //////////////////////////////////////////////////////////////\\n                            INTERNAL MINT/BURN LOGIC\\n  ////////////////////////////////////////////////////////////// */\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), to, amount);\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(from, address(0), amount);\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x5e2aa53886e3ce2dbdd32ee4fd4433daea36fc17230a94ae44c59026d945ff7a\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/atoken_wrapper/RayMathExplicitRounding.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.20;\\n\\nenum Rounding {\\n    UP,\\n    DOWN\\n}\\n\\n/**\\n * Simplified version of RayMath that instead of half-up rounding does explicit rounding in a specified direction.\\n * This is needed to have a 4626 complient implementation, that always predictable rounds in favor of the vault / static a token.\\n */\\nlibrary RayMathExplicitRounding {\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function rayMulRoundDown(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    function rayMulRoundUp(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return ((a * b) + RAY - 1) / RAY;\\n    }\\n\\n    function rayDivRoundDown(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (uint256) {\\n        return (a * RAY) / b;\\n    }\\n\\n    function rayDivRoundUp(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (uint256) {\\n        return ((a * RAY) + b - 1) / b;\\n    }\\n\\n    function rayToWadRoundDown(uint256 a) internal pure returns (uint256) {\\n        return a / WAD_RAY_RATIO;\\n    }\\n}\\n\",\"keccak256\":\"0x68cce8c897aea8cb3c76e2630c6a2d3bf2d2d714721f4c888a9e8dc1f196abff\",\"license\":\"agpl-3.0\"},\"contracts/vaults/atoken_wrapper/StaticATokenErrors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.20;\\n\\nlibrary StaticATokenErrors {\\n    string public constant INVALID_OWNER = \\\"1\\\";\\n    string public constant INVALID_EXPIRATION = \\\"2\\\";\\n    string public constant INVALID_SIGNATURE = \\\"3\\\";\\n    string public constant INVALID_DEPOSITOR = \\\"4\\\";\\n    string public constant INVALID_RECIPIENT = \\\"5\\\";\\n    string public constant INVALID_CLAIMER = \\\"6\\\";\\n    string public constant ONLY_ONE_AMOUNT_FORMAT_ALLOWED = \\\"7\\\";\\n    string public constant INVALID_ZERO_AMOUNT = \\\"8\\\";\\n    string public constant REWARD_NOT_INITIALIZED = \\\"9\\\";\\n}\\n\",\"keccak256\":\"0x0cd9bf8c61bf0aa576f2df6c1f37983c80152fdbee341d49b8ddc88780cb7586\",\"license\":\"agpl-3.0\"},\"contracts/vaults/atoken_wrapper/StaticATokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IPool, DataTypes} from \\\"contracts/dlend/core/interfaces/IPool.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {StaticATokenLM} from \\\"./StaticATokenLM.sol\\\";\\nimport {IStaticATokenFactory} from \\\"./interfaces/IStaticATokenFactory.sol\\\";\\nimport {IRewardsController} from \\\"contracts/dlend/periphery/rewards/interfaces/IRewardsController.sol\\\";\\n\\n/**\\n * @title StaticATokenFactory\\n * @notice Factory contract that keeps track of all deployed static aToken wrappers for a specified pool.\\n * This registry also acts as a factory, allowing to deploy new static aTokens on demand.\\n * There can only be one static aToken per underlying on the registry at a time.\\n * @author BGD labs (modified by dTrinity)\\n */\\ncontract StaticATokenFactory is IStaticATokenFactory {\\n    IPool public immutable POOL;\\n\\n    mapping(address => address) internal _underlyingToStaticAToken;\\n    address[] internal _staticATokens;\\n\\n    event StaticTokenCreated(\\n        address indexed staticAToken,\\n        address indexed underlying\\n    );\\n\\n    constructor(IPool pool) {\\n        POOL = pool;\\n    }\\n\\n    function initialize() external pure {\\n        revert(\\\"NO_INITIALIZER\\\");\\n    }\\n\\n    ///@inheritdoc IStaticATokenFactory\\n    function createStaticATokens(\\n        address[] memory underlyings\\n    ) external returns (address[] memory) {\\n        address[] memory staticATokens = new address[](underlyings.length);\\n        for (uint256 i = 0; i < underlyings.length; i++) {\\n            address cachedStaticAToken = _underlyingToStaticAToken[\\n                underlyings[i]\\n            ];\\n            if (cachedStaticAToken == address(0)) {\\n                DataTypes.ReserveData memory reserveData = POOL.getReserveData(\\n                    underlyings[i]\\n                );\\n                require(\\n                    reserveData.aTokenAddress != address(0),\\n                    \\\"UNDERLYING_NOT_LISTED\\\"\\n                );\\n                StaticATokenLM staticAToken = new StaticATokenLM(\\n                    POOL,\\n                    IRewardsController(address(0)), // TODO: pass correct incentives controller if needed\\n                    reserveData.aTokenAddress,\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"Wrapped \\\",\\n                            IERC20Metadata(reserveData.aTokenAddress).name()\\n                        )\\n                    ),\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"w\\\",\\n                            IERC20Metadata(reserveData.aTokenAddress).symbol()\\n                        )\\n                    )\\n                );\\n                address staticATokenAddr = address(staticAToken);\\n                _underlyingToStaticAToken[underlyings[i]] = staticATokenAddr;\\n                staticATokens[i] = staticATokenAddr;\\n                _staticATokens.push(staticATokenAddr);\\n                emit StaticTokenCreated(staticATokenAddr, underlyings[i]);\\n            } else {\\n                staticATokens[i] = cachedStaticAToken;\\n            }\\n        }\\n        return staticATokens;\\n    }\\n\\n    ///@inheritdoc IStaticATokenFactory\\n    function getStaticATokens() external view returns (address[] memory) {\\n        return _staticATokens;\\n    }\\n\\n    ///@inheritdoc IStaticATokenFactory\\n    function getStaticAToken(\\n        address underlying\\n    ) external view returns (address) {\\n        return _underlyingToStaticAToken[underlying];\\n    }\\n}\\n\",\"keccak256\":\"0x0b64b20f971eb6036781257c46fae7928e0d26399fa91b5ca3bce65d649b2d30\",\"license\":\"MIT\"},\"contracts/vaults/atoken_wrapper/StaticATokenLM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// --- DLend fork imports ---\\nimport {IPool} from \\\"contracts/dlend/core/interfaces/IPool.sol\\\";\\nimport {DataTypes} from \\\"contracts/dlend/core/protocol/libraries/types/DataTypes.sol\\\";\\nimport {ReserveConfiguration} from \\\"contracts/dlend/core/protocol/libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {IScaledBalanceToken} from \\\"contracts/dlend/core/interfaces/IScaledBalanceToken.sol\\\";\\nimport {IRewardsController} from \\\"contracts/dlend/periphery/rewards/interfaces/IRewardsController.sol\\\";\\nimport {WadRayMath} from \\\"contracts/dlend/core/protocol/libraries/math/WadRayMath.sol\\\";\\nimport {MathUtils} from \\\"contracts/dlend/core/protocol/libraries/math/MathUtils.sol\\\";\\nimport {SafeCast} from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeCast.sol\\\";\\nimport {Initializable} from \\\"contracts/dlend/core/dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20WithPermit} from \\\"contracts/dlend/core/interfaces/IERC20WithPermit.sol\\\";\\n// --- Local imports ---\\nimport {IStaticATokenLM} from \\\"./interfaces/IStaticATokenLM.sol\\\";\\nimport {IAToken} from \\\"./interfaces/IAToken.sol\\\";\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\nimport {StaticATokenErrors} from \\\"./StaticATokenErrors.sol\\\";\\nimport {RayMathExplicitRounding, Rounding} from \\\"./RayMathExplicitRounding.sol\\\";\\nimport {IERC4626} from \\\"./interfaces/IERC4626.sol\\\";\\n\\n/**\\n * @title StaticATokenLM\\n * @notice Wrapper smart contract that allows to deposit tokens on the Aave protocol and receive\\n * a token which balance doesn't increase automatically, but uses an ever-increasing exchange rate.\\n * It supports claiming liquidity mining rewards from the Aave system.\\n * @author BGD labs\\n */\\ncontract StaticATokenLM is ERC20, IStaticATokenLM, IERC4626 {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    using WadRayMath for uint256;\\n    using RayMathExplicitRounding for uint256;\\n\\n    bytes32 public constant METADEPOSIT_TYPEHASH =\\n        keccak256(\\n            \\\"Deposit(address depositor,address receiver,uint256 assets,uint16 referralCode,bool depositToAave,uint256 nonce,uint256 deadline,PermitParams permit)\\\"\\n        );\\n    bytes32 public constant METAWITHDRAWAL_TYPEHASH =\\n        keccak256(\\n            \\\"Withdraw(address owner,address receiver,uint256 shares,uint256 assets,bool withdrawFromAave,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    uint256 public constant STATIC__ATOKEN_LM_REVISION = 2;\\n\\n    IPool public immutable POOL;\\n    IRewardsController public immutable REWARDS_CONTROLLER;\\n\\n    IERC20 internal _aToken;\\n    address internal _aTokenUnderlying;\\n    address[] internal _rewardTokens;\\n    mapping(address => RewardIndexCache) internal _startIndex;\\n    mapping(address => mapping(address => UserRewardsData))\\n        internal _userRewardsData;\\n\\n    constructor(\\n        IPool pool,\\n        IRewardsController rewardsController,\\n        address newAToken,\\n        string memory staticATokenName,\\n        string memory staticATokenSymbol\\n    )\\n        ERC20(\\n            staticATokenName,\\n            staticATokenSymbol,\\n            IERC20Metadata(newAToken).decimals()\\n        )\\n    {\\n        POOL = pool;\\n        REWARDS_CONTROLLER = rewardsController;\\n        _aToken = IERC20(newAToken);\\n        _aTokenUnderlying = IAToken(newAToken).UNDERLYING_ASSET_ADDRESS();\\n        IERC20(_aTokenUnderlying).approve(address(POOL), type(uint256).max);\\n        if (address(REWARDS_CONTROLLER) != address(0)) {\\n            refreshRewardTokens();\\n        }\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function refreshRewardTokens() public override {\\n        address[] memory rewards = REWARDS_CONTROLLER.getRewardsByAsset(\\n            address(_aToken)\\n        );\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            _registerRewardToken(rewards[i]);\\n        }\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function isRegisteredRewardToken(\\n        address reward\\n    ) public view override returns (bool) {\\n        return _startIndex[reward].isRegistered;\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function metaDeposit(\\n        address depositor,\\n        address receiver,\\n        uint256 assets,\\n        uint16 referralCode,\\n        bool depositToAave,\\n        uint256 deadline,\\n        PermitParams calldata permit,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256) {\\n        require(depositor != address(0), StaticATokenErrors.INVALID_DEPOSITOR);\\n        //solium-disable-next-line\\n        require(\\n            deadline >= block.timestamp,\\n            StaticATokenErrors.INVALID_EXPIRATION\\n        );\\n        uint256 nonce = nonces[depositor];\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            METADEPOSIT_TYPEHASH,\\n                            depositor,\\n                            receiver,\\n                            assets,\\n                            referralCode,\\n                            depositToAave,\\n                            nonce,\\n                            deadline,\\n                            permit\\n                        )\\n                    )\\n                )\\n            );\\n            nonces[depositor] = nonce + 1;\\n            require(\\n                depositor ==\\n                    ecrecover(digest, sigParams.v, sigParams.r, sigParams.s),\\n                StaticATokenErrors.INVALID_SIGNATURE\\n            );\\n        }\\n        // assume if deadline 0 no permit was supplied\\n        if (permit.deadline != 0) {\\n            try\\n                IERC20WithPermit(\\n                    depositToAave\\n                        ? address(_aTokenUnderlying)\\n                        : address(_aToken)\\n                ).permit(\\n                        depositor,\\n                        address(this),\\n                        permit.value,\\n                        permit.deadline,\\n                        permit.v,\\n                        permit.r,\\n                        permit.s\\n                    )\\n            {} catch {}\\n        }\\n        (uint256 shares, ) = _deposit(\\n            depositor,\\n            receiver,\\n            0,\\n            assets,\\n            referralCode,\\n            depositToAave\\n        );\\n        return shares;\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function metaWithdraw(\\n        address owner,\\n        address receiver,\\n        uint256 shares,\\n        uint256 assets,\\n        bool withdrawFromAave,\\n        uint256 deadline,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256, uint256) {\\n        require(owner != address(0), StaticATokenErrors.INVALID_OWNER);\\n        //solium-disable-next-line\\n        require(\\n            deadline >= block.timestamp,\\n            StaticATokenErrors.INVALID_EXPIRATION\\n        );\\n        uint256 nonce = nonces[owner];\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            METAWITHDRAWAL_TYPEHASH,\\n                            owner,\\n                            receiver,\\n                            shares,\\n                            assets,\\n                            withdrawFromAave,\\n                            nonce,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n            nonces[owner] = nonce + 1;\\n            require(\\n                owner ==\\n                    ecrecover(digest, sigParams.v, sigParams.r, sigParams.s),\\n                StaticATokenErrors.INVALID_SIGNATURE\\n            );\\n        }\\n        return _withdraw(owner, receiver, shares, assets, withdrawFromAave);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Rounding.UP);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Rounding.UP);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewDeposit(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function rate() public view returns (uint256) {\\n        return POOL.getReserveNormalizedIncome(_aTokenUnderlying);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function collectAndUpdateRewards(address reward) public returns (uint256) {\\n        if (reward == address(0)) {\\n            return 0;\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(_aToken);\\n\\n        return\\n            REWARDS_CONTROLLER.claimRewards(\\n                assets,\\n                type(uint256).max,\\n                address(this),\\n                reward\\n            );\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        address[] memory rewards\\n    ) external {\\n        require(\\n            msg.sender == onBehalfOf ||\\n                msg.sender == REWARDS_CONTROLLER.getClaimer(onBehalfOf),\\n            StaticATokenErrors.INVALID_CLAIMER\\n        );\\n        _claimRewardsOnBehalf(onBehalfOf, receiver, rewards);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function claimRewards(address receiver, address[] memory rewards) external {\\n        _claimRewardsOnBehalf(msg.sender, receiver, rewards);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function claimRewardsToSelf(address[] memory rewards) external {\\n        _claimRewardsOnBehalf(msg.sender, msg.sender, rewards);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function getCurrentRewardsIndex(\\n        address reward\\n    ) public view returns (uint256) {\\n        if (address(reward) == address(0)) {\\n            return 0;\\n        }\\n        (, uint256 nextIndex) = REWARDS_CONTROLLER.getAssetIndex(\\n            address(_aToken),\\n            reward\\n        );\\n        return nextIndex;\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function getTotalClaimableRewards(\\n        address reward\\n    ) external view returns (uint256) {\\n        if (reward == address(0)) {\\n            return 0;\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(_aToken);\\n        uint256 freshRewards = REWARDS_CONTROLLER.getUserRewards(\\n            assets,\\n            address(this),\\n            reward\\n        );\\n        return IERC20(reward).balanceOf(address(this)) + freshRewards;\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function getClaimableRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256) {\\n        return\\n            _getClaimableRewards(\\n                user,\\n                reward,\\n                balanceOf[user],\\n                getCurrentRewardsIndex(reward)\\n            );\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function getUnclaimedRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256) {\\n        return _userRewardsData[user][reward].unclaimedRewards;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function asset() external view returns (address) {\\n        return address(_aTokenUnderlying);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function aToken() external view returns (IERC20) {\\n        return _aToken;\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function rewardTokens() external view returns (address[] memory) {\\n        return _rewardTokens;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function totalAssets() external view returns (uint256) {\\n        return _aToken.balanceOf(address(this));\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function convertToShares(uint256 assets) external view returns (uint256) {\\n        return _convertToShares(assets, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function convertToAssets(uint256 shares) external view returns (uint256) {\\n        return _convertToAssets(shares, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxMint(address) public view virtual returns (uint256) {\\n        uint256 assets = maxDeposit(address(0));\\n        if (assets == type(uint256).max) return type(uint256).max;\\n        return _convertToShares(assets, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        uint256 shares = maxRedeem(owner);\\n        return _convertToAssets(shares, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        address cachedATokenUnderlying = _aTokenUnderlying;\\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(\\n            cachedATokenUnderlying\\n        );\\n\\n        // if paused or inactive users cannot withdraw underlying\\n        if (\\n            !ReserveConfiguration.getActive(reserveData.configuration) ||\\n            ReserveConfiguration.getPaused(reserveData.configuration)\\n        ) {\\n            return 0;\\n        }\\n\\n        // otherwise users can withdraw up to the available amount\\n        uint256 underlyingTokenBalanceInShares = _convertToShares(\\n            IERC20(cachedATokenUnderlying).balanceOf(reserveData.aTokenAddress),\\n            Rounding.DOWN\\n        );\\n        uint256 cachedUserBalance = balanceOf[owner];\\n        return\\n            underlyingTokenBalanceInShares >= cachedUserBalance\\n                ? cachedUserBalance\\n                : underlyingTokenBalanceInShares;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(\\n            _aTokenUnderlying\\n        );\\n\\n        // if inactive, paused or frozen users cannot deposit underlying\\n        if (\\n            !ReserveConfiguration.getActive(reserveData.configuration) ||\\n            ReserveConfiguration.getPaused(reserveData.configuration) ||\\n            ReserveConfiguration.getFrozen(reserveData.configuration)\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 supplyCap = ReserveConfiguration.getSupplyCap(\\n            reserveData.configuration\\n        ) * (10 ** ReserveConfiguration.getDecimals(reserveData.configuration));\\n        // if no supply cap deposit is unlimited\\n        if (supplyCap == 0) return type(uint256).max;\\n        // return remaining supply cap margin\\n        uint256 currentSupply = (IAToken(reserveData.aTokenAddress)\\n            .scaledTotalSupply() + reserveData.accruedToTreasury).rayMulRoundUp(\\n                _getNormalizedIncome(reserveData)\\n            );\\n        return currentSupply > supplyCap ? 0 : supplyCap - currentSupply;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external virtual returns (uint256) {\\n        (uint256 shares, ) = _deposit(msg.sender, receiver, 0, assets, 0, true);\\n        return shares;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) external virtual returns (uint256) {\\n        (, uint256 assets) = _deposit(msg.sender, receiver, shares, 0, 0, true);\\n\\n        return assets;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256) {\\n        (uint256 shares, ) = _withdraw(owner, receiver, 0, assets, true);\\n\\n        return shares;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256) {\\n        (, uint256 assets) = _withdraw(owner, receiver, shares, 0, true);\\n\\n        return assets;\\n    }\\n\\n    /// @notice Deposit aTokens and mint static tokens to receiver\\n    function depositATokens(\\n        uint256 aTokenAmount,\\n        address receiver\\n    ) external override returns (uint256) {\\n        require(aTokenAmount > 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n        // allow compensation for rebase during tx\\n        uint256 userBalance = _aToken.balanceOf(msg.sender);\\n        uint256 amount = aTokenAmount > userBalance\\n            ? userBalance\\n            : aTokenAmount;\\n        // determine shares to mint\\n        uint256 shares = previewDeposit(amount);\\n        require(shares != 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n        // transfer aTokens in\\n        _aToken.safeTransferFrom(msg.sender, address(this), amount);\\n        // mint static tokens\\n        _mint(receiver, shares);\\n        emit Deposit(msg.sender, receiver, amount, shares);\\n        return shares;\\n    }\\n\\n    /// @notice Burn static tokens and return aTokens to receiver\\n    function redeemATokens(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external override returns (uint256) {\\n        require(shares > 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n        // determine assets to return\\n        uint256 assets = previewRedeem(shares);\\n        require(assets != 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n        // handle allowance if not owner\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender];\\n            if (allowed != type(uint256).max) {\\n                allowance[owner][msg.sender] = allowed - shares;\\n            }\\n        }\\n        // burn static tokens\\n        _burn(owner, shares);\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n        // transfer aTokens out\\n        _aToken.safeTransfer(receiver, assets);\\n        return assets;\\n    }\\n\\n    function _deposit(\\n        address depositor,\\n        address receiver,\\n        uint256 _shares,\\n        uint256 _assets,\\n        uint16 referralCode,\\n        bool depositToAave\\n    ) internal returns (uint256, uint256) {\\n        require(receiver != address(0), StaticATokenErrors.INVALID_RECIPIENT);\\n        require(\\n            _shares == 0 || _assets == 0,\\n            StaticATokenErrors.ONLY_ONE_AMOUNT_FORMAT_ALLOWED\\n        );\\n\\n        uint256 assets = _assets;\\n        uint256 shares = _shares;\\n        if (shares > 0) {\\n            if (depositToAave) {\\n                require(\\n                    shares <= maxMint(receiver),\\n                    \\\"ERC4626: mint more than max\\\"\\n                );\\n            }\\n            assets = previewMint(shares);\\n        } else {\\n            if (depositToAave) {\\n                require(\\n                    assets <= maxDeposit(receiver),\\n                    \\\"ERC4626: deposit more than max\\\"\\n                );\\n            }\\n            shares = previewDeposit(assets);\\n        }\\n        require(shares != 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n\\n        if (depositToAave) {\\n            address cachedATokenUnderlying = _aTokenUnderlying;\\n            SafeERC20.safeTransferFrom(\\n                IERC20(cachedATokenUnderlying),\\n                depositor,\\n                address(this),\\n                assets\\n            );\\n            POOL.deposit(\\n                cachedATokenUnderlying,\\n                assets,\\n                address(this),\\n                referralCode\\n            );\\n        } else {\\n            _aToken.safeTransferFrom(depositor, address(this), assets);\\n        }\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(depositor, receiver, assets, shares);\\n\\n        return (shares, assets);\\n    }\\n\\n    function _withdraw(\\n        address owner,\\n        address receiver,\\n        uint256 _shares,\\n        uint256 _assets,\\n        bool withdrawFromAave\\n    ) internal returns (uint256, uint256) {\\n        require(receiver != address(0), StaticATokenErrors.INVALID_RECIPIENT);\\n        require(\\n            _shares == 0 || _assets == 0,\\n            StaticATokenErrors.ONLY_ONE_AMOUNT_FORMAT_ALLOWED\\n        );\\n        require(_shares != _assets, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n\\n        uint256 assets = _assets;\\n        uint256 shares = _shares;\\n\\n        if (shares > 0) {\\n            if (withdrawFromAave) {\\n                require(\\n                    shares <= maxRedeem(owner),\\n                    \\\"ERC4626: redeem more than max\\\"\\n                );\\n            }\\n            assets = previewRedeem(shares);\\n        } else {\\n            if (withdrawFromAave) {\\n                require(\\n                    assets <= maxWithdraw(owner),\\n                    \\\"ERC4626: withdraw more than max\\\"\\n                );\\n            }\\n            shares = previewWithdraw(assets);\\n        }\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max)\\n                allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        if (withdrawFromAave) {\\n            POOL.withdraw(_aTokenUnderlying, assets, receiver);\\n        } else {\\n            _aToken.safeTransfer(receiver, assets);\\n        }\\n\\n        return (shares, assets);\\n    }\\n\\n    /**\\n     * @notice Updates rewards for senders and receiver in a transfer (not updating rewards for address(0))\\n     * @param from The address of the sender of tokens\\n     * @param to The address of the receiver of tokens\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal override {\\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n            address rewardToken = address(_rewardTokens[i]);\\n            uint256 rewardsIndex = getCurrentRewardsIndex(rewardToken);\\n            if (from != address(0)) {\\n                _updateUser(from, rewardsIndex, rewardToken);\\n            }\\n            if (to != address(0) && from != to) {\\n                _updateUser(to, rewardsIndex, rewardToken);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Adding the pending rewards to the unclaimed for specific user and updating user index\\n     * @param user The address of the user to update\\n     * @param currentRewardsIndex The current rewardIndex\\n     * @param rewardToken The address of the reward token\\n     */\\n    function _updateUser(\\n        address user,\\n        uint256 currentRewardsIndex,\\n        address rewardToken\\n    ) internal {\\n        uint256 balance = balanceOf[user];\\n        if (balance > 0) {\\n            _userRewardsData[user][rewardToken]\\n                .unclaimedRewards = _getClaimableRewards(\\n                user,\\n                rewardToken,\\n                balance,\\n                currentRewardsIndex\\n            ).toUint128();\\n        }\\n        _userRewardsData[user][rewardToken]\\n            .rewardsIndexOnLastInteraction = currentRewardsIndex.toUint128();\\n    }\\n\\n    /**\\n     * @notice Compute the pending in WAD. Pending is the amount to add (not yet unclaimed) rewards in WAD.\\n     * @param balance The balance of the user\\n     * @param rewardsIndexOnLastInteraction The index which was on the last interaction of the user\\n     * @param currentRewardsIndex The current rewards index in the system\\n     * @param assetUnit One unit of asset (10**decimals)\\n     * @return The amount of pending rewards in WAD\\n     */\\n    function _getPendingRewards(\\n        uint256 balance,\\n        uint256 rewardsIndexOnLastInteraction,\\n        uint256 currentRewardsIndex,\\n        uint256 assetUnit\\n    ) internal pure returns (uint256) {\\n        if (balance == 0) {\\n            return 0;\\n        }\\n        return\\n            (balance * (currentRewardsIndex - rewardsIndexOnLastInteraction)) /\\n            assetUnit;\\n    }\\n\\n    /**\\n     * @notice Compute the claimable rewards for a user\\n     * @param user The address of the user\\n     * @param reward The address of the reward\\n     * @param balance The balance of the user in WAD\\n     * @param currentRewardsIndex The current rewards index\\n     * @return The total rewards that can be claimed by the user (if `fresh` flag true, after updating rewards)\\n     */\\n    function _getClaimableRewards(\\n        address user,\\n        address reward,\\n        uint256 balance,\\n        uint256 currentRewardsIndex\\n    ) internal view returns (uint256) {\\n        RewardIndexCache memory rewardsIndexCache = _startIndex[reward];\\n        require(\\n            rewardsIndexCache.isRegistered == true,\\n            StaticATokenErrors.REWARD_NOT_INITIALIZED\\n        );\\n        UserRewardsData memory currentUserRewardsData = _userRewardsData[user][\\n            reward\\n        ];\\n        uint256 assetUnit = 10 ** decimals;\\n        return\\n            currentUserRewardsData.unclaimedRewards +\\n            _getPendingRewards(\\n                balance,\\n                currentUserRewardsData.rewardsIndexOnLastInteraction == 0\\n                    ? rewardsIndexCache.lastUpdatedIndex\\n                    : currentUserRewardsData.rewardsIndexOnLastInteraction,\\n                currentRewardsIndex,\\n                assetUnit\\n            );\\n    }\\n\\n    /**\\n     * @notice Claim rewards on behalf of a user and send them to a receiver\\n     * @param onBehalfOf The address to claim on behalf of\\n     * @param rewards The addresses of the rewards\\n     * @param receiver The address to receive the rewards\\n     */\\n    function _claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        address[] memory rewards\\n    ) internal {\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            if (address(rewards[i]) == address(0)) {\\n                continue;\\n            }\\n            uint256 currentRewardsIndex = getCurrentRewardsIndex(rewards[i]);\\n            uint256 balance = balanceOf[onBehalfOf];\\n            uint256 userReward = _getClaimableRewards(\\n                onBehalfOf,\\n                rewards[i],\\n                balance,\\n                currentRewardsIndex\\n            );\\n            uint256 totalRewardTokenBalance = IERC20(rewards[i]).balanceOf(\\n                address(this)\\n            );\\n            uint256 unclaimedReward = 0;\\n\\n            if (userReward > totalRewardTokenBalance) {\\n                totalRewardTokenBalance += collectAndUpdateRewards(\\n                    address(rewards[i])\\n                );\\n            }\\n\\n            if (userReward > totalRewardTokenBalance) {\\n                unclaimedReward = userReward - totalRewardTokenBalance;\\n                userReward = totalRewardTokenBalance;\\n            }\\n            if (userReward > 0) {\\n                _userRewardsData[onBehalfOf][rewards[i]]\\n                    .unclaimedRewards = unclaimedReward.toUint128();\\n                _userRewardsData[onBehalfOf][rewards[i]]\\n                    .rewardsIndexOnLastInteraction = currentRewardsIndex\\n                    .toUint128();\\n                IERC20(rewards[i]).safeTransfer(receiver, userReward);\\n            }\\n        }\\n    }\\n\\n    function _convertToShares(\\n        uint256 assets,\\n        Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (rounding == Rounding.UP) return assets.rayDivRoundUp(rate());\\n        return assets.rayDivRoundDown(rate());\\n    }\\n\\n    function _convertToAssets(\\n        uint256 shares,\\n        Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (rounding == Rounding.UP) return shares.rayMulRoundUp(rate());\\n        return shares.rayMulRoundDown(rate());\\n    }\\n\\n    /**\\n     * @notice Initializes a new rewardToken\\n     * @param reward The reward token to be registered\\n     */\\n    function _registerRewardToken(address reward) internal {\\n        if (isRegisteredRewardToken(reward)) return;\\n        uint256 startIndex = getCurrentRewardsIndex(reward);\\n\\n        _rewardTokens.push(reward);\\n        _startIndex[reward] = RewardIndexCache(true, uint240(startIndex));\\n\\n        emit RewardTokenRegistered(reward, startIndex);\\n    }\\n\\n    /**\\n     * @notice Returns the ongoing normalized income for the reserve.\\n     * @dev A value of 1e27 means there is no income. As time passes, the income is accrued\\n     * @dev A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n     * @param reserve The reserve object\\n     * @return The normalized income, expressed in ray\\n     */\\n    function _getNormalizedIncome(\\n        DataTypes.ReserveData memory reserve\\n    ) internal view returns (uint256) {\\n        uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n        //solium-disable-next-line\\n        if (timestamp == block.timestamp) {\\n            //if the index was updated in the same block, no need to perform any calculation\\n            return reserve.liquidityIndex;\\n        } else {\\n            return\\n                MathUtils\\n                    .calculateLinearInterest(\\n                        reserve.currentLiquidityRate,\\n                        timestamp\\n                    )\\n                    .rayMul(reserve.liquidityIndex);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47a634d678412bf8ceca485cffa6d2840c64d86818e72be5ffa63c79e484312c\",\"license\":\"MIT\"},\"contracts/vaults/atoken_wrapper/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.20;\\n\\nimport {IRewardsController} from \\\"../../../dlend/periphery/rewards/interfaces/IRewardsController.sol\\\";\\n\\ninterface IAToken {\\n    function POOL() external view returns (address);\\n\\n    function getIncentivesController() external view returns (address);\\n\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x06c90b406ae9e06b87b49be568970f71347e9559cce07b624b7b06b10ca92848\",\"license\":\"agpl-3.0\"},\"contracts/vaults/atoken_wrapper/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\\"managed\\\" by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\\"per-user\\\" price-per-share, and instead should reflect the\\n     * \\\"average-user's\\\" price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert unless due to integer overflow caused by an unreasonably large input.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\\"per-user\\\" price-per-share, and instead should reflect the\\n     * \\\"average-user's\\\" price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     * While deposit of aToken is not affected by aave pool configrations, deposit of the aTokenUnderlying will need to deposit to aave\\n     * so it is affected by current aave pool configuration.\\n     * Reference: https://github.com/aave/aave-v3-core/blob/29ff9b9f89af7cd8255231bc5faf26c3ce0fb7ce/contracts/protocol/libraries/logic/ValidationLogic.sol#L57\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert unless due to integer overflow caused by an unreasonably large input.\\n     */\\n    function maxDeposit(\\n        address receiver\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault's underlying asset token.\\n     */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(\\n        address receiver\\n    ) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault's underlying asset token.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(\\n        address owner\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call to the aToken underlying.\\n     * While redeem of aToken is not affected by aave pool configrations, redeeming of the aTokenUnderlying will need to redeem from aave\\n     * so it is affected by current aave pool configuration.\\n     * Reference: https://github.com/aave/aave-v3-core/blob/29ff9b9f89af7cd8255231bc5faf26c3ce0fb7ce/contracts/protocol/libraries/logic/ValidationLogic.sol#L87\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x1af9f7ac27f7ce3564faa580355ec9afde77b22e32fef3cb18ca813e67f1b5a4\",\"license\":\"MIT\"},\"contracts/vaults/atoken_wrapper/interfaces/IStaticATokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.20;\\n\\nimport {IPool, DataTypes} from \\\"contracts/dlend/core/interfaces/IPool.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n// ITransparentProxyFactory is missing, add to missing list\\n// import {ITransparentProxyFactory} from \\\"contracts/dlend/core/interfaces/ITransparentProxyFactory.sol\\\";\\n// Ownable is not used in the interface, can be omitted\\n\\ninterface IStaticATokenFactory {\\n    /**\\n     * @notice Creates new staticATokens\\n     * @param underlyings the addresses of the underlyings to create.\\n     * @return address[] addresses of the new staticATokens.\\n     */\\n    function createStaticATokens(\\n        address[] memory underlyings\\n    ) external returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all tokens deployed via this registry.\\n     * @return address[] list of tokens\\n     */\\n    function getStaticATokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the staticAToken for a given underlying.\\n     * @param underlying the address of the underlying.\\n     * @return address the staticAToken address.\\n     */\\n    function getStaticAToken(\\n        address underlying\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xde847c2349663803d49a4ed4d72596ca50c7fb1c6beddc4bdecb53e4931bc2a6\",\"license\":\"agpl-3.0\"},\"contracts/vaults/atoken_wrapper/interfaces/IStaticATokenLM.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IPool} from \\\"contracts/dlend/core/interfaces/IPool.sol\\\";\\nimport {IRewardsController} from \\\"contracts/dlend/periphery/rewards/interfaces/IRewardsController.sol\\\";\\n\\ninterface IStaticATokenLM {\\n    struct SignatureParams {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct PermitParams {\\n        address owner;\\n        address spender;\\n        uint256 value;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct UserRewardsData {\\n        uint128 rewardsIndexOnLastInteraction; // (in RAYs)\\n        uint128 unclaimedRewards; // (in RAYs)\\n    }\\n\\n    struct RewardIndexCache {\\n        bool isRegistered;\\n        uint248 lastUpdatedIndex;\\n    }\\n\\n    event RewardTokenRegistered(address indexed reward, uint256 startIndex);\\n\\n    /**\\n     * @notice Allows to deposit on Aave via meta-transaction\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param depositor Address from which the funds to deposit are going to be pulled\\n     * @param receiver Address that will receive the staticATokens, in the average case, same as the `depositor`\\n     * @param assets The amount to deposit\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param depositToAave bool\\n     * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\\n     * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param sigParams Signature params: v,r,s\\n     * @return uint256 The amount of StaticAToken minted, static balance\\n     */\\n    function metaDeposit(\\n        address depositor,\\n        address receiver,\\n        uint256 assets,\\n        uint16 referralCode,\\n        bool depositToAave,\\n        uint256 deadline,\\n        PermitParams calldata permit,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows to withdraw from Aave via meta-transaction\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner Address owning the staticATokens\\n     * @param receiver Address that will receive the underlying withdrawn from Aave\\n     * @param shares The amount of staticAToken to withdraw. If > 0, `assets` needs to be 0\\n     * @param assets The amount of underlying/aToken to withdraw. If > 0, `shares` needs to be 0\\n     * @param withdrawFromAave bool\\n     * - `true` for the receiver to get underlying tokens (e.g. USDC)\\n     * - `false` for the receiver to get aTokens (e.g. aUSDC)\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param sigParams Signature params: v,r,s\\n     * @return amountToBurn: StaticATokens burnt, static balance\\n     * @return amountToWithdraw: underlying/aToken send to `receiver`, dynamic balance\\n     */\\n    function metaWithdraw(\\n        address owner,\\n        address receiver,\\n        uint256 shares,\\n        uint256 assets,\\n        bool withdrawFromAave,\\n        uint256 deadline,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the Aave liquidity index of the underlying aToken, denominated rate here\\n     * as it can be considered as an ever-increasing exchange rate\\n     * @return The liquidity index\\n     **/\\n    function rate() external view returns (uint256);\\n\\n    /**\\n     * @notice Claims rewards from `INCENTIVES_CONTROLLER` and updates internal accounting of rewards.\\n     * @param reward The reward to claim\\n     * @return uint256 Amount collected\\n     */\\n    function collectAndUpdateRewards(address reward) external returns (uint256);\\n\\n    /**\\n     * @notice Claim rewards on behalf of a user and send them to a receiver\\n     * @dev Only callable by if sender is onBehalfOf or sender is approved claimer\\n     * @param onBehalfOf The address to claim on behalf of\\n     * @param receiver The address to receive the rewards\\n     * @param rewards The rewards to claim\\n     */\\n    function claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        address[] memory rewards\\n    ) external;\\n\\n    /**\\n     * @notice Claim rewards and send them to a receiver\\n     * @param receiver The address to receive the rewards\\n     * @param rewards The rewards to claim\\n     */\\n    function claimRewards(address receiver, address[] memory rewards) external;\\n\\n    /**\\n     * @notice Claim rewards\\n     * @param rewards The rewards to claim\\n     */\\n    function claimRewardsToSelf(address[] memory rewards) external;\\n\\n    /**\\n     * @notice Get the total claimable rewards of the contract.\\n     * @param reward The reward to claim\\n     * @return uint256 The current balance + pending rewards from the `_incentivesController`\\n     */\\n    function getTotalClaimableRewards(\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total claimable rewards for a user in WAD\\n     * @param user The address of the user\\n     * @param reward The reward to claim\\n     * @return uint256 The claimable amount of rewards in WAD\\n     */\\n    function getClaimableRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice The unclaimed rewards for a user in WAD\\n     * @param user The address of the user\\n     * @param reward The reward to claim\\n     * @return uint256 The unclaimed amount of rewards in WAD\\n     */\\n    function getUnclaimedRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice The underlying asset reward index in RAY\\n     * @param reward The reward to claim\\n     * @return uint256 The underlying asset reward index in RAY\\n     */\\n    function getCurrentRewardsIndex(\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice The aToken used inside the 4626 vault.\\n     * @return IERC20 The aToken IERC20.\\n     */\\n    function aToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice The IERC20s that are currently rewarded to addresses of the vault via LM on incentivescontroller.\\n     * @return IERC20 The IERC20s of the rewards.\\n     */\\n    function rewardTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Fetches all rewardTokens from the incentivecontroller and registers the missing ones.\\n     */\\n    function refreshRewardTokens() external;\\n\\n    /**\\n     * @notice Checks if the passed token is a registered reward.\\n     * @return bool signaling if token is a registered reward.\\n     */\\n    function isRegisteredRewardToken(\\n        address reward\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Deposits aTokens and mints static aTokens to the receiver\\n     * @param aTokenAmount The amount of aTokens to deposit\\n     * @param receiver The address that will receive the static aTokens\\n     * @return uint256 The amount of StaticAToken minted, static balance\\n     */\\n    function depositATokens(\\n        uint256 aTokenAmount,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Burns static aTokens and returns aTokens to the receiver\\n     * @param shares The amount of static aTokens to burn\\n     * @param receiver The address that will receive the aTokens\\n     * @param owner The address whose static aTokens will be burned\\n     * @return uint256 The amount of aTokens returned\\n     */\\n    function redeemATokens(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x1affd3349d2afc50aac56d1c185e18506f4b70ec54202bc48e56cb2abb40a1c7\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60a03461007157601f61528b38819003918201601f19168301916001600160401b038311848410176100765780849260209460405283398101031261007157516001600160a01b0381168103610071576080526040516151fe908161008d823960805181818161019f01526102be0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe604060808152600490813610156200001657600080fd5b60009160e08335811c90816356d9be6a14620001d2575080637535d24614620001885780638129fc1c1462000140578063a09aa4a714620000a65763ed5d0f58146200006157600080fd5b34620000a2576020366003190112620000a2576001600160a01b039035818116908190036200009e57838391602095528085522054169051908152f35b8380fd5b8280fd5b8284346200013d57806003193601126200013d578151918291600180548086526020809601958284527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf693905b8282106200011e576200011a87876200010f828c038362000805565b519182918262000857565b0390f35b84546001600160a01b03168852968701969383019390830190620000f3565b80fd5b5082346200013d57806003193601126200013d57506020606492519162461bcd60e51b8352820152600e60248201526d2727afa4a724aa24a0a624ad22a960911b6044820152fd5b505034620001ce5781600319360112620001ce57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b9184915034620001ce5760209384600319360112620000a257813567ffffffffffffffff91828211620008015736602383011215620008015781840135966200021b886200083e565b926200022a8351948562000805565b8884528184016024809a60051b83010191368311620007fd578a01905b828210620007d85750505082519162000260836200083e565b926200026f8251948562000805565b80845262000280601f19916200083e565b013683850137865b8451811015620007c9576001600160a01b0380620002a783886200089d565b5116895288845282892054811680620007b45750807f00000000000000000000000000000000000000000000000000000000000000001681620002eb84896200089d565b5185516335ea6a7560e01b815291168a8201526101e09081818f81865afa908115620007aa578c9162000614575b50610100915001908282511615620005da57815185516306fdde0360e01b8152908416928c828d81875afa918215620005b057858d93928f928394620005ba575b506200039b8b8b5180966702bb930b83832b2160c51b838301526200038a81518092602895868601910162000900565b810103600881018752018562000805565b51168851938480926395d89b4160e01b82525afa918215620005b0578d9262000586575b50620003f98888518094607760f81b83830152620003e881518092602195868601910162000900565b810103600181018552018362000805565b86519361480780860194908d8611878710176200057257928f926200045195936200044293899896620009c28a3986528c8601528a85015260a08060608601528401906200099a565b9160808184039101526200099a565b03908af080156200056857811690806200046c84896200089d565b51168a52898552838a2080546001600160a01b03199081168417909155826200049685896200089d565b5260015468010000000000000000811015620005565760018101806001558110156200054457839060018d527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60191825416179055620004f783886200089d565b5116907f7397831292236fdc8043acf7b9d21183e46fd54f9b06bd34210068f95dd378d68a80a35b6000198114620005325760010162000288565b634e487b7160e01b8852601187528988fd5b634e487b7160e01b8c5260328b528d8cfd5b634e487b7160e01b8c5260418b528d8cfd5b83513d8b823e3d90fd5b5050634e487b7160e01b8e5260418d528f8efd5b620005a89192508d3d8091833e6200059f818362000805565b81019062000925565b908f620003bf565b87513d8f823e3d90fd5b620005d29194503d8085833e6200059f818362000805565b92386200035a565b845162461bcd60e51b8152808b018790526015818f01527415539111549316525391d7d393d517d31254d51151605a1b6044820152606490fd5b809150823d8411620007a2575b6200062d818362000805565b81010382811262000788578651928301908382108c83111762000790578813620007885761020083018181108c8211176200079057875281518152825262000677878201620008c8565b8783015262000688868201620008c8565b8683015260606200069b818301620008c8565b908301526080620006ae818301620008c8565b9083015260a0620006c1818301620008c8565b9083015260c0808201519064ffffffffff821682036200078c578301528c81015161ffff8116810362000788578d83015261010091908262000705818301620008eb565b9083015261012062000719818301620008eb565b908301526101406200072d818301620008eb565b9083015261016062000741818301620008eb565b9083015261018062000755818301620008c8565b908301526101a062000769818301620008c8565b908301526200077d6101c0809201620008c8565b908201528e62000319565b8c80fd5b8d80fd5b634e487b7160e01b8e5260418d528f8efd5b503d62000621565b86513d8e823e3d90fd5b9050620007c282866200089d565b526200051f565b8151806200011a868262000857565b81356001600160a01b0381168103620007f957815290830190830162000247565b8980fd5b8880fd5b8480fd5b90601f8019910116810190811067ffffffffffffffff8211176200082857604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111620008285760051b60200190565b6020908160408183019282815285518094520193019160005b8281106200087f575050505090565b83516001600160a01b03168552938101939281019260010162000870565b8051821015620008b25760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b51906fffffffffffffffffffffffffffffffff82168203620008e657565b600080fd5b51906001600160a01b0382168203620008e657565b60005b838110620009145750506000910152565b818101518382015260200162000903565b602081830312620008e657805167ffffffffffffffff91828211620008e657019082601f83011215620008e657815190811162000828576040519262000976601f8301601f19166020018562000805565b81845260208284010111620008e65762000997916020808501910162000900565b90565b90602091620009b58151809281855285808601910162000900565b601f01601f191601019056fe60c06040818152346200044457620048078038038091620000218286620006e8565b8439820160a083820312620004445782516001600160a01b0390818116810362000444576020928386015192808416840362000444576200006486880162000722565b606088015190956001600160401b039390918481116200044457816200008c918b0162000737565b9860808101519185831162000444578492620000a9920162000737565b96169487519463313ce56760e01b8652600495838188818b5afa908115620006dd576000916200069f575b508a5198868a116200068a576000549960019a8b81811c911680156200067f575b878210146200056a578190601f9e8f918281116200061d575b5088918311600114620005ab576000926200059f575b5050600019600383901b1c1916908b1b176000555b8051908782116200058a578a548b81811c911680156200057f575b878210146200056a578d81116200051e575b5085908d8311600114620004a75760ff939291600091836200049b575b5050600019600383901b1c1916908b1b178a555b1660ff19600254161760025560805260a052838160018060a01b031996808860075416176007558951928380926358b50cef60e11b82525afa908115620004905790839160009162000451575b50168095600854161760085581608051169287519363095ea7b360e01b855285850152600019938281604481600060249b8a8d8401525af18015620004075762000412575b508260a051169081620002b3575b8851613e849081620009838239608051818181610fa901528181611108015281816112ff015281816116a70152818161270401528181612bff01528181612d7a0152818161334901526135c8015260a051818181610b480152818161195b01528181611e1e015281816127d60152818161287b015261298e0152f35b60008460075416888b5180958193636657732f60e01b83528b8301525afa918215620004075760009262000344575b50508698506000985b620002f8575b8062000237565b80518910156200033e576200031783838b60051b8401015116620007ae565b8389146200032a579786019786620002eb565b85601186634e487b7160e01b600052526000fd5b620002f1565b919092993d8083853e620003598185620006e8565b8301928b818503126200040357805190858211620003ff5701908101831315620003fb578051938411620003e9578360051b918a51946200039d8d850187620006e8565b85528b80860193830101938411620003e657508a01905b828210620003cc5750505096859697889738620002e2565b8a8091620003da8462000722565b815201910190620003b4565b80fd5b634e487b7160e01b8252604187528782fd5b5080fd5b8380fd5b8280fd5b89513d6000823e3d90fd5b8281813d831162000449575b6200042a8183620006e8565b810103126200044457518015150362000444573862000229565b600080fd5b503d6200041e565b91508282813d831162000488575b6200046b8183620006e8565b81010312620003e6575062000481839162000722565b38620001e4565b503d6200045f565b88513d6000823e3d90fd5b01519050388062000183565b92918b91601f1982169083600052886000209160005b8a828210620004fc575050958360ff9710620004e2575b505050811b018a5562000197565b015160001960f88460031b161c19169055388080620004d4565b919295889487849397999a015181550195019301908e949296959391620004bd565b8b6000528d876000209080850160051c82019289861062000560575b0160051c01908c905b8281106200055357505062000166565b60008155018c9062000543565b925081926200053a565b60228a634e487b7160e01b6000525260246000fd5b90607f169062000154565b604189634e487b7160e01b6000525260246000fd5b01519050388062000124565b908d9350601f1983169160008052896000209260005b8b828210620005fd5750508411620005e3575b505050811b0160005562000139565b015160001960f88460031b161c19169055388080620005d4565b91929395968291958786015181550195019301908f9594939291620005c1565b9190925060008052886000209080850160051c8201928a861062000675575b8f9092828796949593950160051c01915b8281106200065d5750506200010e565b600091939550809294505501918f918e85946200064d565b925081926200063c565b90607f1690620000f5565b604188634e487b7160e01b6000525260246000fd5b8481813d8311620006d5575b620006b78183620006e8565b81010312620003fb57519060ff82168203620003e6575038620000d4565b503d620006ab565b8a513d6000823e3d90fd5b601f909101601f19168101906001600160401b038211908210176200070c57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200044457565b919080601f8401121562000444578251906001600160401b0382116200070c576040519160209162000773601f8301601f1916840185620006e8565b818452828287010111620004445760005b8181106200079a57508260009394955001015290565b858101830151848201840152820162000784565b60018060a01b03811690600090828252600a60205260409060ff8284205416620008dc57620007dd90620008e2565b9160095468010000000000000000811015620008b4576001810180600955811015620008c857600982527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b031916851790558151908183016001600160401b03811183821017620008b4578352600182526001600160f01b0384166020808401918252868352600a8152918490209251905160081b60ff191690151560ff161790915590519182527fa8f4dd7e60441ca288d902a295362002a0255a46560b24825821b36716d6fe5b91a2565b634e487b7160e01b82526041600452602482fd5b634e487b7160e01b82526032600452602482fd5b50505050565b6001600160a01b0390811680156200097b5760a0516007546040805163886fe70b60e01b81529185166004830152602482019390935292829184916044918391165afa90811562000971576000916200093c575b50905090565b82813d831162000969575b620009538183620006e8565b81010312620003e6575060200151803862000936565b503d62000947565b513d6000823e3d90fd5b505060009056fe6080604052600436101561001257600080fd5b60003560e01c806301e1d1141461033d57806306fdde031461033857806307a2d13a146102f2578063090edf9a14610333578063095ea7b31461032e5780630a28a4771461032957806318160ddd146103245780632026ffa31461031f57806323b872dd1461031a5780632c4e722e146103155780632f813b0d1461031057806330adf81f1461030b578063313ce567146103065780633644e5151461030157806338d52e0f146102fc578063402d267d146102f75780634cdad506146102f257806360266557146102ed57806360d8fdd8146102e857806363210537146102e35780636e553f65146102de5780636fe0b5a5146102d957806370a08231146102d45780637535d246146102cf5780637ecebe00146102ca57806386894b29146102c55780638d948415146102c05780638daaf5aa146102bb57806394bf804d146102b657806395d89b41146102b1578063a0c1f15e146102ac578063a9059cbb146102a7578063b3d7f6b9146102a2578063b460af941461029d578063ba08765214610298578063bcd1784814610293578063c2b18aa01461028e578063c63d75b614610289578063c6e6f59214610257578063cd086d4514610284578063ce96cb771461027f578063d505accf1461027a578063d905777e14610275578063dd62ed3e14610270578063de9cee981461026b578063e25ec34914610266578063ea9be77c14610261578063ee0fc6d31461025c578063ef8b30f714610257578063f56f4f0f146102525763fa7146101461024d57600080fd5b611eca565b611e8f565b611927565b611d85565b611d17565b611c05565b611bde565b611b99565b611b77565b6119cd565b61198a565b611945565b611901565b61187e565b61181a565b611720565b6115b4565b61158e565b611499565b611470565b6113cb565b611257565b61121c565b6111e1565b611199565b611137565b6110f2565b6110b5565b611073565b610f23565b610ee8565b610ec1565b610cca565b6105ae565b610c84565b610c5b565b610c40565b610c1f565b610be4565b610ae5565b610aca565b61090b565b6108c1565b6107f3565b6107d5565b610746565b610619565b6104cb565b610352565b600091031261034d57565b600080fd5b3461034d57600036600319011261034d576007546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa80156103d6576020916000916103a9575b50604051908152f35b6103c99150823d81116103cf575b6103c18183610460565b8101906126c8565b386103a0565b503d6103b7565b611faf565b90600182811c9216801561040b575b60208310146103f557565b634e487b7160e01b600052602260045260246000fd5b91607f16916103ea565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161043f57604052565b610415565b6040810190811067ffffffffffffffff82111761043f57604052565b90601f8019910116810190811067ffffffffffffffff82111761043f57604052565b6020808252825181830181905290939260005b8281106104b757505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610495565b3461034d576000806003193601126105ab57604051908080546104ed816103db565b808552916001918083169081156105815750600114610527575b6105238561051781870382610460565b60405191829182610482565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061056957505050810160200161051782610523610507565b8054602085870181019190915290930192810161054e565b8695506105239693506020925061051794915060ff191682840152151560051b8201019293610507565b80fd5b3461034d57602036600319011261034d5760206105d46105cc6126d7565b600435613bec565b604051908152f35b6001600160a01b0381160361034d57565b606090600319011261034d5760043590602435610609816105dc565b90604435610616816105dc565b90565b3461034d576105236106c361062d366105ed565b92919061064361063b612f67565b831515612341565b61065461064e6126d7565b83613bec565b93849261066a610662612f67565b851515612341565b60018060a01b039061068681838516948533036106d357613156565b604080518681526020810192909252918416913391600080516020613dcf8339815191529190a46007546001600160a01b0316613106565b613106565b6040519081529081906020820190565b600086815260056020908152604080832033845290915290205b5482600182016106ff575b5050613156565b61070891611efc565b6001600160a01b038216600090815260056020526040902061073e9033905b9060018060a01b0316600052602052604060002090565b5538826106f8565b3461034d57604036600319011261034d57600435610763816105dc565b60243590336000526005602052816107918260406000209060018060a01b0316600052602052604060002090565b556040519182526001600160a01b03169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590602090a3602060405160018152f35b3461034d57602036600319011261034d5760206105d4600435613b5a565b3461034d57600036600319011261034d576020600354604051908152f35b604051906101e0820182811067ffffffffffffffff82111761043f57604052565b6040519061083f82610444565b565b67ffffffffffffffff811161043f5760051b60200190565b81601f8201121561034d5780359161087083610841565b9261087e6040519485610460565b808452602092838086019260051b82010192831161034d578301905b8282106108a8575050505090565b83809183356108b6816105dc565b81520191019061089a565b3461034d57604036600319011261034d576004356108de816105dc565b6024359067ffffffffffffffff821161034d57610902610909923690600401610859565b9033613957565b005b3461034d57606036600319011261034d57600435610928816105dc565b602435610934816105dc565b60009160443591906001600160a01b0380821680151591841680151591875b600980548210156109d4578952600080516020613e0f8339815191528101546109a4919086906001600160a01b031661098b81612843565b916109c4575b86806109ba575b6109a9575b50506122d9565b610953565b6109b3918a6136ad565b388061099d565b5085851415610998565b6109cf81838b6136ad565b610991565b5050600080516020613def833981519152610a8788610a7189610a4a8a610a23610a108260018060a01b03166000526005602052604060002090565b3360009081526020919091526040902090565b548560018201610a96575b50506001600160a01b0316600090815260046020526040902090565b610a55848254611efc565b90556001600160a01b0316600090815260046020526040902090565b8054820190556040519081529081906020820190565b0390a360405160018152602090f35b610a9f91611efc565b6001600160a01b0382166000908152600560205260409020610ac2903390610727565b558985610a2e565b3461034d57600036600319011261034d5760206105d46126d7565b3461034d576000806003193601126105ab57600754610b4491908190610b1b906001600160a01b03165b6001600160a01b031690565b604051636657732f60e01b81526001600160a01b03909116600482015292839081906024820190565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156103d6578192610bc0575b50805b8251811015610bbc5780610bb2610bad610ba0610bb79487612310565b516001600160a01b031690565b613c1c565b6122d9565b610b83565b5080f35b610bdd9192503d8084833e610bd58183610460565b810190612255565b9038610b80565b3461034d57600036600319011261034d5760206040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98152f35b3461034d57600036600319011261034d57602060ff60025416604051908152f35b3461034d57600036600319011261034d5760206105d4612101565b3461034d57600036600319011261034d576008546040516001600160a01b039091168152602090f35b3461034d57602036600319011261034d57610ca06004356105dc565b60206105d4612d4b565b60843590811515820361034d57565b60609060c319011261034d5760c490565b3461034d5761012036600319011261034d57600435610ce8816105dc565b602435610cf4816105dc565b606435604435610d02610caa565b9260a4359436610d1190610cb9565b6001600160a01b03821696610d246126ab565b610d3090891515612341565b610d38612365565b610d459042831015612341565b6001600160a01b03831660009081526006602052604090205490610d67612101565b604080517f406ef09971b1bfa50a48ce277d3302602d78c94d58a376e8953b590702de7b31602082019081526001600160a01b038881169383019390935291881660608201526080810189905260a081018a90528a151560c082015260e0810185905261010080820194909452928352601f1992610de761012082610460565b51902060405161190160f01b6020820190815260228201939093526042810191909152606292830181529091610e1d9082610460565b5190206001600160a01b038416600090815260066020526040902090916001019055610e4882612470565b6040805192835260ff919091166020808401919091528301358282015291909101356060820152600080526080905a916000916001602094fa156103d657600051610eaf96610eaa916001600160a01b03165b14610ea461247a565b90612341565b6134d7565b60408051928352602083019190915290f35b3461034d57602036600319011261034d5760206105d4600435610ee3816105dc565b61291c565b3461034d57600036600319011261034d5760206040517f2a83c73b9e01ec0a1b95ff05940d809179668cc004230412d7047ffac3846ce78152f35b3461034d57604036600319011261034d57602435600435610f43826105dc565b6001600160a01b039082821690610f5b61063b61320a565b610f63613227565b50610f77610f6f612d4b565b821115613244565b610f8081613bb1565b92610f8c610662612f67565b6008546001600160a01b031690610fa7833033848616612f84565b7f000000000000000000000000000000000000000000000000000000000000000016803b1561034d5760405163e8eda9df60e01b81526001600160a01b0392909216600483015260248201839052306044830152600060648301819052908290608490829084905af180156103d65760209561102a92869261105a575b50613035565b60408051918252602082018490523391600080516020613e2f83398151915291819081015b0390a3604051908152f35b8061106761106d9261042b565b80610342565b38611024565b3461034d57602036600319011261034d57600435611090816105dc565b60018060a01b0316600052600a602052602060ff604060002054166040519015158152f35b3461034d57602036600319011261034d576004356110d2816105dc565b60018060a01b031660005260046020526020604060002054604051908152f35b3461034d57600036600319011261034d576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461034d57602036600319011261034d57600435611154816105dc565b60018060a01b031660005260066020526020604060002054604051908152f35b604090600319011261034d5760043561118c816105dc565b90602435610616816105dc565b3461034d5760206111d56111ac36611174565b6001600160a01b039182166000908152600b855260408082209290931681526020919091522090565b5460801c604051908152f35b3461034d57600036600319011261034d5760206040517f406ef09971b1bfa50a48ce277d3302602d78c94d58a376e8953b590702de7b318152f35b3461034d57602036600319011261034d5760043567ffffffffffffffff811161034d57611250610909913690600401610859565b3333613957565b3461034d57604036600319011261034d57602435600435611277826105dc565b6001600160a01b03908282169061128f61063b61320a565b801590811591826113c3575b6112a790610ea4613227565b90600090156113a957506112c46112bc612a3d565b821115613290565b6112d56112cf6126d7565b82612f16565b925b6112e261063b612f67565b6008546001600160a01b0316906112fd853033848616612f84565b7f000000000000000000000000000000000000000000000000000000000000000016803b1561034d5760405163e8eda9df60e01b81526001600160a01b0392909216600483015260248201859052306044830152600060648301819052908290608490829084905af180156103d65760209561137f92849261105a5750613035565b6040805184815260208101929092523391600080516020613e2f833981519152918190810161104f565b9290506113b4612d4b565b506113bd613b9f565b906112d7565b50600161129b565b3461034d576000806003193601126105ab57604051908060018054916113f0836103db565b808652928281169081156105815750600114611416576105238561051781870382610460565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061145857505050810160200161051782610523610507565b8054602085870181019190915290930192810161143d565b3461034d57600036600319011261034d576007546040516001600160a01b039091168152602090f35b3461034d57604036600319011261034d576004356114b6816105dc565b600090602435906001600160a01b038116331515811515855b60098054821015611548578752600080516020613e0f83398151915281015461151f919084906001600160a01b031661150781612843565b91611538575b848061152e575b6115245750506122d9565b6114cf565b6109b391886136ad565b5086331415611514565b6115438183336136ad565b61150d565b33600090815260046020526040902085908890611566908990610a4a565b8054820190556040519081523390600080516020613def833981519152908060208101610a87565b3461034d57602036600319011261034d5760206105d46115ac6126d7565b600435612f16565b3461034d576116a360206115c7366105ed565b6001600160a01b03828116949390916115e96115e161320a565b871515612341565b6115f1613227565b506115fd61063b612f67565b61161961161161160c83612bd1565b613be0565b83111561343f565b61162282613b5a565b9561163787858416938433036116fd57613156565b60408051848152602081018990523391600080516020613dcf83398151915291a46008546000906001600160a01b03165b604051631a4ca37b60e21b81526001600160a01b03918216600482015260248101939093529093166044820152948592839182906064820190565b03927f0000000000000000000000000000000000000000000000000000000000000000165af19182156103d6576020926116e05750604051908152f35b6116f690833d81116103cf576103c18183610460565b50386103a0565b6001600160a01b03811660009081526005602052604090206106ed903390610727565b3461034d576116a3611731366105ed565b6001600160a01b03808316929161174961066261320a565b84159384159485611812575b61176190610ea4613227565b61177261176c612f67565b86612341565b60009594156117f457602094955061179461178c83612bd1565b87111561348b565b6117a561179f6126d7565b87613bec565b955b6117bb81858516948533036116fd57613156565b6040805188815260208101929092523391600080516020613dcf8339815191529190a460085484906000906001600160a01b0316611668565b6020945061180461160c83612bd1565b5061180d613b3c565b6117a7565b506001611755565b3461034d57602036600319011261034d5760206105d460043561183c816105dc565b61276a565b90815180825260208080930193019160005b828110611861575050505090565b83516001600160a01b031685529381019392810192600101611853565b3461034d57600036600319011261034d57604051806009548082528260208093016009600052600080516020613e0f8339815191529260005b858282106118e2575050506118ce92500383610460565b610523604051928284938452830190611841565b85546001600160a01b03168452600195860195889550930192016118b7565b3461034d57602036600319011261034d5761191d6004356105dc565b60206105d4612a3d565b3461034d57602036600319011261034d5760206105d4600435613bb1565b3461034d57600036600319011261034d576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461034d57602036600319011261034d5760206105d46119b46004356119af816105dc565b612bd1565b6119bc6126d7565b90613bec565b60ff81160361034d57565b3461034d5760e036600319011261034d576004356119ea816105dc565b6024356119f6816105dc565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560443592611b2d606435611b11608435611a30816119c2565b611a3c42841015611f0e565b611b1d611a47612101565b93888a611ad3611a698a60018060a01b03166000526006602052604060002090565b9384549460018601905560405194859360208501958d8791959493909260a09360c08401977f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98552600180871b038092166020860152166040840152606083015260808201520152565b0391611ae7601f1993848101835282610460565b519020604051948591602083019788909160429261190160f01b8352600283015260228201520190565b03908101845283610460565b60c4359260a43592519020611f97565b9284611b688261072760018060a01b0380961697611b4e8988831614611f5a565b6001600160a01b0316600090815260056020526040902090565b556040519485521692602090a3005b3461034d57602036600319011261034d5760206105d46004356119af816105dc565b3461034d576020611bd5611bac36611174565b6001600160a01b0391821660009081526005855260408082209290931681526020919091522090565b54604051908152f35b3461034d57602036600319011261034d5760206105d4600435611c00816105dc565b612843565b3461034d57604036600319011261034d57600435602435611c25816105dc565b611c3061063b612f67565b6007546040516370a0823160e01b81523360048201526001600160a01b03918216929190602081602481875afa80156103d65761052395600080516020613e2f83398151915292600092611ceb575b5081811115611ce35750915b611cb583611c9881613bb1565b96611cac611ca4612f67565b891515612341565b30903390612f84565b611cbf8585613035565b60408051938452602084018690529316923392a36040519081529081906020820190565b905091611c8b565b611d0491925060203d81116103cf576103c18183610460565b9038611c7f565b61ffff81160361034d57565b3461034d5761020036600319011261034d57600435611d35816105dc565b60243590611d42826105dc565b60643591611d4f83611d0b565b611d57610caa565b60e03660c319011261034d576060366101a319011261034d57610523936106c39360a4359360443591612497565b3461034d57606036600319011261034d57600435611da2816105dc565b602435611dae816105dc565b60443567ffffffffffffffff811161034d57611dce903690600401610859565b336001600160a01b0384811691821494929392918515611dff575b5050611dfa61090994610ea4612826565b613957565b90945060405190631d36517b60e21b82526004820152602081602481887f0000000000000000000000000000000000000000000000000000000000000000165afa9485156103d65761090995611dfa92600091611e61575b5016331494611de9565b611e82915060203d8111611e88575b611e7a8183610460565b810190612811565b38611e57565b503d611e70565b3461034d5760206105d4611ea236611174565b6001600160a01b038216600090815260048552604090205490611ec481612843565b92613838565b3461034d57600036600319011261034d57602060405160028152f35b634e487b7160e01b600052601160045260246000fd5b91908203918211611f0957565b611ee6565b15611f1557565b60405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606490fd5b15611f6157565b60405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606490fd5b916106169391611fa693611fbb565b90929192612070565b6040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831161204457916120119160209360405195869094939260ff6060936080840197845216602083015260408201520152565b826000938492838052039060015afa156103d65780516001600160a01b0381161561203b57918190565b50809160019190565b50600093600393509050565b6004111561205a57565b634e487b7160e01b600052602160045260246000fd5b61207981612050565b80612082575050565b61208b81612050565b600181036120a55760405163f645eedf60e01b8152600490fd5b6120ae81612050565b600281036120d35760405163fce698f760e01b815260048101839052602490fd5b0390fd5b806120df600392612050565b146120e75750565b6040516335e2f38360e21b81526004810191909152602490fd5b604051600090815490612113826103db565b928382526020938483019360019086828216918260001461222a5750506001146121d3575b5050918161214e6121cd936121bf950382610460565b519020604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f95810195865260208601929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69085015246606085015230608085015291829060a0850190565b03601f198101835282610460565b51902090565b600080805286935091907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410612215575050508201018161214e612138565b805486850186015287949093019281016121ff565b60ff1916875292151560051b8501909201925083915061214e9050612138565b519061083f826105dc565b602090818184031261034d5780519067ffffffffffffffff821161034d57019180601f8401121561034d57825161228b81610841565b936122996040519586610460565b818552838086019260051b82010192831161034d578301905b8282106122c0575050505090565b83809183516122ce816105dc565b8152019101906122b2565b6000198114611f095760010190565b634e487b7160e01b600052603260045260246000fd5b80511561230b5760200190565b6122e8565b805182101561230b5760209160051b010190565b6040519061233182610444565b60018252600d60fa1b6020830152565b156123495750565b60405162461bcd60e51b81529081906120cf9060048301610482565b6040519061237282610444565b60018252601960f91b6020830152565b7f2a83c73b9e01ec0a1b95ff05940d809179668cc004230412d7047ffac3846ce781526001600160a01b0391821660208201529181166040830152606082019290925261ffff909216608083015291151560a082015260c081019290925260e08201929092526101e0810192918060c4356123fc816105dc565b1661010083015260e43561240f816105dc565b16610120820152610104356101408201526101243561016082015260ff61014435612439816119c2565b16610180820152610164356101a08201526101c061018435910152565b61014435610616816119c2565b6101a435610616816119c2565b35610616816119c2565b6040519061248782610444565b60018252603360f81b6020830152565b9495946001600160a01b038082166124ad612324565b6124b990821515612341565b6124c1612365565b6124ce90428b1015612341565b6001600160a01b038316600090815260066020526040902054986124f0612101565b60405191828c602082019261250a918d8d8d8d8d89612382565b0392601f1993848101825261251f9082610460565b51902060405161190160f01b60208201908152602282019390935260428101919091526062928301815290916125559082610460565b5190206001600160a01b03841660009081526006602052604090209099600101905561257f612463565b604080519a8b5260ff9190911660208b01526101c435908a01526101e43560608a01526000808052988960805a926001602094fa156103d65788516125cd91906001600160a01b0316610e9b565b6101243590816125e9575b50506125e59596506132dc565b5090565b8615612691576008546001600160a01b03165b16612605612456565b91813b1561268d5760405163d505accf60e01b81526001600160a01b0385166004820152306024820152610104356044820152606481019190915260ff9290921660848301526101643560a48301526101843560c483015296976125e597829060e490829084905af161267a575b87966125d8565b806110676126879261042b565b38612673565b8980fd5b6007546126a6906001600160a01b0316610b0f565b6125fc565b604051906126b882610444565b60018252603160f81b6020830152565b9081602091031261034d575190565b60085460405163d15e005360e01b81526001600160a01b03918216600482015290602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103d657600091612738575090565b610616915060203d81116103cf576103c18183610460565b6040519061275d82610444565b6001825260203681840137565b6001600160a01b0390811690811561280a576127bf60209161278a612750565b8160075416612798826122fe565b5260006040518096819582946308d8c03760e21b8452608060048501526084840190611841565b9083196024840152306044840152606483015203927f0000000000000000000000000000000000000000000000000000000000000000165af19081156103d657600091612738575090565b5050600090565b9081602091031261034d5751610616816105dc565b6040519061283382610444565b60018252601b60f91b6020830152565b6001600160a01b03908116801561280a57604090604483600754168351948593849263886fe70b60e01b8452600484015260248301527f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103d6576000916128af575090565b906040823d82116128d8575b816128c860409383610460565b810103126105ab57506020015190565b3d91506128bb565b916128f8604092959495606085526060850190611841565b6001600160a01b0391821660208501529416910152565b91908201809211611f0957565b6001600160a01b038181168015612a3557612935612750565b6007546129669061294e906001600160a01b0316610b0f565b612957836122fe565b6001600160a01b039091169052565b60405180936370674ab960e01b8252818061298a60209889963090600485016128e0565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa9182156103d657600092612a16575b506040516370a0823160e01b8152306004820152908390829060249082905afa9081156103d657610616936000926129f9575b505061290f565b612a0f9250803d106103cf576103c18183610460565b38806129f2565b612a2e919250833d85116103cf576103c18183610460565b90386129bf565b505050600090565b612a45612d4b565b600019908082146125e5576106169150613bb1565b919082602091031261034d576040516020810181811067ffffffffffffffff82111761043f5760405291518252565b51906001600160801b038216820361034d57565b519064ffffffffff8216820361034d57565b519061083f82611d0b565b6101e08183031261034d57612ad7612ad0610811565b9282612a5a565b8252612ae560208201612a89565b6020830152612af660408201612a89565b6040830152612b0760608201612a89565b6060830152612b1860808201612a89565b6080830152612b2960a08201612a89565b60a0830152612b3a60c08201612a9d565b60c0830152612b4b60e08201612aaf565b60e0830152610100612b5e81830161224a565b90830152610120612b7081830161224a565b90830152610140612b8281830161224a565b90830152610160612b9481830161224a565b90830152610180612ba6818301612a89565b908301526101a0612bb8818301612a89565b90830152612bca6101c0809201612a89565b9082015290565b6008546040516335ea6a7560e01b81526001600160a01b0391821660048201819052906101e09081816024817f000000000000000000000000000000000000000000000000000000000000000088165afa9182156103d657600092612cfd575b5050805151600160381b811615908115612ced575b50612ce45761010001516040516370a0823160e01b81526001600160a01b0390911660048201529160209183916024918391165afa9081156103d657612cb491612c9891600091612cc6575b50613bb1565b6001600160a01b03909216600090815260046020526040902090565b5490818110612cc1575090565b905090565b612cde915060203d81116103cf576103c18183610460565b38612c92565b50505050600090565b6001603c1b915016151538612c46565b612d1c9250803d10612d23575b612d148183610460565b810190612aba565b3880612c31565b503d612d0a565b604d8111611f0957600a0a90565b81810292918115918404141715611f0957565b6008546040516335ea6a7560e01b81526001600160a01b0391821660048201526101e0918290829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9182156103d657600092612ed9575b5050805151600160381b8116158015612eca575b8015612eb7575b61280a5780640fffffffff612de360ff612ded9460301c16612d2a565b9160741c16612d38565b908115612eaf5761010081015160049190602090612e1590610b0f906001600160a01b031681565b60405163b1bf962d60e01b815293849182905afa80156103d657612e6d612e7391612e7994600091612e91575b50612e67612e5b6101808601516001600160801b031690565b6001600160801b031690565b9061290f565b91613d0d565b90612f16565b81811115612e88575050600090565b61061691611efc565b612ea9915060203d81116103cf576103c18183610460565b38612e42565b505060001990565b5067020000000000000081161515612dc6565b506001603c1b81161515612dbf565b612eef9250803d10612d2357612d148183610460565b3880612dab565b8115612f00570490565b634e487b7160e01b600052601260045260246000fd5b9081158015612f5f575b61280a57612f2d91612d38565b6b033b2e3c9fd0803ce80000009081810190818111611f09576b033b2e3c9fd0803ce7ffffff01908111611f09570490565b508015612f20565b60405190612f7482610444565b60018252600760fb1b6020830152565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff84111761043f5761083f926040525b906000602091828151910182855af115611faf576000513d61302c57506001600160a01b0381163b155b61300a5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415613003565b600091825b6009805482101561309c578452600080516020613e0f83398151915281015461308891906001600160a01b0390811661307281612843565b918616151580613097575b61308d5750506122d9565b61303a565b6109b391866136ad565b61307d565b50509190600354838101809111611f0957600080516020613def833981519152916130c961310192600355565b6001600160a01b03811660009081526004602052604090208054860190556040519485526001600160a01b0316939081906020820190565b0390a3565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff83118284101761043f5761083f92604052612fd9565b600091825b600980548210156131a6578452600080516020613e0f8339815191528101546131a191906001600160a01b0390811661319381612843565b91861661308d5750506122d9565b61315b565b50506001600160a01b038216600090815260046020526040902080549192838303928311611f0957600080516020613def8339815191529261310192556131f08460035403600355565b6040519384526001600160a01b0316929081906020820190565b6040519061321782610444565b60018252603560f81b6020830152565b6040519061323482610444565b60018252603760f81b6020830152565b1561324b57565b60405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d617800006044820152606490fd5b1561329757565b60405162461bcd60e51b815260206004820152601b60248201527f455243343632363a206d696e74206d6f7265207468616e206d617800000000006044820152606490fd5b919493926001600160a01b038083169392916133016132f961320a565b861515612341565b8561330a613227565b50613427575b61331988613bb1565b809661332661063b612f67565b156133f257506008546001600160a01b0316613346893087868516612f84565b827f00000000000000000000000000000000000000000000000000000000000000001691823b1561034d5760405163e8eda9df60e01b81526001600160a01b03929092166004830152602482018a905230604483015261ffff166064820152906000908290608490829084905af180156103d657600080516020613e2f833981519152936133da92889261105a5750613035565b60408051888152602081018790529390911692a39190565b600754600080516020613e2f833981519152946133da935090613422908b906001600160a01b0316883091612f84565b613035565b61343a613432612d4b565b891115613244565b613310565b1561344657565b60405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468616e206d6178006044820152606490fd5b1561349257565b60405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468616e206d61780000006044820152606490fd5b949390916001600160a01b0391828416916134fb6134f361320a565b841515612341565b80159586159687613680575b61351390610ea4613227565b61352761351e612f67565b82841415612341565b80919660001461364a57505080613631575b61354a6135446126d7565b86613bec565b9687925b61356287868416938433036116fd57613156565b60408051858152602081018990523391600080516020613dcf83398151915291a41561361557600854604051631a4ca37b60e21b81526001600160a01b0391821660048201526024810192909252929092166044830152602090829060649082906000907f0000000000000000000000000000000000000000000000000000000000000000165af180156103d6576135f957509190565b6136109060203d81116103cf576103c18183610460565b509190565b60075461362d939192506001600160a01b0316613106565b9190565b61364561363d88612bd1565b86111561348b565b613539565b81989193965061365e908361366457613b5a565b9561354e565b61367b61367361160c85612bd1565b82111561343f565b613b5a565b508015613507565b60095481101561230b576009600052600080516020613e0f8339815191520190600090565b61083f926040613705926136e560018060a01b0382169560009287845260046020528585852054918383613720575b5050505061377c565b948152600b602052209060018060a01b0316600052602052604060002090565b906001600160801b03166001600160801b0319825416179055565b613773936137369361373193613838565b61377c565b888552600b60209081528686206001600160a01b03891660009081529152604090205b906001600160801b0382549181199060801b169116179055565b388581836136dc565b6001600160801b0390818111613790571690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608490fd5b604051906137f282610444565b60018252603960f81b6020830152565b9060405161380f81610444565b91546001600160801b038116835260801c6020830152565b60ff16604d8111611f0957600a0a90565b61392590610616946138bf6138ba613902956107276138698260018060a01b0316600052600a602052604060002090565b956138a06040519761387a89610444565b5497602060ff8a16151591828152019860081c895260016138996137e5565b9114612341565b6001600160a01b03166000908152600b6020526040902090565b613802565b946138d46138cf60025460ff1690565b613827565b926138e960208801516001600160801b031690565b966001600160801b03968791516001600160801b031690565b16908161392c57516001600160f81b031690505b6001600160f81b031690613932565b911661290f565b50613916565b909291928115612ce4578303928311611f09576106169261395291612d38565b612ef6565b92919060005b8251811015613b3557613976610b0f610ba08386612310565b15613b2c5761398b611c00610ba08386612310565b906139c0826139ac8860018060a01b03166000526004602052604060002090565b546139ba610ba08589612310565b89613838565b6139d3610b0f610b0f610ba08589612310565b6040516370a0823160e01b815230600482015291906020908190849060249082905afa9081156103d657613a37958a948992600094613b0d575b505082600093808611613af2575b50808511613add575b508584613a3c575b5050505050506122d9565b61395d565b613ad295613759613a9894613a82610ba061373195613a7c613a60613ac19b61377c565b6001600160a01b039097166000908152600b6020526040902090565b93612310565b60018060a01b0316600052602052604060002090565b6001600160a01b038a166000908152600b6020526040902061370590613a82610ba0888c612310565b846106be610b0f610ba0868a612310565b853880868185613a2c565b809350613aea9194611efc565b919238613a24565b613b079150612e6761183c610ba08a87612310565b38613a1b565b613b24929450803d106103cf576103c18183610460565b913880613a0d565b613a37906122d9565b5050509050565b613b446126d7565b600019810190808211611f095761061691612ef6565b613b626126d7565b6b033b2e3c9fd0803ce800000091828102928184041490151715611f0957808201809211611f09576000198201918211611f095761061691612ef6565b613ba76126d7565b15612f0057600090565b613bb96126d7565b6b033b2e3c9fd0803ce800000091828102928184041490151715611f095761061691612ef6565b610616906119bc6126d7565b80158015613c14575b61280a576b033b2e3c9fd0803ce800000091613c1091612d38565b0490565b508115613bf5565b6001600160a01b038181166000818152600a60205260409020549092919060ff16613d0857613c4a82612843565b6009546801000000000000000081101561043f577fa8f4dd7e60441ca288d902a295362002a0255a46560b24825821b36716d6fe5b93613d0393613c978360016106c39501600955613688565b819291549060031b9189831b921b1916179055613ce3613cb5610832565b60018152916001600160f01b03851660208401526001600160a01b03166000908152600a6020526040902090565b815160209092015160081b60ff191660ff92151592909216919091179055565b0390a2565b505050565b60c081015164ffffffffff16428103613d37575060200151610616906001600160801b0316612e5b565b6001600160801b0360408301511690420390428211611f09576301e1338091613d5f91612d38565b046b033b2e3c9fd0803ce8000000908101809111611f0957613d91612e5b60206106169401516001600160801b031690565b90816b019d971e4fe8401e7400000019048111158215171561034d576b033b2e3c9fd0803ce800000091026b019d971e4fe8401e7400000001049056fefbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8dbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7afdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7a2646970667358221220dde703c96a5db923fca0d695ec8f6def9246f6dc43078a7e526e5784be0c500064736f6c63430008140033a2646970667358221220eeacce5f49d3b0ca46ca4ec4836f9248ec3d8f9fc890a076081946f93f8ae0dc64736f6c63430008140033",
  "deployedBytecode": "0x604060808152600490813610156200001657600080fd5b60009160e08335811c90816356d9be6a14620001d2575080637535d24614620001885780638129fc1c1462000140578063a09aa4a714620000a65763ed5d0f58146200006157600080fd5b34620000a2576020366003190112620000a2576001600160a01b039035818116908190036200009e57838391602095528085522054169051908152f35b8380fd5b8280fd5b8284346200013d57806003193601126200013d578151918291600180548086526020809601958284527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf693905b8282106200011e576200011a87876200010f828c038362000805565b519182918262000857565b0390f35b84546001600160a01b03168852968701969383019390830190620000f3565b80fd5b5082346200013d57806003193601126200013d57506020606492519162461bcd60e51b8352820152600e60248201526d2727afa4a724aa24a0a624ad22a960911b6044820152fd5b505034620001ce5781600319360112620001ce57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b9184915034620001ce5760209384600319360112620000a257813567ffffffffffffffff91828211620008015736602383011215620008015781840135966200021b886200083e565b926200022a8351948562000805565b8884528184016024809a60051b83010191368311620007fd578a01905b828210620007d85750505082519162000260836200083e565b926200026f8251948562000805565b80845262000280601f19916200083e565b013683850137865b8451811015620007c9576001600160a01b0380620002a783886200089d565b5116895288845282892054811680620007b45750807f00000000000000000000000000000000000000000000000000000000000000001681620002eb84896200089d565b5185516335ea6a7560e01b815291168a8201526101e09081818f81865afa908115620007aa578c9162000614575b50610100915001908282511615620005da57815185516306fdde0360e01b8152908416928c828d81875afa918215620005b057858d93928f928394620005ba575b506200039b8b8b5180966702bb930b83832b2160c51b838301526200038a81518092602895868601910162000900565b810103600881018752018562000805565b51168851938480926395d89b4160e01b82525afa918215620005b0578d9262000586575b50620003f98888518094607760f81b83830152620003e881518092602195868601910162000900565b810103600181018552018362000805565b86519361480780860194908d8611878710176200057257928f926200045195936200044293899896620009c28a3986528c8601528a85015260a08060608601528401906200099a565b9160808184039101526200099a565b03908af080156200056857811690806200046c84896200089d565b51168a52898552838a2080546001600160a01b03199081168417909155826200049685896200089d565b5260015468010000000000000000811015620005565760018101806001558110156200054457839060018d527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60191825416179055620004f783886200089d565b5116907f7397831292236fdc8043acf7b9d21183e46fd54f9b06bd34210068f95dd378d68a80a35b6000198114620005325760010162000288565b634e487b7160e01b8852601187528988fd5b634e487b7160e01b8c5260328b528d8cfd5b634e487b7160e01b8c5260418b528d8cfd5b83513d8b823e3d90fd5b5050634e487b7160e01b8e5260418d528f8efd5b620005a89192508d3d8091833e6200059f818362000805565b81019062000925565b908f620003bf565b87513d8f823e3d90fd5b620005d29194503d8085833e6200059f818362000805565b92386200035a565b845162461bcd60e51b8152808b018790526015818f01527415539111549316525391d7d393d517d31254d51151605a1b6044820152606490fd5b809150823d8411620007a2575b6200062d818362000805565b81010382811262000788578651928301908382108c83111762000790578813620007885761020083018181108c8211176200079057875281518152825262000677878201620008c8565b8783015262000688868201620008c8565b8683015260606200069b818301620008c8565b908301526080620006ae818301620008c8565b9083015260a0620006c1818301620008c8565b9083015260c0808201519064ffffffffff821682036200078c578301528c81015161ffff8116810362000788578d83015261010091908262000705818301620008eb565b9083015261012062000719818301620008eb565b908301526101406200072d818301620008eb565b9083015261016062000741818301620008eb565b9083015261018062000755818301620008c8565b908301526101a062000769818301620008c8565b908301526200077d6101c0809201620008c8565b908201528e62000319565b8c80fd5b8d80fd5b634e487b7160e01b8e5260418d528f8efd5b503d62000621565b86513d8e823e3d90fd5b9050620007c282866200089d565b526200051f565b8151806200011a868262000857565b81356001600160a01b0381168103620007f957815290830190830162000247565b8980fd5b8880fd5b8480fd5b90601f8019910116810190811067ffffffffffffffff8211176200082857604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111620008285760051b60200190565b6020908160408183019282815285518094520193019160005b8281106200087f575050505090565b83516001600160a01b03168552938101939281019260010162000870565b8051821015620008b25760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b51906fffffffffffffffffffffffffffffffff82168203620008e657565b600080fd5b51906001600160a01b0382168203620008e657565b60005b838110620009145750506000910152565b818101518382015260200162000903565b602081830312620008e657805167ffffffffffffffff91828211620008e657019082601f83011215620008e657815190811162000828576040519262000976601f8301601f19166020018562000805565b81845260208284010111620008e65762000997916020808501910162000900565b90565b90602091620009b58151809281855285808601910162000900565b601f01601f191601019056fe60c06040818152346200044457620048078038038091620000218286620006e8565b8439820160a083820312620004445782516001600160a01b0390818116810362000444576020928386015192808416840362000444576200006486880162000722565b606088015190956001600160401b039390918481116200044457816200008c918b0162000737565b9860808101519185831162000444578492620000a9920162000737565b96169487519463313ce56760e01b8652600495838188818b5afa908115620006dd576000916200069f575b508a5198868a116200068a576000549960019a8b81811c911680156200067f575b878210146200056a578190601f9e8f918281116200061d575b5088918311600114620005ab576000926200059f575b5050600019600383901b1c1916908b1b176000555b8051908782116200058a578a548b81811c911680156200057f575b878210146200056a578d81116200051e575b5085908d8311600114620004a75760ff939291600091836200049b575b5050600019600383901b1c1916908b1b178a555b1660ff19600254161760025560805260a052838160018060a01b031996808860075416176007558951928380926358b50cef60e11b82525afa908115620004905790839160009162000451575b50168095600854161760085581608051169287519363095ea7b360e01b855285850152600019938281604481600060249b8a8d8401525af18015620004075762000412575b508260a051169081620002b3575b8851613e849081620009838239608051818181610fa901528181611108015281816112ff015281816116a70152818161270401528181612bff01528181612d7a0152818161334901526135c8015260a051818181610b480152818161195b01528181611e1e015281816127d60152818161287b015261298e0152f35b60008460075416888b5180958193636657732f60e01b83528b8301525afa918215620004075760009262000344575b50508698506000985b620002f8575b8062000237565b80518910156200033e576200031783838b60051b8401015116620007ae565b8389146200032a579786019786620002eb565b85601186634e487b7160e01b600052526000fd5b620002f1565b919092993d8083853e620003598185620006e8565b8301928b818503126200040357805190858211620003ff5701908101831315620003fb578051938411620003e9578360051b918a51946200039d8d850187620006e8565b85528b80860193830101938411620003e657508a01905b828210620003cc5750505096859697889738620002e2565b8a8091620003da8462000722565b815201910190620003b4565b80fd5b634e487b7160e01b8252604187528782fd5b5080fd5b8380fd5b8280fd5b89513d6000823e3d90fd5b8281813d831162000449575b6200042a8183620006e8565b810103126200044457518015150362000444573862000229565b600080fd5b503d6200041e565b91508282813d831162000488575b6200046b8183620006e8565b81010312620003e6575062000481839162000722565b38620001e4565b503d6200045f565b88513d6000823e3d90fd5b01519050388062000183565b92918b91601f1982169083600052886000209160005b8a828210620004fc575050958360ff9710620004e2575b505050811b018a5562000197565b015160001960f88460031b161c19169055388080620004d4565b919295889487849397999a015181550195019301908e949296959391620004bd565b8b6000528d876000209080850160051c82019289861062000560575b0160051c01908c905b8281106200055357505062000166565b60008155018c9062000543565b925081926200053a565b60228a634e487b7160e01b6000525260246000fd5b90607f169062000154565b604189634e487b7160e01b6000525260246000fd5b01519050388062000124565b908d9350601f1983169160008052896000209260005b8b828210620005fd5750508411620005e3575b505050811b0160005562000139565b015160001960f88460031b161c19169055388080620005d4565b91929395968291958786015181550195019301908f9594939291620005c1565b9190925060008052886000209080850160051c8201928a861062000675575b8f9092828796949593950160051c01915b8281106200065d5750506200010e565b600091939550809294505501918f918e85946200064d565b925081926200063c565b90607f1690620000f5565b604188634e487b7160e01b6000525260246000fd5b8481813d8311620006d5575b620006b78183620006e8565b81010312620003fb57519060ff82168203620003e6575038620000d4565b503d620006ab565b8a513d6000823e3d90fd5b601f909101601f19168101906001600160401b038211908210176200070c57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200044457565b919080601f8401121562000444578251906001600160401b0382116200070c576040519160209162000773601f8301601f1916840185620006e8565b818452828287010111620004445760005b8181106200079a57508260009394955001015290565b858101830151848201840152820162000784565b60018060a01b03811690600090828252600a60205260409060ff8284205416620008dc57620007dd90620008e2565b9160095468010000000000000000811015620008b4576001810180600955811015620008c857600982527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b031916851790558151908183016001600160401b03811183821017620008b4578352600182526001600160f01b0384166020808401918252868352600a8152918490209251905160081b60ff191690151560ff161790915590519182527fa8f4dd7e60441ca288d902a295362002a0255a46560b24825821b36716d6fe5b91a2565b634e487b7160e01b82526041600452602482fd5b634e487b7160e01b82526032600452602482fd5b50505050565b6001600160a01b0390811680156200097b5760a0516007546040805163886fe70b60e01b81529185166004830152602482019390935292829184916044918391165afa90811562000971576000916200093c575b50905090565b82813d831162000969575b620009538183620006e8565b81010312620003e6575060200151803862000936565b503d62000947565b513d6000823e3d90fd5b505060009056fe6080604052600436101561001257600080fd5b60003560e01c806301e1d1141461033d57806306fdde031461033857806307a2d13a146102f2578063090edf9a14610333578063095ea7b31461032e5780630a28a4771461032957806318160ddd146103245780632026ffa31461031f57806323b872dd1461031a5780632c4e722e146103155780632f813b0d1461031057806330adf81f1461030b578063313ce567146103065780633644e5151461030157806338d52e0f146102fc578063402d267d146102f75780634cdad506146102f257806360266557146102ed57806360d8fdd8146102e857806363210537146102e35780636e553f65146102de5780636fe0b5a5146102d957806370a08231146102d45780637535d246146102cf5780637ecebe00146102ca57806386894b29146102c55780638d948415146102c05780638daaf5aa146102bb57806394bf804d146102b657806395d89b41146102b1578063a0c1f15e146102ac578063a9059cbb146102a7578063b3d7f6b9146102a2578063b460af941461029d578063ba08765214610298578063bcd1784814610293578063c2b18aa01461028e578063c63d75b614610289578063c6e6f59214610257578063cd086d4514610284578063ce96cb771461027f578063d505accf1461027a578063d905777e14610275578063dd62ed3e14610270578063de9cee981461026b578063e25ec34914610266578063ea9be77c14610261578063ee0fc6d31461025c578063ef8b30f714610257578063f56f4f0f146102525763fa7146101461024d57600080fd5b611eca565b611e8f565b611927565b611d85565b611d17565b611c05565b611bde565b611b99565b611b77565b6119cd565b61198a565b611945565b611901565b61187e565b61181a565b611720565b6115b4565b61158e565b611499565b611470565b6113cb565b611257565b61121c565b6111e1565b611199565b611137565b6110f2565b6110b5565b611073565b610f23565b610ee8565b610ec1565b610cca565b6105ae565b610c84565b610c5b565b610c40565b610c1f565b610be4565b610ae5565b610aca565b61090b565b6108c1565b6107f3565b6107d5565b610746565b610619565b6104cb565b610352565b600091031261034d57565b600080fd5b3461034d57600036600319011261034d576007546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa80156103d6576020916000916103a9575b50604051908152f35b6103c99150823d81116103cf575b6103c18183610460565b8101906126c8565b386103a0565b503d6103b7565b611faf565b90600182811c9216801561040b575b60208310146103f557565b634e487b7160e01b600052602260045260246000fd5b91607f16916103ea565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161043f57604052565b610415565b6040810190811067ffffffffffffffff82111761043f57604052565b90601f8019910116810190811067ffffffffffffffff82111761043f57604052565b6020808252825181830181905290939260005b8281106104b757505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610495565b3461034d576000806003193601126105ab57604051908080546104ed816103db565b808552916001918083169081156105815750600114610527575b6105238561051781870382610460565b60405191829182610482565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061056957505050810160200161051782610523610507565b8054602085870181019190915290930192810161054e565b8695506105239693506020925061051794915060ff191682840152151560051b8201019293610507565b80fd5b3461034d57602036600319011261034d5760206105d46105cc6126d7565b600435613bec565b604051908152f35b6001600160a01b0381160361034d57565b606090600319011261034d5760043590602435610609816105dc565b90604435610616816105dc565b90565b3461034d576105236106c361062d366105ed565b92919061064361063b612f67565b831515612341565b61065461064e6126d7565b83613bec565b93849261066a610662612f67565b851515612341565b60018060a01b039061068681838516948533036106d357613156565b604080518681526020810192909252918416913391600080516020613dcf8339815191529190a46007546001600160a01b0316613106565b613106565b6040519081529081906020820190565b600086815260056020908152604080832033845290915290205b5482600182016106ff575b5050613156565b61070891611efc565b6001600160a01b038216600090815260056020526040902061073e9033905b9060018060a01b0316600052602052604060002090565b5538826106f8565b3461034d57604036600319011261034d57600435610763816105dc565b60243590336000526005602052816107918260406000209060018060a01b0316600052602052604060002090565b556040519182526001600160a01b03169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590602090a3602060405160018152f35b3461034d57602036600319011261034d5760206105d4600435613b5a565b3461034d57600036600319011261034d576020600354604051908152f35b604051906101e0820182811067ffffffffffffffff82111761043f57604052565b6040519061083f82610444565b565b67ffffffffffffffff811161043f5760051b60200190565b81601f8201121561034d5780359161087083610841565b9261087e6040519485610460565b808452602092838086019260051b82010192831161034d578301905b8282106108a8575050505090565b83809183356108b6816105dc565b81520191019061089a565b3461034d57604036600319011261034d576004356108de816105dc565b6024359067ffffffffffffffff821161034d57610902610909923690600401610859565b9033613957565b005b3461034d57606036600319011261034d57600435610928816105dc565b602435610934816105dc565b60009160443591906001600160a01b0380821680151591841680151591875b600980548210156109d4578952600080516020613e0f8339815191528101546109a4919086906001600160a01b031661098b81612843565b916109c4575b86806109ba575b6109a9575b50506122d9565b610953565b6109b3918a6136ad565b388061099d565b5085851415610998565b6109cf81838b6136ad565b610991565b5050600080516020613def833981519152610a8788610a7189610a4a8a610a23610a108260018060a01b03166000526005602052604060002090565b3360009081526020919091526040902090565b548560018201610a96575b50506001600160a01b0316600090815260046020526040902090565b610a55848254611efc565b90556001600160a01b0316600090815260046020526040902090565b8054820190556040519081529081906020820190565b0390a360405160018152602090f35b610a9f91611efc565b6001600160a01b0382166000908152600560205260409020610ac2903390610727565b558985610a2e565b3461034d57600036600319011261034d5760206105d46126d7565b3461034d576000806003193601126105ab57600754610b4491908190610b1b906001600160a01b03165b6001600160a01b031690565b604051636657732f60e01b81526001600160a01b03909116600482015292839081906024820190565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156103d6578192610bc0575b50805b8251811015610bbc5780610bb2610bad610ba0610bb79487612310565b516001600160a01b031690565b613c1c565b6122d9565b610b83565b5080f35b610bdd9192503d8084833e610bd58183610460565b810190612255565b9038610b80565b3461034d57600036600319011261034d5760206040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98152f35b3461034d57600036600319011261034d57602060ff60025416604051908152f35b3461034d57600036600319011261034d5760206105d4612101565b3461034d57600036600319011261034d576008546040516001600160a01b039091168152602090f35b3461034d57602036600319011261034d57610ca06004356105dc565b60206105d4612d4b565b60843590811515820361034d57565b60609060c319011261034d5760c490565b3461034d5761012036600319011261034d57600435610ce8816105dc565b602435610cf4816105dc565b606435604435610d02610caa565b9260a4359436610d1190610cb9565b6001600160a01b03821696610d246126ab565b610d3090891515612341565b610d38612365565b610d459042831015612341565b6001600160a01b03831660009081526006602052604090205490610d67612101565b604080517f406ef09971b1bfa50a48ce277d3302602d78c94d58a376e8953b590702de7b31602082019081526001600160a01b038881169383019390935291881660608201526080810189905260a081018a90528a151560c082015260e0810185905261010080820194909452928352601f1992610de761012082610460565b51902060405161190160f01b6020820190815260228201939093526042810191909152606292830181529091610e1d9082610460565b5190206001600160a01b038416600090815260066020526040902090916001019055610e4882612470565b6040805192835260ff919091166020808401919091528301358282015291909101356060820152600080526080905a916000916001602094fa156103d657600051610eaf96610eaa916001600160a01b03165b14610ea461247a565b90612341565b6134d7565b60408051928352602083019190915290f35b3461034d57602036600319011261034d5760206105d4600435610ee3816105dc565b61291c565b3461034d57600036600319011261034d5760206040517f2a83c73b9e01ec0a1b95ff05940d809179668cc004230412d7047ffac3846ce78152f35b3461034d57604036600319011261034d57602435600435610f43826105dc565b6001600160a01b039082821690610f5b61063b61320a565b610f63613227565b50610f77610f6f612d4b565b821115613244565b610f8081613bb1565b92610f8c610662612f67565b6008546001600160a01b031690610fa7833033848616612f84565b7f000000000000000000000000000000000000000000000000000000000000000016803b1561034d5760405163e8eda9df60e01b81526001600160a01b0392909216600483015260248201839052306044830152600060648301819052908290608490829084905af180156103d65760209561102a92869261105a575b50613035565b60408051918252602082018490523391600080516020613e2f83398151915291819081015b0390a3604051908152f35b8061106761106d9261042b565b80610342565b38611024565b3461034d57602036600319011261034d57600435611090816105dc565b60018060a01b0316600052600a602052602060ff604060002054166040519015158152f35b3461034d57602036600319011261034d576004356110d2816105dc565b60018060a01b031660005260046020526020604060002054604051908152f35b3461034d57600036600319011261034d576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461034d57602036600319011261034d57600435611154816105dc565b60018060a01b031660005260066020526020604060002054604051908152f35b604090600319011261034d5760043561118c816105dc565b90602435610616816105dc565b3461034d5760206111d56111ac36611174565b6001600160a01b039182166000908152600b855260408082209290931681526020919091522090565b5460801c604051908152f35b3461034d57600036600319011261034d5760206040517f406ef09971b1bfa50a48ce277d3302602d78c94d58a376e8953b590702de7b318152f35b3461034d57602036600319011261034d5760043567ffffffffffffffff811161034d57611250610909913690600401610859565b3333613957565b3461034d57604036600319011261034d57602435600435611277826105dc565b6001600160a01b03908282169061128f61063b61320a565b801590811591826113c3575b6112a790610ea4613227565b90600090156113a957506112c46112bc612a3d565b821115613290565b6112d56112cf6126d7565b82612f16565b925b6112e261063b612f67565b6008546001600160a01b0316906112fd853033848616612f84565b7f000000000000000000000000000000000000000000000000000000000000000016803b1561034d5760405163e8eda9df60e01b81526001600160a01b0392909216600483015260248201859052306044830152600060648301819052908290608490829084905af180156103d65760209561137f92849261105a5750613035565b6040805184815260208101929092523391600080516020613e2f833981519152918190810161104f565b9290506113b4612d4b565b506113bd613b9f565b906112d7565b50600161129b565b3461034d576000806003193601126105ab57604051908060018054916113f0836103db565b808652928281169081156105815750600114611416576105238561051781870382610460565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061145857505050810160200161051782610523610507565b8054602085870181019190915290930192810161143d565b3461034d57600036600319011261034d576007546040516001600160a01b039091168152602090f35b3461034d57604036600319011261034d576004356114b6816105dc565b600090602435906001600160a01b038116331515811515855b60098054821015611548578752600080516020613e0f83398151915281015461151f919084906001600160a01b031661150781612843565b91611538575b848061152e575b6115245750506122d9565b6114cf565b6109b391886136ad565b5086331415611514565b6115438183336136ad565b61150d565b33600090815260046020526040902085908890611566908990610a4a565b8054820190556040519081523390600080516020613def833981519152908060208101610a87565b3461034d57602036600319011261034d5760206105d46115ac6126d7565b600435612f16565b3461034d576116a360206115c7366105ed565b6001600160a01b03828116949390916115e96115e161320a565b871515612341565b6115f1613227565b506115fd61063b612f67565b61161961161161160c83612bd1565b613be0565b83111561343f565b61162282613b5a565b9561163787858416938433036116fd57613156565b60408051848152602081018990523391600080516020613dcf83398151915291a46008546000906001600160a01b03165b604051631a4ca37b60e21b81526001600160a01b03918216600482015260248101939093529093166044820152948592839182906064820190565b03927f0000000000000000000000000000000000000000000000000000000000000000165af19182156103d6576020926116e05750604051908152f35b6116f690833d81116103cf576103c18183610460565b50386103a0565b6001600160a01b03811660009081526005602052604090206106ed903390610727565b3461034d576116a3611731366105ed565b6001600160a01b03808316929161174961066261320a565b84159384159485611812575b61176190610ea4613227565b61177261176c612f67565b86612341565b60009594156117f457602094955061179461178c83612bd1565b87111561348b565b6117a561179f6126d7565b87613bec565b955b6117bb81858516948533036116fd57613156565b6040805188815260208101929092523391600080516020613dcf8339815191529190a460085484906000906001600160a01b0316611668565b6020945061180461160c83612bd1565b5061180d613b3c565b6117a7565b506001611755565b3461034d57602036600319011261034d5760206105d460043561183c816105dc565b61276a565b90815180825260208080930193019160005b828110611861575050505090565b83516001600160a01b031685529381019392810192600101611853565b3461034d57600036600319011261034d57604051806009548082528260208093016009600052600080516020613e0f8339815191529260005b858282106118e2575050506118ce92500383610460565b610523604051928284938452830190611841565b85546001600160a01b03168452600195860195889550930192016118b7565b3461034d57602036600319011261034d5761191d6004356105dc565b60206105d4612a3d565b3461034d57602036600319011261034d5760206105d4600435613bb1565b3461034d57600036600319011261034d576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461034d57602036600319011261034d5760206105d46119b46004356119af816105dc565b612bd1565b6119bc6126d7565b90613bec565b60ff81160361034d57565b3461034d5760e036600319011261034d576004356119ea816105dc565b6024356119f6816105dc565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560443592611b2d606435611b11608435611a30816119c2565b611a3c42841015611f0e565b611b1d611a47612101565b93888a611ad3611a698a60018060a01b03166000526006602052604060002090565b9384549460018601905560405194859360208501958d8791959493909260a09360c08401977f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98552600180871b038092166020860152166040840152606083015260808201520152565b0391611ae7601f1993848101835282610460565b519020604051948591602083019788909160429261190160f01b8352600283015260228201520190565b03908101845283610460565b60c4359260a43592519020611f97565b9284611b688261072760018060a01b0380961697611b4e8988831614611f5a565b6001600160a01b0316600090815260056020526040902090565b556040519485521692602090a3005b3461034d57602036600319011261034d5760206105d46004356119af816105dc565b3461034d576020611bd5611bac36611174565b6001600160a01b0391821660009081526005855260408082209290931681526020919091522090565b54604051908152f35b3461034d57602036600319011261034d5760206105d4600435611c00816105dc565b612843565b3461034d57604036600319011261034d57600435602435611c25816105dc565b611c3061063b612f67565b6007546040516370a0823160e01b81523360048201526001600160a01b03918216929190602081602481875afa80156103d65761052395600080516020613e2f83398151915292600092611ceb575b5081811115611ce35750915b611cb583611c9881613bb1565b96611cac611ca4612f67565b891515612341565b30903390612f84565b611cbf8585613035565b60408051938452602084018690529316923392a36040519081529081906020820190565b905091611c8b565b611d0491925060203d81116103cf576103c18183610460565b9038611c7f565b61ffff81160361034d57565b3461034d5761020036600319011261034d57600435611d35816105dc565b60243590611d42826105dc565b60643591611d4f83611d0b565b611d57610caa565b60e03660c319011261034d576060366101a319011261034d57610523936106c39360a4359360443591612497565b3461034d57606036600319011261034d57600435611da2816105dc565b602435611dae816105dc565b60443567ffffffffffffffff811161034d57611dce903690600401610859565b336001600160a01b0384811691821494929392918515611dff575b5050611dfa61090994610ea4612826565b613957565b90945060405190631d36517b60e21b82526004820152602081602481887f0000000000000000000000000000000000000000000000000000000000000000165afa9485156103d65761090995611dfa92600091611e61575b5016331494611de9565b611e82915060203d8111611e88575b611e7a8183610460565b810190612811565b38611e57565b503d611e70565b3461034d5760206105d4611ea236611174565b6001600160a01b038216600090815260048552604090205490611ec481612843565b92613838565b3461034d57600036600319011261034d57602060405160028152f35b634e487b7160e01b600052601160045260246000fd5b91908203918211611f0957565b611ee6565b15611f1557565b60405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606490fd5b15611f6157565b60405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606490fd5b916106169391611fa693611fbb565b90929192612070565b6040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831161204457916120119160209360405195869094939260ff6060936080840197845216602083015260408201520152565b826000938492838052039060015afa156103d65780516001600160a01b0381161561203b57918190565b50809160019190565b50600093600393509050565b6004111561205a57565b634e487b7160e01b600052602160045260246000fd5b61207981612050565b80612082575050565b61208b81612050565b600181036120a55760405163f645eedf60e01b8152600490fd5b6120ae81612050565b600281036120d35760405163fce698f760e01b815260048101839052602490fd5b0390fd5b806120df600392612050565b146120e75750565b6040516335e2f38360e21b81526004810191909152602490fd5b604051600090815490612113826103db565b928382526020938483019360019086828216918260001461222a5750506001146121d3575b5050918161214e6121cd936121bf950382610460565b519020604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f95810195865260208601929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69085015246606085015230608085015291829060a0850190565b03601f198101835282610460565b51902090565b600080805286935091907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410612215575050508201018161214e612138565b805486850186015287949093019281016121ff565b60ff1916875292151560051b8501909201925083915061214e9050612138565b519061083f826105dc565b602090818184031261034d5780519067ffffffffffffffff821161034d57019180601f8401121561034d57825161228b81610841565b936122996040519586610460565b818552838086019260051b82010192831161034d578301905b8282106122c0575050505090565b83809183516122ce816105dc565b8152019101906122b2565b6000198114611f095760010190565b634e487b7160e01b600052603260045260246000fd5b80511561230b5760200190565b6122e8565b805182101561230b5760209160051b010190565b6040519061233182610444565b60018252600d60fa1b6020830152565b156123495750565b60405162461bcd60e51b81529081906120cf9060048301610482565b6040519061237282610444565b60018252601960f91b6020830152565b7f2a83c73b9e01ec0a1b95ff05940d809179668cc004230412d7047ffac3846ce781526001600160a01b0391821660208201529181166040830152606082019290925261ffff909216608083015291151560a082015260c081019290925260e08201929092526101e0810192918060c4356123fc816105dc565b1661010083015260e43561240f816105dc565b16610120820152610104356101408201526101243561016082015260ff61014435612439816119c2565b16610180820152610164356101a08201526101c061018435910152565b61014435610616816119c2565b6101a435610616816119c2565b35610616816119c2565b6040519061248782610444565b60018252603360f81b6020830152565b9495946001600160a01b038082166124ad612324565b6124b990821515612341565b6124c1612365565b6124ce90428b1015612341565b6001600160a01b038316600090815260066020526040902054986124f0612101565b60405191828c602082019261250a918d8d8d8d8d89612382565b0392601f1993848101825261251f9082610460565b51902060405161190160f01b60208201908152602282019390935260428101919091526062928301815290916125559082610460565b5190206001600160a01b03841660009081526006602052604090209099600101905561257f612463565b604080519a8b5260ff9190911660208b01526101c435908a01526101e43560608a01526000808052988960805a926001602094fa156103d65788516125cd91906001600160a01b0316610e9b565b6101243590816125e9575b50506125e59596506132dc565b5090565b8615612691576008546001600160a01b03165b16612605612456565b91813b1561268d5760405163d505accf60e01b81526001600160a01b0385166004820152306024820152610104356044820152606481019190915260ff9290921660848301526101643560a48301526101843560c483015296976125e597829060e490829084905af161267a575b87966125d8565b806110676126879261042b565b38612673565b8980fd5b6007546126a6906001600160a01b0316610b0f565b6125fc565b604051906126b882610444565b60018252603160f81b6020830152565b9081602091031261034d575190565b60085460405163d15e005360e01b81526001600160a01b03918216600482015290602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103d657600091612738575090565b610616915060203d81116103cf576103c18183610460565b6040519061275d82610444565b6001825260203681840137565b6001600160a01b0390811690811561280a576127bf60209161278a612750565b8160075416612798826122fe565b5260006040518096819582946308d8c03760e21b8452608060048501526084840190611841565b9083196024840152306044840152606483015203927f0000000000000000000000000000000000000000000000000000000000000000165af19081156103d657600091612738575090565b5050600090565b9081602091031261034d5751610616816105dc565b6040519061283382610444565b60018252601b60f91b6020830152565b6001600160a01b03908116801561280a57604090604483600754168351948593849263886fe70b60e01b8452600484015260248301527f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103d6576000916128af575090565b906040823d82116128d8575b816128c860409383610460565b810103126105ab57506020015190565b3d91506128bb565b916128f8604092959495606085526060850190611841565b6001600160a01b0391821660208501529416910152565b91908201809211611f0957565b6001600160a01b038181168015612a3557612935612750565b6007546129669061294e906001600160a01b0316610b0f565b612957836122fe565b6001600160a01b039091169052565b60405180936370674ab960e01b8252818061298a60209889963090600485016128e0565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa9182156103d657600092612a16575b506040516370a0823160e01b8152306004820152908390829060249082905afa9081156103d657610616936000926129f9575b505061290f565b612a0f9250803d106103cf576103c18183610460565b38806129f2565b612a2e919250833d85116103cf576103c18183610460565b90386129bf565b505050600090565b612a45612d4b565b600019908082146125e5576106169150613bb1565b919082602091031261034d576040516020810181811067ffffffffffffffff82111761043f5760405291518252565b51906001600160801b038216820361034d57565b519064ffffffffff8216820361034d57565b519061083f82611d0b565b6101e08183031261034d57612ad7612ad0610811565b9282612a5a565b8252612ae560208201612a89565b6020830152612af660408201612a89565b6040830152612b0760608201612a89565b6060830152612b1860808201612a89565b6080830152612b2960a08201612a89565b60a0830152612b3a60c08201612a9d565b60c0830152612b4b60e08201612aaf565b60e0830152610100612b5e81830161224a565b90830152610120612b7081830161224a565b90830152610140612b8281830161224a565b90830152610160612b9481830161224a565b90830152610180612ba6818301612a89565b908301526101a0612bb8818301612a89565b90830152612bca6101c0809201612a89565b9082015290565b6008546040516335ea6a7560e01b81526001600160a01b0391821660048201819052906101e09081816024817f000000000000000000000000000000000000000000000000000000000000000088165afa9182156103d657600092612cfd575b5050805151600160381b811615908115612ced575b50612ce45761010001516040516370a0823160e01b81526001600160a01b0390911660048201529160209183916024918391165afa9081156103d657612cb491612c9891600091612cc6575b50613bb1565b6001600160a01b03909216600090815260046020526040902090565b5490818110612cc1575090565b905090565b612cde915060203d81116103cf576103c18183610460565b38612c92565b50505050600090565b6001603c1b915016151538612c46565b612d1c9250803d10612d23575b612d148183610460565b810190612aba565b3880612c31565b503d612d0a565b604d8111611f0957600a0a90565b81810292918115918404141715611f0957565b6008546040516335ea6a7560e01b81526001600160a01b0391821660048201526101e0918290829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9182156103d657600092612ed9575b5050805151600160381b8116158015612eca575b8015612eb7575b61280a5780640fffffffff612de360ff612ded9460301c16612d2a565b9160741c16612d38565b908115612eaf5761010081015160049190602090612e1590610b0f906001600160a01b031681565b60405163b1bf962d60e01b815293849182905afa80156103d657612e6d612e7391612e7994600091612e91575b50612e67612e5b6101808601516001600160801b031690565b6001600160801b031690565b9061290f565b91613d0d565b90612f16565b81811115612e88575050600090565b61061691611efc565b612ea9915060203d81116103cf576103c18183610460565b38612e42565b505060001990565b5067020000000000000081161515612dc6565b506001603c1b81161515612dbf565b612eef9250803d10612d2357612d148183610460565b3880612dab565b8115612f00570490565b634e487b7160e01b600052601260045260246000fd5b9081158015612f5f575b61280a57612f2d91612d38565b6b033b2e3c9fd0803ce80000009081810190818111611f09576b033b2e3c9fd0803ce7ffffff01908111611f09570490565b508015612f20565b60405190612f7482610444565b60018252600760fb1b6020830152565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff84111761043f5761083f926040525b906000602091828151910182855af115611faf576000513d61302c57506001600160a01b0381163b155b61300a5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415613003565b600091825b6009805482101561309c578452600080516020613e0f83398151915281015461308891906001600160a01b0390811661307281612843565b918616151580613097575b61308d5750506122d9565b61303a565b6109b391866136ad565b61307d565b50509190600354838101809111611f0957600080516020613def833981519152916130c961310192600355565b6001600160a01b03811660009081526004602052604090208054860190556040519485526001600160a01b0316939081906020820190565b0390a3565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff83118284101761043f5761083f92604052612fd9565b600091825b600980548210156131a6578452600080516020613e0f8339815191528101546131a191906001600160a01b0390811661319381612843565b91861661308d5750506122d9565b61315b565b50506001600160a01b038216600090815260046020526040902080549192838303928311611f0957600080516020613def8339815191529261310192556131f08460035403600355565b6040519384526001600160a01b0316929081906020820190565b6040519061321782610444565b60018252603560f81b6020830152565b6040519061323482610444565b60018252603760f81b6020830152565b1561324b57565b60405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d617800006044820152606490fd5b1561329757565b60405162461bcd60e51b815260206004820152601b60248201527f455243343632363a206d696e74206d6f7265207468616e206d617800000000006044820152606490fd5b919493926001600160a01b038083169392916133016132f961320a565b861515612341565b8561330a613227565b50613427575b61331988613bb1565b809661332661063b612f67565b156133f257506008546001600160a01b0316613346893087868516612f84565b827f00000000000000000000000000000000000000000000000000000000000000001691823b1561034d5760405163e8eda9df60e01b81526001600160a01b03929092166004830152602482018a905230604483015261ffff166064820152906000908290608490829084905af180156103d657600080516020613e2f833981519152936133da92889261105a5750613035565b60408051888152602081018790529390911692a39190565b600754600080516020613e2f833981519152946133da935090613422908b906001600160a01b0316883091612f84565b613035565b61343a613432612d4b565b891115613244565b613310565b1561344657565b60405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468616e206d6178006044820152606490fd5b1561349257565b60405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468616e206d61780000006044820152606490fd5b949390916001600160a01b0391828416916134fb6134f361320a565b841515612341565b80159586159687613680575b61351390610ea4613227565b61352761351e612f67565b82841415612341565b80919660001461364a57505080613631575b61354a6135446126d7565b86613bec565b9687925b61356287868416938433036116fd57613156565b60408051858152602081018990523391600080516020613dcf83398151915291a41561361557600854604051631a4ca37b60e21b81526001600160a01b0391821660048201526024810192909252929092166044830152602090829060649082906000907f0000000000000000000000000000000000000000000000000000000000000000165af180156103d6576135f957509190565b6136109060203d81116103cf576103c18183610460565b509190565b60075461362d939192506001600160a01b0316613106565b9190565b61364561363d88612bd1565b86111561348b565b613539565b81989193965061365e908361366457613b5a565b9561354e565b61367b61367361160c85612bd1565b82111561343f565b613b5a565b508015613507565b60095481101561230b576009600052600080516020613e0f8339815191520190600090565b61083f926040613705926136e560018060a01b0382169560009287845260046020528585852054918383613720575b5050505061377c565b948152600b602052209060018060a01b0316600052602052604060002090565b906001600160801b03166001600160801b0319825416179055565b613773936137369361373193613838565b61377c565b888552600b60209081528686206001600160a01b03891660009081529152604090205b906001600160801b0382549181199060801b169116179055565b388581836136dc565b6001600160801b0390818111613790571690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608490fd5b604051906137f282610444565b60018252603960f81b6020830152565b9060405161380f81610444565b91546001600160801b038116835260801c6020830152565b60ff16604d8111611f0957600a0a90565b61392590610616946138bf6138ba613902956107276138698260018060a01b0316600052600a602052604060002090565b956138a06040519761387a89610444565b5497602060ff8a16151591828152019860081c895260016138996137e5565b9114612341565b6001600160a01b03166000908152600b6020526040902090565b613802565b946138d46138cf60025460ff1690565b613827565b926138e960208801516001600160801b031690565b966001600160801b03968791516001600160801b031690565b16908161392c57516001600160f81b031690505b6001600160f81b031690613932565b911661290f565b50613916565b909291928115612ce4578303928311611f09576106169261395291612d38565b612ef6565b92919060005b8251811015613b3557613976610b0f610ba08386612310565b15613b2c5761398b611c00610ba08386612310565b906139c0826139ac8860018060a01b03166000526004602052604060002090565b546139ba610ba08589612310565b89613838565b6139d3610b0f610b0f610ba08589612310565b6040516370a0823160e01b815230600482015291906020908190849060249082905afa9081156103d657613a37958a948992600094613b0d575b505082600093808611613af2575b50808511613add575b508584613a3c575b5050505050506122d9565b61395d565b613ad295613759613a9894613a82610ba061373195613a7c613a60613ac19b61377c565b6001600160a01b039097166000908152600b6020526040902090565b93612310565b60018060a01b0316600052602052604060002090565b6001600160a01b038a166000908152600b6020526040902061370590613a82610ba0888c612310565b846106be610b0f610ba0868a612310565b853880868185613a2c565b809350613aea9194611efc565b919238613a24565b613b079150612e6761183c610ba08a87612310565b38613a1b565b613b24929450803d106103cf576103c18183610460565b913880613a0d565b613a37906122d9565b5050509050565b613b446126d7565b600019810190808211611f095761061691612ef6565b613b626126d7565b6b033b2e3c9fd0803ce800000091828102928184041490151715611f0957808201809211611f09576000198201918211611f095761061691612ef6565b613ba76126d7565b15612f0057600090565b613bb96126d7565b6b033b2e3c9fd0803ce800000091828102928184041490151715611f095761061691612ef6565b610616906119bc6126d7565b80158015613c14575b61280a576b033b2e3c9fd0803ce800000091613c1091612d38565b0490565b508115613bf5565b6001600160a01b038181166000818152600a60205260409020549092919060ff16613d0857613c4a82612843565b6009546801000000000000000081101561043f577fa8f4dd7e60441ca288d902a295362002a0255a46560b24825821b36716d6fe5b93613d0393613c978360016106c39501600955613688565b819291549060031b9189831b921b1916179055613ce3613cb5610832565b60018152916001600160f01b03851660208401526001600160a01b03166000908152600a6020526040902090565b815160209092015160081b60ff191660ff92151592909216919091179055565b0390a2565b505050565b60c081015164ffffffffff16428103613d37575060200151610616906001600160801b0316612e5b565b6001600160801b0360408301511690420390428211611f09576301e1338091613d5f91612d38565b046b033b2e3c9fd0803ce8000000908101809111611f0957613d91612e5b60206106169401516001600160801b031690565b90816b019d971e4fe8401e7400000019048111158215171561034d576b033b2e3c9fd0803ce800000091026b019d971e4fe8401e7400000001049056fefbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8dbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7afdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7a2646970667358221220dde703c96a5db923fca0d695ec8f6def9246f6dc43078a7e526e5784be0c500064736f6c63430008140033a2646970667358221220eeacce5f49d3b0ca46ca4ec4836f9248ec3d8f9fc890a076081946f93f8ae0dc64736f6c63430008140033",
  "devdoc": {
    "author": "BGD labs (modified by dTrinity)",
    "kind": "dev",
    "methods": {
      "createStaticATokens(address[])": {
        "params": {
          "underlyings": "the addresses of the underlyings to create."
        },
        "returns": {
          "_0": "address[] addresses of the new staticATokens."
        }
      },
      "getStaticAToken(address)": {
        "params": {
          "underlying": "the address of the underlying."
        },
        "returns": {
          "_0": "address the staticAToken address."
        }
      },
      "getStaticATokens()": {
        "returns": {
          "_0": "address[] list of tokens"
        }
      }
    },
    "title": "StaticATokenFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createStaticATokens(address[])": {
        "notice": "Creates new staticATokens"
      },
      "getStaticAToken(address)": {
        "notice": "Returns the staticAToken for a given underlying."
      },
      "getStaticATokens()": {
        "notice": "Returns all tokens deployed via this registry."
      }
    },
    "notice": "Factory contract that keeps track of all deployed static aToken wrappers for a specified pool. This registry also acts as a factory, allowing to deploy new static aTokens on demand. There can only be one static aToken per underlying on the registry at a time.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 78921,
        "contract": "contracts/vaults/atoken_wrapper/StaticATokenFactory.sol:StaticATokenFactory",
        "label": "_underlyingToStaticAToken",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 78924,
        "contract": "contracts/vaults/atoken_wrapper/StaticATokenFactory.sol:StaticATokenFactory",
        "label": "_staticATokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}