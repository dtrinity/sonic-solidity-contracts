{
  "address": "0xdd43d5d02A4e995AEC0D1B36d59845619821Da86",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "addressesProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IOdosRouterV2",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pendleRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "CallerMustBePool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expectedInitiator",
          "type": "address"
        }
      ],
      "name": "InitiatorMustBeThis",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToRepay",
          "type": "uint256"
        }
      ],
      "name": "InsufficientAmountToRepay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalanceBeforeSwap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "InsufficientOutput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "InsufficientOutputAfterComposedSwap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "InsufficientOutputAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "InsufficientPTSwapOutput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPTSwapData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "InvalidPTToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSwapData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "leftoverAmount",
          "type": "uint256"
        }
      ],
      "name": "LeftoverCollateralAfterSwap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "OdosSwapFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expectedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actualAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deviationBps",
          "type": "uint256"
        }
      ],
      "name": "OraclePriceDeviationExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PTApprovalFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PendleSwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendleSwapFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "UnderlyingBalanceInsufficient",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Bought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalOutputAmount",
          "type": "uint256"
        }
      ],
      "name": "ComposedSwapCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ptToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ptAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "PTSwapExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sy",
          "type": "address"
        }
      ],
      "name": "PTTokenDetected",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_PRICE_TOLERANCE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "odosRouter",
      "outputs": [
        {
          "internalType": "contract IOdosRouterV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendleRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collateralAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "debtAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "repayAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rateMode",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "withFlashLoan",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minAmountToReceive",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "allBalanceOffset",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOdosRepayAdapterV2.RepayParamsV2",
          "name": "repayParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20WithPermit",
              "name": "aToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IBaseOdosAdapter.PermitInput",
          "name": "collateralATokenPermit",
          "type": "tuple"
        }
      ],
      "name": "repayWithCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
  "receipt": {
    "to": null,
    "from": "0x51fc0830DBe3A446701E7897F32C89A3B04e5a0a",
    "contractAddress": "0xdd43d5d02A4e995AEC0D1B36d59845619821Da86",
    "transactionIndex": 0,
    "gasUsed": "3785153",
    "logsBloom": "0x00000000000000000000000000000000c00000000000000000800000000000022000000400000000000100000000100020000040000001000000800000a08000000000000000000000000000000008000001000000010010000000000022800004008000020000000000000000000800001202000000000000000000000000400000000000000000004000000010080000820000004000000000000000000000020008000100000000000000000000000000000000000008000000000010000000000008004000000000000000100000000000800000000000000000000020400010800000000000080000000000000000008400000000002000000000000800",
    "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e",
    "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0xdd43d5d02A4e995AEC0D1B36d59845619821Da86",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000051fc0830dbe3a446701e7897f32c89a3b04e5a0a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0xdd43d5d02A4e995AEC0D1B36d59845619821Da86",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000051fc0830dbe3a446701e7897f32c89a3b04e5a0a",
          "0x00000000000000000000000051fc0830dbe3a446701e7897f32c89a3b04e5a0a"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0x53a6aBb52B2F968fA80dF6A894e4f1b1020DA975",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0x614914B028A7D1fD4Fab1E5a53a3E2dF000bcB0e",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0xE5DA20F15420aD15DE0fa650600aFc998bbE3955",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0x5Bff88cA1442c2496f7E475E9e7786383Bc070c0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0x9fb76f7ce5FCeAA2C42887ff441D46095E494206",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0x50c42dEAcD8Fc9773493ED674b675bE577f2634b",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0x3bcE5CB273F0F148010BbEa2470e7b5df84C7812",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0xE8a41c62BB4d5863C6eadC96792cFE90A1f37C47",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 9,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0x930441Aa7Ab17654dF5663781CA0C02CC17e6643",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 10,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0x0Fb682C9692AddCc1769f4D4d938c54420D54fA3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 11,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44822310,
        "transactionHash": "0x97a86cce054e5f6a49ac1736ff47c827de13a2f5aece3b63ba5c656d06eae3dd",
        "address": "0x9F0dF7799f6FDAd409300080cfF680f5A23df4b1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000dd43d5d02a4e995aec0d1b36d59845619821da86",
          "0x000000000000000000000000edc3cfb1aa36c570cc1d374876268bdda2d460cc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 12,
        "blockHash": "0x79d95019561e43bc02c4673b62c989d05cf8c800a4e6fb55433b9eb7e047598e"
      }
    ],
    "blockNumber": 44822310,
    "cumulativeGasUsed": "3785153",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1f8d8a3575d049aA0C195AA947483738811bAdcb",
    "0xEdC3cfB1aa36c570cc1D374876268bDda2D460CC",
    "0xaC041Df48dF9791B0654f1Dbbf2CC8450C5f2e9D",
    "0x888888888889758F76e7103c6CbF23ABbF58F946",
    "0x51fc0830DBe3A446701E7897F32C89A3B04e5a0a"
  ],
  "numDeployments": 11,
  "solcInputHash": "6689ebe65108d78181e65c4bda35e9e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"addressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IOdosRouterV2\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendleRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"CallerMustBePool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedInitiator\",\"type\":\"address\"}],\"name\":\"InitiatorMustBeThis\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToRepay\",\"type\":\"uint256\"}],\"name\":\"InsufficientAmountToRepay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalanceBeforeSwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientOutput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientOutputAfterComposedSwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientPTSwapOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPTSwapData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidPTToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leftoverAmount\",\"type\":\"uint256\"}],\"name\":\"LeftoverCollateralAfterSwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"OdosSwapFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationBps\",\"type\":\"uint256\"}],\"name\":\"OraclePriceDeviationExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PTApprovalFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PendleSwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendleSwapFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"UnderlyingBalanceInsufficient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalOutputAmount\",\"type\":\"uint256\"}],\"name\":\"ComposedSwapCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ptToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ptAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"PTSwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sy\",\"type\":\"address\"}],\"name\":\"PTTokenDetected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_PRICE_TOLERANCE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"odosRouter\",\"outputs\":[{\"internalType\":\"contract IOdosRouterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendleRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withFlashLoan\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"allBalanceOffset\",\"type\":\"uint256\"}],\"internalType\":\"struct IOdosRepayAdapterV2.RepayParamsV2\",\"name\":\"repayParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20WithPermit\",\"name\":\"aToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBaseOdosAdapter.PermitInput\",\"name\":\"collateralATokenPermit\",\"type\":\"tuple\"}],\"name\":\"repayWithCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Supports PT tokens through composed Pendle + Odos swaps\",\"errors\":{\"CallerMustBePool(address,address)\":[{\"details\":\"Thrown when the caller is not the pool\",\"params\":{\"caller\":\"The actual caller\",\"pool\":\"The expected pool\"}}],\"InitiatorMustBeThis(address,address)\":[{\"details\":\"Thrown when the initiator is not the expected initiator\",\"params\":{\"expectedInitiator\":\"The expected initiator\",\"initiator\":\"The actual initiator\"}}],\"InsufficientAmountToRepay(uint256,uint256)\":[{\"details\":\"Custom error for insufficient amount to repay\",\"params\":{\"amountReceived\":\"The amount received from the swap\",\"amountToRepay\":\"The amount needed to repay\"}}],\"InsufficientBalanceBeforeSwap(uint256,uint256)\":[{\"details\":\"Thrown when the balance before swap is insufficient\",\"params\":{\"balance\":\"The actual balance\",\"required\":\"The required balance\"}}],\"InsufficientOutputAfterComposedSwap(uint256,uint256)\":[{\"details\":\"Thrown when insufficient output is received after composed swap\",\"params\":{\"actual\":\"The actual amount received\",\"expected\":\"The expected amount\"}}],\"InsufficientOutputAmount(uint256,uint256)\":[{\"details\":\"Thrown when the output amount is less than the minimum expected\",\"params\":{\"actual\":\"The actual output amount\",\"expected\":\"The minimum expected output amount\"}}],\"InvalidPTSwapData()\":[{\"details\":\"Thrown when PT swap data is invalid\"}],\"LeftoverCollateralAfterSwap(address,uint256)\":[{\"details\":\"Thrown when leftover collateral remains after exact input swap\",\"params\":{\"asset\":\"The collateral asset address\",\"leftoverAmount\":\"The amount of leftover collateral\"}}],\"OdosSwapFailed(string)\":[{\"details\":\"Thrown when Odos swap fails\",\"params\":{\"reason\":\"The failure reason\"}}],\"OraclePriceDeviationExceeded(address,address,uint256,uint256,uint256)\":[{\"details\":\"Thrown when oracle price validation fails (deviation > tolerance)\",\"params\":{\"actualAmount\":\"The swap parameter amount\",\"deviationBps\":\"The actual deviation in basis points\",\"expectedAmount\":\"The oracle-calculated expected amount\",\"tokenIn\":\"The input token address\",\"tokenOut\":\"The output token address\"}}],\"PendleSwapFailed(string)\":[{\"details\":\"Thrown when Pendle swap fails\",\"params\":{\"reason\":\"The failure reason\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Bought(address,address,uint256,uint256)\":{\"details\":\"Emitted when a token is bought on Odos\",\"params\":{\"amountIn\":\"The amount of tokens sold\",\"amountOut\":\"The amount of tokens bought\",\"tokenIn\":\"The address of the token sold\",\"tokenOut\":\"The address of the token bought\"}}},\"kind\":\"dev\",\"methods\":{\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"details\":\"Executes the repay with collateral after receiving the flash-borrowed assetsWorkflow: 1. Buy debt asset by providing the flash-borrowed assets in exchange 2. Repay debt 3. Pull aToken collateral from user and withdraw from Pool 4. Repay flashloan\",\"params\":{\"amounts\":\"The amounts of the flash-borrowed assets\",\"assets\":\"The addresses of the flash-borrowed assets\",\"initiator\":\"The address of the flashloan initiator\",\"params\":\"The byte-encoded params passed when initiating the flashloan\",\"premiums\":\"The premiums of the flash-borrowed assets\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repayWithCollateral((address,uint256,address,uint256,uint256,bool,address,uint256,bytes,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"collateralATokenPermit\":\"optional permit for collateral aToken\",\"repayParams\":\"struct describing the repay with collateral swap\"}},\"rescueTokens(address)\":{\"details\":\"Emergency rescue for token stucked on this contract, as failsafe mechanism - Funds should never remain in this contract more time than during transactions - Only callable by the owner\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OdosRepayAdapterV2\",\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientOutput(uint256,uint256)\":[{\"notice\":\"Custom error when actual output amount is less than expected\"}],\"InvalidSwapData()\":[{\"notice\":\"Error when swap data validation fails\"}],\"PTApprovalFailed()\":[{\"notice\":\"Custom error when PT token approval fails\"}],\"PendleSwapFailed()\":[{\"notice\":\"Custom error for failed Pendle swap with no revert reason\"}],\"SwapFailed()\":[{\"notice\":\"Custom error for failed swap with no revert reason\"}]},\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"The address of the Aave PoolAddressesProvider contract\"},\"ORACLE_PRICE_TOLERANCE_BPS()\":{\"notice\":\"Oracle price deviation tolerance in basis points (500 = 5%)\"},\"POOL()\":{\"notice\":\"The address of the Aave Pool contract\"},\"odosRouter()\":{\"notice\":\"The address of the Odos Router\"},\"pendleRouter()\":{\"notice\":\"The address of the Pendle Router\"},\"repayWithCollateral((address,uint256,address,uint256,uint256,bool,address,uint256,bytes,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Repays with collateral by swapping the collateral asset to debt asset\"}},\"notice\":\"Implements the logic for repaying a debt using a different asset as source\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dlend/periphery/adapters/odos/OdosRepayAdapterV2.sol\":\"OdosRepayAdapterV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/dlend/core/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9f16f888abc3fee68ee8bb706bb83440a4b8dea7bc4321db2f10e0e688d92f5d\",\"license\":\"MIT\"},\"contracts/dlend/core/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9ef3ccc6bac1a64e04e2df68349e76a73a7c4d7f83a6f82dd012401823e93650\",\"license\":\"MIT\"},\"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc31d33aa501ff31dacd5b71dfaba8a26d761d95151c59e4fd19e4df868ca2736\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xc57634a312cba5df93aaffd42fa24d66513a7c98fc1253bce6280a3fbc8dfa4a\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x93968656ef87fdce89dab43a27d107ff9b356642dbf7cb9ef243890b8c6b54ce\",\"license\":\"MIT\"},\"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1e8c94c5b1a71037d8213406853658d4ddfa79dd4e7d3853db0548e804849835\",\"license\":\"MIT\"},\"contracts/dlend/core/interfaces/IERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IERC20WithPermit\\n * @author Aave\\n * @notice Interface for the permit function (EIP-2612)\\n */\\ninterface IERC20WithPermit is IERC20 {\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x51a64c8c271388500bb9a2e91ffc0f1b34373c0810b0b002effa1f68406396c6\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { IPoolAddressesProvider } from \\\"./IPoolAddressesProvider.sol\\\";\\nimport { DataTypes } from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     */\\n    event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     */\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     */\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     */\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function mintUnbacked(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     * @return The backed amount\\n     */\\n    function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     */\\n    function repayWithATokens(address asset, uint256 amount, uint256 interestRateMode) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     */\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     */\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     */\\n    function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     */\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     */\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n     * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\\n     * combination with variable debt supply/balances.\\n     * If using this function externally, consider that is possible to have an increasing normalized\\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n     * (e.g. only updates with non-zero variable debt supply)\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(uint128 flashLoanPremiumTotal, uint128 flashLoanPremiumToProtocol) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\",\"keccak256\":\"0x1a009742251760bab8800dabe291feb45472a088f798cc05350273694851f589\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(bytes32 indexed id, address indexed proxyAddress, address indexed implementationAddress);\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddressFromID(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     */\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     */\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     */\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     */\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     */\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x12535290e6bde912a438d46183d49c757688294ef51ffce4ab85afcfe377e9d4\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n    /**\\n     * @notice Returns the base currency address\\n     * @dev Address 0x0 is reserved for USD as base currency.\\n     * @return Returns the base currency address.\\n     */\\n    function BASE_CURRENCY() external view returns (address);\\n\\n    /**\\n     * @notice Returns the base currency unit\\n     * @dev 1 ether for ETH, 1e8 for USD.\\n     * @return Returns the base currency unit.\\n     */\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the asset price in the base currency\\n     * @param asset The address of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdaaa39d40743c1306595754057491f3d91e6cf9bc018d6b6d32b16ed57c9d313\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/core/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62: siloed borrowing enabled\\n        //bit 63: flashloaning enabled\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0xb6ea55e0a2e139d5ab2b870a956f93b9bc83ff124cc4a0e656a81a5ac718e0a8\",\"license\":\"BUSL-1.1\"},\"contracts/dlend/periphery/adapters/curve/interfaces/IAaveFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IAaveFlashLoanReceiver\\n * @author Aave Labs\\n * @notice Defines the basic interface of an Aave flashloan-receiver contract.\\n * @dev Altered version of the official Aave Interface IFlashLoanReceiver, keeping the minimal functionality to receive the flashloan execution\\n **/\\ninterface IAaveFlashLoanReceiver {\\n    /**\\n     * @notice Executes an operation after receiving the flash-borrowed assets\\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\\n     *      enough funds to repay and has approved the Pool to pull the total amount\\n     * @param assets The addresses of the flash-borrowed assets\\n     * @param amounts The amounts of the flash-borrowed assets\\n     * @param premiums The fee of each flash-borrowed asset\\n     * @param initiator The address of the flashloan initiator\\n     * @param params The byte-encoded params passed when initiating the flashloan\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xac5f6d166e2c7ebeecf906f79c6b0130f624533f329ddee3a74a74ccf9bf3432\",\"license\":\"MIT\"},\"contracts/dlend/periphery/adapters/odos/BaseOdosBuyAdapterV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Detailed} from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IOdosRouterV2} from \\\"contracts/odos/interface/IOdosRouterV2.sol\\\";\\nimport {BaseOdosSwapAdapter} from \\\"./BaseOdosSwapAdapter.sol\\\";\\nimport {IBaseOdosAdapterV2} from \\\"./interfaces/IBaseOdosAdapterV2.sol\\\";\\nimport {OdosSwapUtils} from \\\"contracts/odos/OdosSwapUtils.sol\\\";\\nimport {PendleSwapLogic} from \\\"./PendleSwapLogic.sol\\\";\\nimport {ISwapTypes} from \\\"./interfaces/ISwapTypes.sol\\\";\\nimport {SwapExecutorV2} from \\\"./SwapExecutorV2.sol\\\";\\nimport {IPriceOracleGetter} from \\\"contracts/dlend/core/interfaces/IPriceOracleGetter.sol\\\";\\n\\n/**\\n * @title BaseOdosBuyAdapterV2\\n * @notice Implements the logic for adaptive buying with multi-protocol support\\n * @dev Provides composed swapping capabilities (Odos + Pendle) and direct Odos swapping\\n */\\nabstract contract BaseOdosBuyAdapterV2 is\\n    BaseOdosSwapAdapter,\\n    IBaseOdosAdapterV2\\n{\\n    /// @notice The address of the Odos Router\\n    IOdosRouterV2 public immutable odosRouter;\\n\\n    /// @notice The address of the Pendle Router\\n    address public immutable pendleRouter;\\n\\n    /// @notice Oracle price deviation tolerance in basis points (500 = 5%)\\n    uint256 public constant ORACLE_PRICE_TOLERANCE_BPS = 500;\\n\\n    // Uses InvalidPTSwapData() from IBaseOdosAdapterV2\\n\\n    constructor(\\n        IPoolAddressesProvider addressesProvider,\\n        address pool,\\n        IOdosRouterV2 _odosRouter,\\n        address _pendleRouter\\n    ) BaseOdosSwapAdapter(addressesProvider, pool) {\\n        odosRouter = _odosRouter;\\n        pendleRouter = _pendleRouter;\\n    }\\n\\n    /**\\n     * @dev Validates swap amounts against oracle prices for exact output swaps\\n     * @param tokenIn The input token address\\n     * @param tokenOut The output token address\\n     * @param maxAmountIn The maximum input amount willing to spend\\n     * @param exactAmountOut The exact output amount required\\n     */\\n    function _validateOraclePriceExactOutput(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxAmountIn,\\n        uint256 exactAmountOut\\n    ) internal view {\\n        // Skip validation for same token swaps\\n        if (tokenIn == tokenOut) return;\\n\\n        // Get oracle prices\\n        IPriceOracleGetter oracle = IPriceOracleGetter(ADDRESSES_PROVIDER.getPriceOracle());\\n        uint256 priceIn = oracle.getAssetPrice(tokenIn);\\n        uint256 priceOut = oracle.getAssetPrice(tokenOut);\\n\\n        // Skip validation if either price is zero (oracle not configured)\\n        if (priceIn == 0 || priceOut == 0) return;\\n\\n        // Get token decimals for proper calculation\\n        uint256 decimalsIn = IERC20Detailed(tokenIn).decimals();\\n        uint256 decimalsOut = IERC20Detailed(tokenOut).decimals();\\n\\n        // Calculate expected input amount using oracle prices\\n        // expectedIn = (exactAmountOut * priceOut * 10^decimalsIn) / (priceIn * 10^decimalsOut)\\n        uint256 expectedAmountIn = (exactAmountOut * priceOut * (10 ** decimalsIn)) / \\n                                  (priceIn * (10 ** decimalsOut));\\n\\n        // For exact output, we validate that maxAmountIn isn't excessively higher than expectedAmountIn\\n        // Calculate deviation: (maxAmountIn - expectedAmountIn) / expectedAmountIn * 10000 (in BPS)\\n        if (maxAmountIn > expectedAmountIn) {\\n            uint256 deviationBps = ((maxAmountIn - expectedAmountIn) * 10000) / expectedAmountIn;\\n            \\n            // Revert if user is willing to pay too much more than oracle suggests\\n            if (deviationBps > ORACLE_PRICE_TOLERANCE_BPS) {\\n                revert OraclePriceDeviationExceeded(\\n                    tokenIn,\\n                    tokenOut,\\n                    expectedAmountIn,\\n                    maxAmountIn,\\n                    deviationBps\\n                );\\n            }\\n        }\\n        // Note: We don't validate if maxAmountIn < expectedAmountIn as the user might have better pricing\\n    }\\n\\n    /**\\n     * @dev Executes adaptive buy with intelligent multi-protocol routing\\n     * @dev Automatically chooses between direct Odos or composed Odos+Pendle swaps\\n     * @param assetToSwapFrom The asset to swap from\\n     * @param assetToSwapTo The asset to swap to\\n     * @param maxAmountToSwap Maximum amount of input tokens to spend\\n     * @param amountToReceive Exact amount of output tokens required\\n     * @param swapData Either regular Odos calldata or encoded PTSwapDataV2\\n     * @return amountSold The actual amount of input tokens spent\\n     */\\n    function _executeAdaptiveBuy(\\n        IERC20Detailed assetToSwapFrom,\\n        IERC20Detailed assetToSwapTo,\\n        uint256 maxAmountToSwap,\\n        uint256 amountToReceive,\\n        bytes memory swapData\\n    ) internal returns (uint256 amountSold) {\\n        address tokenIn = address(assetToSwapFrom);\\n        address tokenOut = address(assetToSwapTo);\\n\\n        // Validate swap amounts against oracle prices before execution\\n        _validateOraclePriceExactOutput(tokenIn, tokenOut, maxAmountToSwap, amountToReceive);\\n\\n        // Check swap type using PendleSwapLogic\\n        ISwapTypes.SwapType swapType = PendleSwapLogic.determineSwapType(\\n            tokenIn,\\n            tokenOut\\n        );\\n\\n        if (swapType == ISwapTypes.SwapType.REGULAR_SWAP) {\\n            // Regular swap - use direct Odos execution\\n            return\\n                _executeDirectOdosExactOutput(\\n                    tokenIn,\\n                    tokenOut,\\n                    maxAmountToSwap,\\n                    amountToReceive,\\n                    swapData\\n                );\\n        }\\n\\n        // PT token involved - use composed swap logic\\n        uint256 balanceBeforeAssetFrom = assetToSwapFrom.balanceOf(\\n            address(this)\\n        );\\n        if (balanceBeforeAssetFrom < maxAmountToSwap) {\\n            revert InsufficientBalanceBeforeSwap(\\n                balanceBeforeAssetFrom,\\n                maxAmountToSwap\\n            );\\n        }\\n\\n        // Execute composed swap with intelligent routing\\n        uint256 actualAmountOut = _executeComposedSwapExactOutput(\\n            tokenIn,\\n            tokenOut,\\n            maxAmountToSwap,\\n            amountToReceive,\\n            swapData\\n        );\\n\\n        // Calculate the actual amount sold based on balance difference\\n        uint256 balanceAfterAssetFrom = assetToSwapFrom.balanceOf(address(this));\\n        \\n        // Protect against underflow: ensure balance before >= balance after\\n        if (balanceBeforeAssetFrom < balanceAfterAssetFrom) {\\n            revert InsufficientBalanceBeforeSwap(balanceBeforeAssetFrom, balanceAfterAssetFrom);\\n        }\\n        \\n        amountSold = balanceBeforeAssetFrom - balanceAfterAssetFrom;\\n\\n        emit Bought(tokenIn, tokenOut, amountSold, actualAmountOut);\\n        return amountSold;\\n    }\\n\\n    /**\\n     * @dev Executes composed swap with intelligent routing and PT token support\\n     * @dev Can handle: Regular\\u2194Regular, PT\\u2194Regular, Regular\\u2194PT, PT\\u2194PT swaps\\n     * @param inputToken The input token address\\n     * @param outputToken The output token address\\n     * @param maxInputAmount The maximum amount of input tokens to spend\\n     * @param exactOutputAmount The exact amount of output tokens required\\n     * @param swapData The swap data (either regular Odos or PTSwapDataV2)\\n     * @return actualOutputAmount The actual amount of output tokens received\\n     */\\n    function _executeComposedSwapExactOutput(\\n        address inputToken,\\n        address outputToken,\\n        uint256 maxInputAmount,\\n        uint256 exactOutputAmount,\\n        bytes memory swapData\\n    ) internal returns (uint256 actualOutputAmount) {\\n        return\\n            SwapExecutorV2.executeSwapExactOutput(\\n                SwapExecutorV2.ExactOutputParams({\\n                    inputToken: inputToken,\\n                    outputToken: outputToken,\\n                    maxInputAmount: maxInputAmount,\\n                    exactOutputAmount: exactOutputAmount,\\n                    swapData: swapData,\\n                    pendleRouter: pendleRouter,\\n                    odosRouter: odosRouter\\n                })\\n            );\\n    }\\n\\n    /**\\n     * @dev Executes direct Odos-only swap (no PT routing logic)\\n     * @dev Only handles: Regular\\u2192Regular token swaps via Odos\\n     * @param inputToken The input token address\\n     * @param outputToken The output token address\\n     * @param maxInputAmount The maximum amount of input tokens to spend\\n     * @param exactOutputAmount The exact amount of output tokens required\\n     * @param swapData The raw Odos swap calldata\\n     * @return actualOutputAmount The actual amount of output tokens received\\n     */\\n    function _executeDirectOdosExactOutput(\\n        address inputToken,\\n        address outputToken,\\n        uint256 maxInputAmount,\\n        uint256 exactOutputAmount,\\n        bytes memory swapData\\n    ) internal returns (uint256 actualOutputAmount) {\\n        // Execute Odos swap using OdosSwapUtils (handles approvals internally)\\n        actualOutputAmount = OdosSwapUtils.executeSwapOperation(\\n            odosRouter,\\n            inputToken,\\n            outputToken,\\n            maxInputAmount,\\n            exactOutputAmount,\\n            swapData\\n        );\\n\\n        return actualOutputAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x97910ee957decf2da8597c2548c5cead7e3a7717622f67abd1f2f7a99c8846a4\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/adapters/odos/BaseOdosSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport { IERC20Detailed } from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport { IERC20WithPermit } from \\\"contracts/dlend/core/interfaces/IERC20WithPermit.sol\\\";\\nimport { IPoolAddressesProvider } from \\\"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\\\";\\nimport { IPool } from \\\"contracts/dlend/core/interfaces/IPool.sol\\\";\\nimport { Ownable } from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/Ownable.sol\\\";\\nimport { IBaseOdosAdapter } from \\\"./interfaces/IBaseOdosAdapter.sol\\\";\\n\\n/**\\n * @title BaseOdosSwapAdapter\\n * @notice Utility functions for adapters using Odos\\n */\\nabstract contract BaseOdosSwapAdapter is Ownable, IBaseOdosAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /* State Variables */\\n    /// The address of the Aave PoolAddressesProvider contract\\n    IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\\n\\n    /// The address of the Aave Pool contract\\n    IPool public immutable POOL;\\n\\n    /**\\n     * @dev Constructor\\n     * @param addressesProvider The address of the Aave PoolAddressesProvider contract\\n     * @param pool The address of the Aave Pool contract\\n     */\\n    constructor(IPoolAddressesProvider addressesProvider, address pool) {\\n        ADDRESSES_PROVIDER = addressesProvider;\\n        POOL = IPool(pool);\\n    }\\n\\n    /**\\n     * @dev Get the vToken, sToken and aToken associated to the asset\\n     * @param asset The address of the asset\\n     * @return address The address of the VariableDebtToken, vToken\\n     * @return address The address of the StableDebtToken, sToken\\n     * @return address The address of the aToken\\n     */\\n    function _getReserveData(address asset) internal view virtual returns (address, address, address);\\n\\n    /**\\n     * @dev Supply an amount of asset to the Aave Pool\\n     * @param asset The address of the asset to be supplied\\n     * @param amount The amount of the asset to be supplied\\n     * @param to The address receiving the aTokens\\n     * @param referralCode The referral code to pass to Aave\\n     */\\n    function _supply(address asset, uint256 amount, address to, uint16 referralCode) internal virtual;\\n\\n    /**\\n     * @dev Pull the ATokens from the user and withdraws the underlying asset from the Aave Pool\\n     * @param reserve The address of the asset\\n     * @param user The address of the user to pull aTokens from\\n     * @param amount The amount of tokens to be pulled and withdrawn\\n     * @param permitInput struct containing the permit signature\\n     */\\n    function _pullATokenAndWithdraw(\\n        address reserve,\\n        address user,\\n        uint256 amount,\\n        PermitInput memory permitInput\\n    ) internal returns (uint256) {\\n        // If deadline is set to zero, assume there is no signature for permit\\n        if (permitInput.deadline != 0) {\\n            permitInput.aToken.permit(\\n                user,\\n                address(this),\\n                permitInput.value,\\n                permitInput.deadline,\\n                permitInput.v,\\n                permitInput.r,\\n                permitInput.s\\n            );\\n        }\\n\\n        (, , address aToken) = _getReserveData(reserve);\\n\\n        uint256 aTokenBalanceBefore = IERC20(aToken).balanceOf(address(this));\\n        IERC20(aToken).safeTransferFrom(user, address(this), amount);\\n        uint256 aTokenBalanceDiff = IERC20(aToken).balanceOf(address(this)) - aTokenBalanceBefore;\\n\\n        POOL.withdraw(reserve, aTokenBalanceDiff, address(this));\\n        return aTokenBalanceDiff;\\n    }\\n\\n    /**\\n     * @dev Renews the asset allowance in case the current allowance is below a given threshold\\n     * @param asset The address of the asset\\n     * @param minAmount The minimum required allowance to the Aave Pool\\n     */\\n    function _conditionalRenewAllowance(address asset, uint256 minAmount) internal {\\n        uint256 allowance = IERC20(asset).allowance(address(this), address(POOL));\\n        if (allowance < minAmount) {\\n            IERC20(asset).safeApprove(address(POOL), type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emergency rescue for token stucked on this contract, as failsafe mechanism\\n     * - Funds should never remain in this contract more time than during transactions\\n     * - Only callable by the owner\\n     */\\n    function rescueTokens(IERC20 token) external onlyOwner {\\n        token.safeTransfer(owner(), token.balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xdae3d3cb6cf24f663a419b6330388b7decad1440f26566beb8e12ad74b28dcc9\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/adapters/odos/OdosRepayAdapterV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {DataTypes} from \\\"contracts/dlend/core/protocol/libraries/types/DataTypes.sol\\\";\\nimport {IOdosRepayAdapterV2} from \\\"./interfaces/IOdosRepayAdapterV2.sol\\\";\\nimport {BaseOdosBuyAdapterV2} from \\\"./BaseOdosBuyAdapterV2.sol\\\";\\nimport {SafeERC20} from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport {IERC20WithPermit} from \\\"contracts/dlend/core/interfaces/IERC20WithPermit.sol\\\";\\nimport {IOdosRouterV2} from \\\"contracts/odos/interface/IOdosRouterV2.sol\\\";\\nimport {IERC20} from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IERC20Detailed} from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"contracts/dlend/core/interfaces/IPoolAddressesProvider.sol\\\";\\nimport {ReentrancyGuard} from \\\"../../dependencies/openzeppelin/ReentrancyGuard.sol\\\";\\nimport {IAaveFlashLoanReceiver} from \\\"../curve/interfaces/IAaveFlashLoanReceiver.sol\\\";\\n\\n/**\\n * @title OdosRepayAdapterV2\\n * @notice Implements the logic for repaying a debt using a different asset as source\\n * @dev Supports PT tokens through composed Pendle + Odos swaps\\n */\\ncontract OdosRepayAdapterV2 is\\n    BaseOdosBuyAdapterV2,\\n    ReentrancyGuard,\\n    IAaveFlashLoanReceiver,\\n    IOdosRepayAdapterV2\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20WithPermit;\\n\\n    // unique identifier to track usage via flashloan events\\n    uint16 public constant REFERRER = 43982; // Different from V1 and other adapters\\n\\n    constructor(\\n        IPoolAddressesProvider addressesProvider,\\n        address pool,\\n        IOdosRouterV2 _swapRouter,\\n        address _pendleRouter,\\n        address owner\\n    )\\n        BaseOdosBuyAdapterV2(\\n            addressesProvider,\\n            pool,\\n            _swapRouter,\\n            _pendleRouter\\n        )\\n    {\\n        transferOwnership(owner);\\n        // set initial approval for all reserves\\n        address[] memory reserves = POOL.getReservesList();\\n        for (uint256 i = 0; i < reserves.length; i++) {\\n            IERC20(reserves[i]).safeApprove(address(POOL), type(uint256).max);\\n        }\\n    }\\n\\n    /// @inheritdoc IOdosRepayAdapterV2\\n    function repayWithCollateral(\\n        RepayParamsV2 memory repayParams,\\n        PermitInput memory collateralATokenPermit\\n    ) external nonReentrant {\\n        // Refresh the exact repayAmount using current debt state and optional allBalanceOffset\\n        repayParams.repayAmount = _getDebtRepayAmount(\\n            IERC20(repayParams.debtAsset),\\n            repayParams.rateMode,\\n            repayParams.allBalanceOffset,\\n            repayParams.repayAmount,\\n            repayParams.user\\n        );\\n\\n        if (!repayParams.withFlashLoan) {\\n            uint256 collateralBalanceBefore = IERC20(\\n                repayParams.collateralAsset\\n            ).balanceOf(address(this));\\n            // Pull collateral aTokens from user and withdraw underlying to this contract\\n            uint256 collateralAmountReceived = _pullATokenAndWithdraw(\\n                repayParams.collateralAsset,\\n                repayParams.user,\\n                repayParams.collateralAmount,\\n                collateralATokenPermit\\n            );\\n\\n            // Use adaptive buy which handles both regular and PT token swaps intelligently\\n            _executeAdaptiveBuy(\\n                IERC20Detailed(repayParams.collateralAsset),\\n                IERC20Detailed(repayParams.debtAsset),\\n                collateralAmountReceived,\\n                repayParams.repayAmount,\\n                repayParams.swapData\\n            );\\n\\n            // Repay the debt\\n            _conditionalRenewAllowance(\\n                repayParams.debtAsset,\\n                repayParams.repayAmount\\n            );\\n            POOL.repay(\\n                repayParams.debtAsset,\\n                repayParams.repayAmount,\\n                repayParams.rateMode,\\n                repayParams.user\\n            );\\n\\n            // Supply on behalf of the user in case of excess of collateral asset after the swap\\n            uint256 collateralBalanceAfter = IERC20(repayParams.collateralAsset)\\n                .balanceOf(address(this));\\n            uint256 collateralExcess = collateralBalanceAfter >\\n                collateralBalanceBefore\\n                ? collateralBalanceAfter - collateralBalanceBefore\\n                : 0;\\n            if (collateralExcess > 0) {\\n                _conditionalRenewAllowance(\\n                    repayParams.collateralAsset,\\n                    collateralExcess\\n                );\\n                _supply(\\n                    repayParams.collateralAsset,\\n                    collateralExcess,\\n                    repayParams.user,\\n                    REFERRER\\n                );\\n            }\\n        } else {\\n            // Flashloan of the collateral asset to use for repayment\\n            _flash(repayParams, collateralATokenPermit);\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes the repay with collateral after receiving the flash-borrowed assets\\n     * @dev Workflow:\\n     * 1. Buy debt asset by providing the flash-borrowed assets in exchange\\n     * 2. Repay debt\\n     * 3. Pull aToken collateral from user and withdraw from Pool\\n     * 4. Repay flashloan\\n     * @param assets The addresses of the flash-borrowed assets\\n     * @param amounts The amounts of the flash-borrowed assets\\n     * @param premiums The premiums of the flash-borrowed assets\\n     * @param initiator The address of the flashloan initiator\\n     * @param params The byte-encoded params passed when initiating the flashloan\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool) {\\n        if (msg.sender != address(POOL)) {\\n            revert CallerMustBePool(msg.sender, address(POOL));\\n        }\\n        if (initiator != address(this)) {\\n            revert InitiatorMustBeThis(initiator, address(this));\\n        }\\n\\n        (\\n            RepayParamsV2 memory repayParams,\\n            PermitInput memory collateralATokenPermit\\n        ) = abi.decode(params, (RepayParamsV2, PermitInput));\\n\\n        address flashLoanAsset = assets[0];\\n        uint256 flashLoanAmount = amounts[0];\\n        uint256 flashLoanPremium = premiums[0];\\n\\n        // Record balance before swap on flashloan asset to compute amountSold\\n        uint256 balanceBefore = IERC20(flashLoanAsset).balanceOf(address(this));\\n\\n        // Use adaptive buy which handles both regular and PT token swaps intelligently\\n        _executeAdaptiveBuy(\\n            IERC20Detailed(flashLoanAsset),\\n            IERC20Detailed(repayParams.debtAsset),\\n            flashLoanAmount,\\n            repayParams.repayAmount,\\n            repayParams.swapData\\n        );\\n\\n        // Repay the debt\\n        _conditionalRenewAllowance(\\n            repayParams.debtAsset,\\n            repayParams.repayAmount\\n        );\\n        POOL.repay(\\n            repayParams.debtAsset,\\n            repayParams.repayAmount,\\n            repayParams.rateMode,\\n            repayParams.user\\n        );\\n\\n        // Determine amount of flashloan asset sold in the swap\\n        uint256 balanceAfter = IERC20(flashLoanAsset).balanceOf(address(this));\\n        uint256 amountSold = balanceBefore > balanceAfter\\n            ? balanceBefore - balanceAfter\\n            : 0;\\n\\n        // Pull only the amount needed from the user to repay the flashloan: premium + amountSold\\n        _pullATokenAndWithdraw(\\n            flashLoanAsset,\\n            repayParams.user,\\n            flashLoanPremium + amountSold,\\n            collateralATokenPermit\\n        );\\n\\n        // Flashloan repayment\\n        _conditionalRenewAllowance(\\n            flashLoanAsset,\\n            flashLoanAmount + flashLoanPremium\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Swaps the collateral asset and repays the debt of received asset from swap\\n     * @dev Workflow:\\n     * 1. Pull aToken collateral from user and withdraw from Pool\\n     * 2. Buy debt asset by providing the withdrawn collateral in exchange\\n     * 3. Repay debt\\n     * @param repayParams struct describing the debt swap\\n     * @param collateralATokenPermit Permit for withdrawing collateral token from the pool\\n     * @return The amount of withdrawn collateral sold in the swap\\n     */\\n    /**\\n     * @dev Triggers the flashloan passing encoded params for the repay with collateral\\n     * @param repayParams struct describing the repay swap\\n     * @param collateralATokenPermit optional permit for old collateral's aToken\\n     */\\n    function _flash(\\n        RepayParamsV2 memory repayParams,\\n        PermitInput memory collateralATokenPermit\\n    ) internal virtual {\\n        bytes memory params = abi.encode(repayParams, collateralATokenPermit);\\n        address[] memory assets = new address[](1);\\n        assets[0] = repayParams.collateralAsset;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = repayParams.collateralAmount;\\n        uint256[] memory interestRateModes = new uint256[](1);\\n        interestRateModes[0] = 0;\\n\\n        POOL.flashLoan(\\n            address(this),\\n            assets,\\n            amounts,\\n            interestRateModes,\\n            address(this),\\n            params,\\n            REFERRER\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggers the flashloan passing encoded params for the repay with collateral\\n     * @param repayParams struct describing the repay swap\\n     * @param collateralATokenPermit optional permit for old collateral's aToken\\n     */\\n    /**\\n     * @dev Implementation of the reserve data getter from the base adapter\\n     */\\n    function _getReserveData(\\n        address asset\\n    ) internal view override returns (address, address, address) {\\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(asset);\\n        return (\\n            reserveData.variableDebtTokenAddress,\\n            reserveData.stableDebtTokenAddress,\\n            reserveData.aTokenAddress\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the amount of debt to repay for the user\\n     * @param debtAsset The address of the asset to repay the debt\\n     * @param rateMode The interest rate mode of the debt (e.g. STABLE or VARIABLE)\\n     * @param buyAllBalanceOffset offset in calldata in case all debt is repaid, otherwise 0\\n     * @param debtRepayAmount The amount of debt to repay\\n     * @param user The address user for whom the debt is repaid\\n     * @return The amount of debt to be repaid\\n     */\\n    /**\\n     * @dev Implementation of the supply function from the base adapter\\n     */\\n    function _supply(\\n        address asset,\\n        uint256 amount,\\n        address to,\\n        uint16 referralCode\\n    ) internal override {\\n        POOL.supply(asset, amount, to, referralCode);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of debt to repay for the user\\n     * @param debtAsset The address of the asset to repay the debt\\n     * @param rateMode The interest rate mode of the debt (e.g. STABLE or VARIABLE)\\n     * @param buyAllBalanceOffset offset in calldata in case all debt is repaid, otherwise 0\\n     * @param debtRepayAmount The amount of debt to repay\\n     * @param user The address user for whom the debt is repaid\\n     * @return The amount of debt to be repaid\\n     */\\n    function _getDebtRepayAmount(\\n        IERC20 debtAsset,\\n        uint256 rateMode,\\n        uint256 buyAllBalanceOffset,\\n        uint256 debtRepayAmount,\\n        address user\\n    ) internal view returns (uint256) {\\n        (address vDebtToken, address sDebtToken, ) = _getReserveData(\\n            address(debtAsset)\\n        );\\n\\n        address debtToken = DataTypes.InterestRateMode(rateMode) ==\\n            DataTypes.InterestRateMode.STABLE\\n            ? sDebtToken\\n            : vDebtToken;\\n        uint256 currentDebt = IERC20(debtToken).balanceOf(user);\\n\\n        if (buyAllBalanceOffset != 0) {\\n            debtRepayAmount = currentDebt;\\n        } else {\\n            // Sanity check to ensure the passed value `debtRepayAmount` is less than the current debt\\n            // when repaying the exact amount\\n            if (debtRepayAmount > currentDebt) {\\n                revert InsufficientOutputAfterComposedSwap(\\n                    currentDebt,\\n                    debtRepayAmount\\n                );\\n            }\\n        }\\n\\n        return debtRepayAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x46fae91be4f551a8debe328f5fb32085275eeb21d1f859ba3b0705b21c340591\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/adapters/odos/PendleSwapLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"contracts/dlend/core/dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport {PendleSwapUtils} from \\\"contracts/pendle/PendleSwapUtils.sol\\\";\\nimport {OdosSwapUtils} from \\\"contracts/odos/OdosSwapUtils.sol\\\";\\nimport {IOdosRouterV2} from \\\"contracts/odos/interface/IOdosRouterV2.sol\\\";\\nimport {ISwapTypes} from \\\"./interfaces/ISwapTypes.sol\\\";\\nimport {IBaseOdosAdapterV2} from \\\"./interfaces/IBaseOdosAdapterV2.sol\\\";\\n\\n/**\\n * @title PendleSwapLogic\\n * @notice Library for handling PT token operations and composed swaps\\n * @dev Provides high-level logic for PT token detection and orchestrating composed PT+Odos swaps\\n */\\nlibrary PendleSwapLogic {\\n    using SafeERC20 for IERC20;\\n\\n    /* Custom Errors */\\n    error InvalidPTToken(address token);\\n    // Use InvalidPTSwapData() from IBaseOdosAdapterV2\\n    error InsufficientPTSwapOutput(uint256 expected, uint256 actual);\\n    error UnderlyingBalanceInsufficient(uint256 required, uint256 available);\\n    error ComposedSwapFailed(string stage);\\n\\n    /* Events */\\n    event PTTokenDetected(address indexed token, address indexed sy);\\n    event PTSwapExecuted(\\n        address indexed ptToken,\\n        address indexed underlyingAsset,\\n        uint256 ptAmount,\\n        uint256 underlyingAmount\\n    );\\n    event ComposedSwapCompleted(\\n        address indexed inputToken,\\n        address indexed outputToken,\\n        uint256 inputAmount,\\n        uint256 finalOutputAmount\\n    );\\n\\n\\n\\n    /**\\n     * @notice Data structure for PT swap parameters\\n     * @param isComposed True if this is a composed PT+Odos swap\\n     * @param underlyingAsset The underlying asset from PT swap (for composed swaps)\\n     * @param pendleCalldata The Pendle swap calldata (for composed swaps)\\n     * @param odosCalldata The Odos swap calldata (can be empty for direct swaps)\\n     */\\n    struct PTSwapDataV2 {\\n        bool isComposed;\\n        address underlyingAsset;\\n        bytes pendleCalldata;\\n        bytes odosCalldata;\\n    }\\n\\n    /**\\n     * @notice Check if a token is a PT token by calling the SY() method\\n     * @param token The token address to check\\n     * @return result True if the token appears to be a PT token\\n     * @return sy The SY address if it's a PT token, zero address otherwise\\n     */\\n    function isPTToken(address token) internal returns (bool result, address sy) {\\n        // Try to call SY() method - PT tokens should have this\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSignature(\\\"SY()\\\")\\n        );\\n\\n        // Check if call was successful and returned a valid address (not zero)\\n        if (success && data.length == 32) {\\n            sy = abi.decode(data, (address));\\n            result = sy != address(0);\\n\\n            if (result) {\\n                emit PTTokenDetected(token, sy);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Execute a Pendle PT swap using router and swap data\\n     * @param ptToken The PT token being swapped\\n     * @param ptAmount Amount of PT tokens to swap\\n     * @param underlyingAsset The underlying asset that will be received\\n     * @param pendleRouter The Pendle router address\\n     * @param swapData Transaction data from Pendle SDK\\n     * @return actualUnderlyingOut Actual amount of underlying tokens received\\n     */\\n    function executePendleSwap(\\n        address ptToken,\\n        uint256 ptAmount,\\n        address underlyingAsset,\\n        address pendleRouter,\\n        bytes memory swapData\\n    ) internal returns (uint256 actualUnderlyingOut) {\\n        // Record underlying token balance before swap\\n        uint256 underlyingBalanceBefore = IERC20(underlyingAsset).balanceOf(\\n            address(this)\\n        );\\n\\n        // Execute Pendle swap via PendleSwapUtils library (PT \\u2192 underlying)\\n        PendleSwapUtils.swapExactInput(\\n            ptToken,\\n            underlyingAsset,\\n            ptAmount,\\n            pendleRouter,\\n            swapData\\n        );\\n\\n        // Calculate actual underlying tokens received\\n        uint256 underlyingBalanceAfter = IERC20(underlyingAsset).balanceOf(\\n            address(this)\\n        );\\n        actualUnderlyingOut = underlyingBalanceAfter - underlyingBalanceBefore;\\n\\n        emit PTSwapExecuted(\\n            ptToken,\\n            underlyingAsset,\\n            ptAmount,\\n            actualUnderlyingOut\\n        );\\n\\n        return actualUnderlyingOut;\\n    }\\n\\n    /**\\n     * @notice Execute composed swap: PT -> underlying -> target token\\n     * @param ptToken The PT token input\\n     * @param targetToken The final target token\\n     * @param ptAmount Amount of PT tokens to swap\\n     * @param minTargetOut Minimum amount of target tokens expected\\n     * @param pendleRouter The Pendle router address\\n     * @param odosRouter The Odos router address\\n     * @param swapData The PTSwapDataV2 containing swap parameters\\n     * @return actualTargetOut Actual amount of target tokens received\\n     */\\n    function executePTToTargetSwap(\\n        address ptToken,\\n        address targetToken,\\n        uint256 ptAmount,\\n        uint256 minTargetOut,\\n        address pendleRouter,\\n        IOdosRouterV2 odosRouter,\\n        PTSwapDataV2 memory swapData\\n    ) internal returns (uint256 actualTargetOut) {\\n        // Validate swap data\\n        if (!swapData.isComposed || swapData.underlyingAsset == address(0)) {\\n            revert IBaseOdosAdapterV2.InvalidPTSwapData();\\n        }\\n\\n        // Stage 1: PT -> underlying via Pendle\\n        uint256 underlyingReceived = executePendleSwap(\\n            ptToken,\\n            ptAmount,\\n            swapData.underlyingAsset,\\n            pendleRouter,\\n            swapData.pendleCalldata\\n        );\\n\\n        // Stage 2: underlying -> target via Odos (if needed)\\n        if (swapData.underlyingAsset == targetToken) {\\n            // Direct case: underlying is the target token\\n            actualTargetOut = underlyingReceived;\\n        } else {\\n            // Need Odos swap: underlying -> target\\n            if (swapData.odosCalldata.length == 0) {\\n                revert IBaseOdosAdapterV2.InvalidPTSwapData();\\n            }\\n\\n            actualTargetOut = OdosSwapUtils.executeSwapOperation(\\n                odosRouter,\\n                swapData.underlyingAsset,\\n                targetToken,\\n                underlyingReceived,\\n                minTargetOut,\\n                swapData.odosCalldata\\n            );\\n        }\\n\\n        emit ComposedSwapCompleted(\\n            ptToken,\\n            targetToken,\\n            ptAmount,\\n            actualTargetOut\\n        );\\n        return actualTargetOut;\\n    }\\n\\n    /**\\n     * @notice Execute composed swap: source token -> underlying -> PT\\n     * @param sourceToken The source token input\\n     * @param ptToken The final PT token\\n     * @param sourceAmount Amount of source tokens to swap\\n     * @param minPTOut Minimum amount of PT tokens expected\\n     * @param pendleRouter The Pendle router address\\n     * @param odosRouter The Odos router address\\n     * @param swapData The PTSwapDataV2 containing swap parameters\\n     * @return actualPTOut Actual amount of PT tokens received\\n     */\\n    function executeSourceToPTSwap(\\n        address sourceToken,\\n        address ptToken,\\n        uint256 sourceAmount,\\n        uint256 minPTOut,\\n        address pendleRouter,\\n        IOdosRouterV2 odosRouter,\\n        PTSwapDataV2 memory swapData\\n    ) internal returns (uint256 actualPTOut) {\\n        // Validate swap data\\n        if (!swapData.isComposed || swapData.underlyingAsset == address(0)) {\\n            revert IBaseOdosAdapterV2.InvalidPTSwapData();\\n        }\\n\\n        uint256 underlyingAmount;\\n\\n        // Stage 1: source -> underlying via Odos (if needed)\\n        if (sourceToken == swapData.underlyingAsset) {\\n            // Direct case: source is the underlying token\\n            underlyingAmount = sourceAmount;\\n        } else {\\n            // Need Odos swap: source -> underlying\\n            if (swapData.odosCalldata.length == 0) {\\n                revert IBaseOdosAdapterV2.InvalidPTSwapData();\\n            }\\n\\n            // Record balance before Odos swap for debugging\\n            uint256 underlyingBalanceBeforeOdos = IERC20(\\n                swapData.underlyingAsset\\n            ).balanceOf(address(this));\\n\\n            underlyingAmount = OdosSwapUtils.executeSwapOperation(\\n                odosRouter,\\n                sourceToken,\\n                swapData.underlyingAsset,\\n                sourceAmount,\\n                0, // minOut is handled in final PT check\\n                swapData.odosCalldata\\n            );\\n\\n            // Verify we actually received underlying tokens\\n            uint256 underlyingBalanceAfterOdos = IERC20(\\n                swapData.underlyingAsset\\n            ).balanceOf(address(this));\\n            uint256 actualReceived = underlyingBalanceAfterOdos -\\n                underlyingBalanceBeforeOdos;\\n\\n            if (actualReceived == 0) {\\n                revert IBaseOdosAdapterV2.OdosSwapFailed(\\n                    \\\"Odos swap returned zero underlying tokens\\\"\\n                );\\n            }\\n        }\\n\\n        // Stage 2: underlying -> PT via Pendle\\n        uint256 underlyingBalanceBefore = IERC20(swapData.underlyingAsset)\\n            .balanceOf(address(this));\\n\\n        // Verify we have sufficient underlying tokens\\n        if (underlyingBalanceBefore < underlyingAmount) {\\n            revert UnderlyingBalanceInsufficient(\\n                underlyingAmount,\\n                underlyingBalanceBefore\\n            );\\n        }\\n\\n        // Stage 2: underlying \\u2192 PT via PendleSwapUtils\\n        actualPTOut = PendleSwapUtils.swapExactInput(\\n            swapData.underlyingAsset,\\n            ptToken,\\n            underlyingAmount,\\n            pendleRouter,\\n            swapData.pendleCalldata\\n        );\\n\\n        if (actualPTOut < minPTOut) {\\n            revert InsufficientPTSwapOutput(minPTOut, actualPTOut);\\n        }\\n\\n        emit PTSwapExecuted(\\n            swapData.underlyingAsset,\\n            ptToken,\\n            underlyingAmount,\\n            actualPTOut\\n        );\\n        emit ComposedSwapCompleted(\\n            sourceToken,\\n            ptToken,\\n            sourceAmount,\\n            actualPTOut\\n        );\\n\\n        return actualPTOut;\\n    }\\n\\n    /**\\n     * @notice Execute hybrid PT to PT swap using Odos + Pendle\\n     * @dev Uses Odos for PT input \\u2192 underlying asset, then Pendle for underlying asset \\u2192 PT output\\n     * @param inputPTToken The input PT token\\n     * @param outputPTToken The output PT token\\n     * @param inputAmount Amount of input PT tokens to swap\\n     * @param minOutputAmount Minimum amount of output PT tokens expected\\n     * @param pendleRouter The Pendle router address\\n     * @param odosRouter The Odos router address\\n     * @param swapData The PTSwapDataV2 containing both Odos and Pendle swap parameters\\n     * @return actualOutputAmount Actual amount of output PT tokens received\\n     */\\n    function executePTToPTSwap(\\n        address inputPTToken,\\n        address outputPTToken,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address pendleRouter,\\n        IOdosRouterV2 odosRouter,\\n        PTSwapDataV2 memory swapData\\n    ) internal returns (uint256 actualOutputAmount) {\\n        // Validate that this is a PT to PT swap\\n        (bool inputIsPT, ) = isPTToken(inputPTToken);\\n        (bool outputIsPT, ) = isPTToken(outputPTToken);\\n        \\n        if (!inputIsPT || !outputIsPT) {\\n            revert InvalidPTToken(inputPTToken);\\n        }\\n\\n        // For PT to PT hybrid swap, we need both Odos and Pendle calldata + underlying asset\\n        if (\\n            !swapData.isComposed ||\\n            swapData.underlyingAsset == address(0) ||\\n            swapData.odosCalldata.length == 0 ||\\n            swapData.pendleCalldata.length == 0\\n        ) {\\n            revert IBaseOdosAdapterV2.InvalidPTSwapData();\\n        }\\n\\n        // Stage 1: PT input \\u2192 underlying asset via Odos\\n        uint256 actualUnderlyingReceived;\\n        {\\n            uint256 underlyingBalanceBefore = IERC20(swapData.underlyingAsset)\\n                .balanceOf(address(this));\\n\\n            OdosSwapUtils.executeSwapOperation(\\n                odosRouter,\\n                inputPTToken,\\n                swapData.underlyingAsset,\\n                inputAmount,\\n                0, // minOut handled in final PT check\\n                swapData.odosCalldata\\n            );\\n\\n            // Verify we received underlying tokens\\n            uint256 underlyingBalanceAfter = IERC20(swapData.underlyingAsset)\\n                .balanceOf(address(this));\\n            actualUnderlyingReceived =\\n                underlyingBalanceAfter - underlyingBalanceBefore;\\n        }\\n\\n        if (actualUnderlyingReceived == 0) {\\n            revert IBaseOdosAdapterV2.OdosSwapFailed(\\n                \\\"Odos PT swap returned zero underlying tokens\\\"\\n            );\\n        }\\n\\n        emit PTSwapExecuted(\\n            inputPTToken,\\n            swapData.underlyingAsset,\\n            inputAmount,\\n            actualUnderlyingReceived\\n        );\\n\\n        // Stage 2: underlying asset \\u2192 PT output via PendleSwapUtils\\n        actualOutputAmount = PendleSwapUtils.swapExactInput(\\n            swapData.underlyingAsset,\\n            outputPTToken,\\n            actualUnderlyingReceived,\\n            pendleRouter,\\n            swapData.pendleCalldata\\n        );\\n\\n        if (actualOutputAmount < minOutputAmount) {\\n            revert InsufficientPTSwapOutput(\\n                minOutputAmount,\\n                actualOutputAmount\\n            );\\n        }\\n\\n        emit PTSwapExecuted(\\n            swapData.underlyingAsset,\\n            outputPTToken,\\n            actualUnderlyingReceived,\\n            actualOutputAmount\\n        );\\n        emit ComposedSwapCompleted(\\n            inputPTToken,\\n            outputPTToken,\\n            inputAmount,\\n            actualOutputAmount\\n        );\\n\\n        return actualOutputAmount;\\n    }\\n\\n    /**\\n     * @notice Validate PTSwapDataV2 structure\\n     * @param swapData The PTSwapDataV2 struct to validate\\n     * @return isValid True if the swap data is valid\\n     */\\n    function validatePTSwapData(\\n        PTSwapDataV2 memory swapData\\n    ) internal pure returns (bool isValid) {\\n        if (!swapData.isComposed) {\\n            // For regular swaps, we just need odos calldata\\n            return swapData.odosCalldata.length > 0;\\n        }\\n\\n        // For composed swaps, we need at least valid pendle calldata\\n        if (swapData.pendleCalldata.length == 0) {\\n            return false;\\n        }\\n\\n        // For PT to PT hybrid swaps, we need both Odos and Pendle calldata + underlying asset\\n        // For other composed swaps, we need valid underlying asset\\n        // Odos calldata can be empty (for direct underlying \\u2192 target cases)\\n        return true; // If we have Pendle calldata, it's valid (underlying asset check done in specific functions)\\n    }\\n\\n    /**\\n     * @notice Determine swap strategy based on input/output tokens\\n     * @param inputToken The input token address\\n     * @param outputToken The output token address\\n     * @return swapType The appropriate swap strategy\\n     */\\n    function determineSwapType(\\n        address inputToken,\\n        address outputToken\\n    ) internal returns (ISwapTypes.SwapType swapType) {\\n        (bool inputIsPT, ) = isPTToken(inputToken);\\n        (bool outputIsPT, ) = isPTToken(outputToken);\\n\\n        if (!inputIsPT && !outputIsPT) {\\n            return ISwapTypes.SwapType.REGULAR_SWAP; // Regular Odos swap\\n        } else if (inputIsPT && !outputIsPT) {\\n            return ISwapTypes.SwapType.PT_TO_REGULAR; // PT \\u2192 underlying \\u2192 regular\\n        } else if (!inputIsPT && outputIsPT) {\\n            return ISwapTypes.SwapType.REGULAR_TO_PT; // Regular \\u2192 underlying \\u2192 PT\\n        } else {\\n            return ISwapTypes.SwapType.PT_TO_PT; // PT \\u2192 PT (direct Pendle swap)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf008be131deef8c0f72807ad9f48adafee06bab647a3c18ba6ae81a8eb985cff\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/adapters/odos/SwapExecutorV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {PendleSwapLogic} from \\\"./PendleSwapLogic.sol\\\";\\nimport {OdosSwapUtils} from \\\"contracts/odos/OdosSwapUtils.sol\\\";\\nimport {IOdosRouterV2} from \\\"contracts/odos/interface/IOdosRouterV2.sol\\\";\\nimport {ISwapTypes} from \\\"./interfaces/ISwapTypes.sol\\\";\\n\\n/**\\n * @title SwapExecutorV2\\n * @notice Unified library for executing all types of swaps in Odos V2 adapters\\n * @dev Encapsulates swap type determination, validation, and execution logic\\n *      to eliminate code duplication across adapters\\n */\\nlibrary SwapExecutorV2 {\\n    /// @notice Error when swap data validation fails\\n    error InvalidSwapData();\\n\\n    /**\\n     * @notice Parameters for exact input swaps\\n     * @param inputToken The input token address\\n     * @param outputToken The output token address\\n     * @param exactInputAmount The exact amount of input tokens to spend\\n     * @param minOutputAmount The minimum amount of output tokens required\\n     * @param swapData Either regular Odos swap data or encoded PTSwapDataV2\\n     * @param pendleRouter The Pendle router address (for PT swaps)\\n     * @param odosRouter The Odos router address\\n     */\\n    struct ExactInputParams {\\n        address inputToken;\\n        address outputToken;\\n        uint256 exactInputAmount;\\n        uint256 minOutputAmount;\\n        bytes swapData;\\n        address pendleRouter;\\n        IOdosRouterV2 odosRouter;\\n    }\\n\\n    /**\\n     * @notice Parameters for exact output swaps\\n     * @param inputToken The input token address\\n     * @param outputToken The output token address\\n     * @param maxInputAmount The maximum amount of input tokens to spend\\n     * @param exactOutputAmount The exact amount of output tokens required\\n     * @param swapData Either regular Odos swap data or encoded PTSwapDataV2\\n     * @param pendleRouter The Pendle router address (for PT swaps)\\n     * @param odosRouter The Odos router address\\n     */\\n    struct ExactOutputParams {\\n        address inputToken;\\n        address outputToken;\\n        uint256 maxInputAmount;\\n        uint256 exactOutputAmount;\\n        bytes swapData;\\n        address pendleRouter;\\n        IOdosRouterV2 odosRouter;\\n    }\\n\\n    /**\\n     * @notice Executes exact input swap with automatic routing\\n     * @dev Determines swap type and routes to appropriate execution logic\\n     * @param params The exact input swap parameters\\n     * @return actualOutputAmount Actual amount of output tokens received\\n     */\\n    function executeSwapExactInput(\\n        ExactInputParams memory params\\n    ) internal returns (uint256 actualOutputAmount) {\\n        // Determine swap type using PendleSwapLogic\\n        ISwapTypes.SwapType swapType = PendleSwapLogic.determineSwapType(\\n            params.inputToken,\\n            params.outputToken\\n        );\\n\\n        if (swapType == ISwapTypes.SwapType.REGULAR_SWAP) {\\n            // Regular Odos swap - swapData should be raw Odos calldata\\n            return\\n                OdosSwapUtils.executeSwapOperation(\\n                    params.odosRouter,\\n                    params.inputToken,\\n                    params.outputToken,\\n                    params.exactInputAmount,\\n                    params.minOutputAmount,\\n                    params.swapData\\n                );\\n        }\\n\\n        // PT token involved - decode PTSwapDataV2 and use PendleSwapLogic\\n        PendleSwapLogic.PTSwapDataV2 memory ptSwapData = abi.decode(\\n            params.swapData,\\n            (PendleSwapLogic.PTSwapDataV2)\\n        );\\n\\n        if (!PendleSwapLogic.validatePTSwapData(ptSwapData)) {\\n            revert InvalidSwapData();\\n        }\\n\\n        if (swapType == ISwapTypes.SwapType.PT_TO_REGULAR) {\\n            // PT -> regular token\\n            return\\n                PendleSwapLogic.executePTToTargetSwap(\\n                    params.inputToken,\\n                    params.outputToken,\\n                    params.exactInputAmount,\\n                    params.minOutputAmount,\\n                    params.pendleRouter,\\n                    params.odosRouter,\\n                    ptSwapData\\n                );\\n        } else if (swapType == ISwapTypes.SwapType.REGULAR_TO_PT) {\\n            // Regular token -> PT\\n            return\\n                PendleSwapLogic.executeSourceToPTSwap(\\n                    params.inputToken,\\n                    params.outputToken,\\n                    params.exactInputAmount,\\n                    params.minOutputAmount,\\n                    params.pendleRouter,\\n                    params.odosRouter,\\n                    ptSwapData\\n                );\\n        } else if (swapType == ISwapTypes.SwapType.PT_TO_PT) {\\n            // PT -> PT (hybrid Odos + Pendle swap)\\n            return\\n                PendleSwapLogic.executePTToPTSwap(\\n                    params.inputToken,\\n                    params.outputToken,\\n                    params.exactInputAmount,\\n                    params.minOutputAmount,\\n                    params.pendleRouter,\\n                    params.odosRouter,\\n                    ptSwapData\\n                );\\n        } else {\\n            revert InvalidSwapData(); // Should never reach here\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes exact output swap with automatic routing\\n     * @dev Determines swap type and routes to appropriate execution logic\\n     * @param params The exact output swap parameters\\n     * @return actualInputAmount Actual amount of input tokens spent\\n     */\\n    function executeSwapExactOutput(\\n        ExactOutputParams memory params\\n    ) internal returns (uint256 actualInputAmount) {\\n        // Determine swap type using PendleSwapLogic\\n        ISwapTypes.SwapType swapType = PendleSwapLogic.determineSwapType(\\n            params.inputToken,\\n            params.outputToken\\n        );\\n\\n        if (swapType == ISwapTypes.SwapType.REGULAR_SWAP) {\\n            // Regular Odos swap - swapData should be raw Odos calldata\\n            return\\n                OdosSwapUtils.executeSwapOperation(\\n                    params.odosRouter,\\n                    params.inputToken,\\n                    params.outputToken,\\n                    params.maxInputAmount,\\n                    params.exactOutputAmount,\\n                    params.swapData\\n                );\\n        }\\n\\n        // PT token involved - decode PTSwapDataV2 and use PendleSwapLogic\\n        PendleSwapLogic.PTSwapDataV2 memory ptSwapData = abi.decode(\\n            params.swapData,\\n            (PendleSwapLogic.PTSwapDataV2)\\n        );\\n\\n        if (!PendleSwapLogic.validatePTSwapData(ptSwapData)) {\\n            revert InvalidSwapData();\\n        }\\n\\n        if (swapType == ISwapTypes.SwapType.PT_TO_REGULAR) {\\n            // PT -> regular token\\n            return\\n                PendleSwapLogic.executePTToTargetSwap(\\n                    params.inputToken,\\n                    params.outputToken,\\n                    params.maxInputAmount,\\n                    params.exactOutputAmount,\\n                    params.pendleRouter,\\n                    params.odosRouter,\\n                    ptSwapData\\n                );\\n        } else if (swapType == ISwapTypes.SwapType.REGULAR_TO_PT) {\\n            // Regular token -> PT\\n            return\\n                PendleSwapLogic.executeSourceToPTSwap(\\n                    params.inputToken,\\n                    params.outputToken,\\n                    params.maxInputAmount,\\n                    params.exactOutputAmount,\\n                    params.pendleRouter,\\n                    params.odosRouter,\\n                    ptSwapData\\n                );\\n        } else if (swapType == ISwapTypes.SwapType.PT_TO_PT) {\\n            // PT -> PT (hybrid Odos + Pendle swap)\\n            return\\n                PendleSwapLogic.executePTToPTSwap(\\n                    params.inputToken,\\n                    params.outputToken,\\n                    params.maxInputAmount,\\n                    params.exactOutputAmount,\\n                    params.pendleRouter,\\n                    params.odosRouter,\\n                    ptSwapData\\n                );\\n        } else {\\n            revert InvalidSwapData(); // Should never reach here\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbec56cd02628edf9c781a00eccb7802dea4366e22ecc39bed93e460a1ace3665\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/adapters/odos/interfaces/IBaseOdosAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC20WithPermit } from \\\"contracts/dlend/core/interfaces/IERC20WithPermit.sol\\\";\\n\\n/**\\n * @title IBaseOdosAdapter\\n * @notice Interface for the BaseOdosAdapter\\n */\\ninterface IBaseOdosAdapter {\\n    /* Events */\\n    /**\\n     * @dev Emitted when a token is bought on Odos\\n     * @param tokenIn The address of the token sold\\n     * @param tokenOut The address of the token bought\\n     * @param amountIn The amount of tokens sold\\n     * @param amountOut The amount of tokens bought\\n     */\\n    event Bought(address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /* Custom Errors */\\n    /**\\n     * @dev Thrown when the balance before swap is insufficient\\n     * @param balance The actual balance\\n     * @param required The required balance\\n     */\\n    error InsufficientBalanceBeforeSwap(uint256 balance, uint256 required);\\n\\n    /**\\n     * @dev Thrown when the output amount is less than the minimum expected\\n     * @param actual The actual output amount\\n     * @param expected The minimum expected output amount\\n     */\\n    error InsufficientOutputAmount(uint256 actual, uint256 expected);\\n\\n    /**\\n     * @dev Thrown when the caller is not the pool\\n     * @param caller The actual caller\\n     * @param pool The expected pool\\n     */\\n    error CallerMustBePool(address caller, address pool);\\n\\n    /**\\n     * @dev Thrown when the initiator is not the expected initiator\\n     * @param initiator The actual initiator\\n     * @param expectedInitiator The expected initiator\\n     */\\n    error InitiatorMustBeThis(address initiator, address expectedInitiator);\\n\\n    /**\\n     * @dev Struct to hold permit data\\n     * @param aToken The aToken contract with permit functionality\\n     * @param value The amount of tokens to permit\\n     * @param deadline The deadline for the permit\\n     * @param v The v parameter of the signature\\n     * @param r The r parameter of the signature\\n     * @param s The s parameter of the signature\\n     */\\n    struct PermitInput {\\n        IERC20WithPermit aToken;\\n        uint256 value;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n}\\n\",\"keccak256\":\"0xcdb999cbe939588c5fc8e6decb52ddd966b220734acdc491890ce39e4c140a71\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/adapters/odos/interfaces/IBaseOdosAdapterV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20WithPermit} from \\\"contracts/dlend/core/interfaces/IERC20WithPermit.sol\\\";\\n\\nimport {IBaseOdosAdapter} from \\\"./IBaseOdosAdapter.sol\\\";\\n\\n/**\\n * @title IBaseOdosAdapterV2\\n * @notice Interface for the BaseOdosAdapterV2 with PT token support\\n */\\ninterface IBaseOdosAdapterV2 is IBaseOdosAdapter {\\n    /* Custom Errors */\\n    /**\\n     * @dev Thrown when PT swap data is invalid\\n     */\\n    error InvalidPTSwapData();\\n\\n    /**\\n     * @dev Thrown when Pendle swap fails\\n     * @param reason The failure reason\\n     */\\n    error PendleSwapFailed(string reason);\\n\\n    /**\\n     * @dev Thrown when Odos swap fails\\n     * @param reason The failure reason\\n     */\\n    error OdosSwapFailed(string reason);\\n\\n    /**\\n     * @dev Thrown when insufficient output is received after composed swap\\n     * @param expected The expected amount\\n     * @param actual The actual amount received\\n     */\\n    error InsufficientOutputAfterComposedSwap(uint256 expected, uint256 actual);\\n\\n    /**\\n     * @dev Thrown when leftover collateral remains after exact input swap\\n     * @param asset The collateral asset address\\n     * @param leftoverAmount The amount of leftover collateral\\n     */\\n    error LeftoverCollateralAfterSwap(address asset, uint256 leftoverAmount);\\n\\n    /**\\n     * @dev Thrown when oracle price validation fails (deviation > tolerance)\\n     * @param tokenIn The input token address\\n     * @param tokenOut The output token address\\n     * @param expectedAmount The oracle-calculated expected amount\\n     * @param actualAmount The swap parameter amount\\n     * @param deviationBps The actual deviation in basis points\\n     */\\n    error OraclePriceDeviationExceeded(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 expectedAmount,\\n        uint256 actualAmount,\\n        uint256 deviationBps\\n    );\\n\\n    /* Structs intentionally omitted to avoid duplication with PTSwapUtils */\\n}\\n\",\"keccak256\":\"0x3f6ab073513858c26e43cc065027d651b9d5dee83b96e742666cd62614606e17\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/adapters/odos/interfaces/IOdosRepayAdapterV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBaseOdosAdapterV2} from \\\"./IBaseOdosAdapterV2.sol\\\";\\n\\n/**\\n * @title IOdosRepayAdapterV2\\n * @notice Interface for the OdosRepayAdapterV2 with PT token support\\n */\\ninterface IOdosRepayAdapterV2 is IBaseOdosAdapterV2 {\\n    /**\\n     * @dev Custom error for insufficient amount to repay\\n     * @param amountReceived The amount received from the swap\\n     * @param amountToRepay The amount needed to repay\\n     */\\n    error InsufficientAmountToRepay(\\n        uint256 amountReceived,\\n        uint256 amountToRepay\\n    );\\n\\n    /**\\n     * @dev Struct for repay parameters with PT token support\\n     * @param collateralAsset The address of the collateral asset\\n     * @param collateralAmount The amount of collateral to swap\\n     * @param debtAsset The address of the debt asset\\n     * @param repayAmount The amount of debt to repay\\n     * @param rateMode The rate mode of the debt (1 = stable, 2 = variable)\\n     * @param withFlashLoan true if flashloan is needed to repay the debt, otherwise false\\n     * @param user The address of the user\\n     * @param minAmountToReceive The minimum amount to receive from the swap\\n     * @param swapData The encoded swap data (either regular Odos data or PTSwapDataV2)\\n     * @param allBalanceOffset offset to all balance of the user\\n     */\\n    struct RepayParamsV2 {\\n        address collateralAsset;\\n        uint256 collateralAmount;\\n        address debtAsset;\\n        uint256 repayAmount;\\n        uint256 rateMode;\\n        bool withFlashLoan;\\n        address user;\\n        uint256 minAmountToReceive;\\n        bytes swapData;\\n        uint256 allBalanceOffset;\\n    }\\n\\n    /**\\n     * @notice Repays with collateral by swapping the collateral asset to debt asset\\n     * @param repayParams struct describing the repay with collateral swap\\n     * @param collateralATokenPermit optional permit for collateral aToken\\n     */\\n    function repayWithCollateral(\\n        RepayParamsV2 memory repayParams,\\n        PermitInput memory collateralATokenPermit\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0adf18ce794137e8b0bda207af7d56ca281fa0a90b9bab5af39e16ea87cad352\",\"license\":\"AGPL-3.0\"},\"contracts/dlend/periphery/adapters/odos/interfaces/ISwapTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ISwapTypes\\n * @notice Interface defining swap strategy types used across V2 adapters\\n * @dev Centralizes swap type definitions for consistency across contracts\\n */\\ninterface ISwapTypes {\\n    /**\\n     * @notice Enumeration of supported swap strategies\\n     * @dev Used by PTSwapUtils.determineSwapType() to route swap execution\\n     */\\n    enum SwapType {\\n        REGULAR_SWAP, // 0: Regular ERC20 \\u2192 ERC20 (Odos only)\\n        PT_TO_REGULAR, // 1: PT \\u2192 underlying \\u2192 ERC20 (Pendle + Odos)\\n        REGULAR_TO_PT, // 2: ERC20 \\u2192 ERC20 \\u2192 PT (Odos + Pendle)\\n        PT_TO_PT // 3: PT \\u2192 PT (Pendle only)\\n    }\\n}\\n\",\"keccak256\":\"0x55f9a3a582553ca4f06269bb27b8c02a4d4832c464bae833fb7def7e526aab5f\",\"license\":\"BUSL-1.1\"},\"contracts/dlend/periphery/dependencies/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xad48164cca6efe6dffdeb761121cfd3a2ac01a64d1dd8e635e1a42107b730e6b\",\"license\":\"MIT\"},\"contracts/odos/OdosSwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interface/IOdosRouterV2.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title OdosSwapUtils\\n * @notice Library for handling Odos swaps in liquidator contracts\\n */\\nlibrary OdosSwapUtils {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Custom error for failed swap with no revert reason\\n    error SwapFailed();\\n    /// @notice Custom error when actual output amount is less than expected\\n    error InsufficientOutput(uint256 expected, uint256 actual);\\n\\n    /**\\n     * @notice Performs a swap operation using Odos router with swap data\\n     * @param router Odos router contract\\n     * @param inputToken Input token address\\n     * @param outputToken Output token address\\n     * @param maxIn Maximum input amount\\n     * @param exactOut Exact output amount expected\\n     * @param swapData Encoded swap path data\\n     * @return actualAmountSpent The actual amount of input tokens spent\\n     */\\n    function executeSwapOperation(\\n        IOdosRouterV2 router,\\n        address inputToken,\\n        address outputToken,\\n        uint256 maxIn,\\n        uint256 exactOut,\\n        bytes memory swapData\\n    ) internal returns (uint256 actualAmountSpent) {\\n        uint256 outputBalanceBefore = IERC20(outputToken).balanceOf(address(this));\\n\\n        // Use SafeERC20.forceApprove for external DEX router integration\\n        SafeERC20.forceApprove(IERC20(inputToken), address(router), maxIn);\\n\\n        (bool success, bytes memory result) = address(router).call(swapData);\\n        if (!success) {\\n            if (result.length > 0) {\\n                assembly {\\n                    let resultLength := mload(result)\\n                    revert(add(32, result), resultLength)\\n                }\\n            }\\n            revert SwapFailed();\\n        }\\n\\n        assembly {\\n            actualAmountSpent := mload(add(result, 32))\\n        }\\n\\n        uint256 outputBalanceAfter = IERC20(outputToken).balanceOf(address(this));\\n        uint256 actualAmountReceived = outputBalanceAfter - outputBalanceBefore;\\n\\n        if (actualAmountReceived < exactOut) {\\n            revert InsufficientOutput(exactOut, actualAmountReceived);\\n        }\\n\\n        // Reset approval to 0 after swap\\n        IERC20(inputToken).approve(address(router), 0);\\n\\n        return actualAmountSpent;\\n    }\\n}\\n\",\"keccak256\":\"0xb573842f3c9e3bcc55cdc46826f5c3aa21ac9441d14092281da8fe159de9a979\",\"license\":\"GNU AGPLv3\"},\"contracts/odos/interface/IOdosRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\n/**\\n * @dev Interface for Odos Router V2.\\n * @dev Generated from original ABI: https://fraxscan.com/address/0x56c85a254dd12ee8d9c04049a4ab62769ce98210#code\\n */\\npragma solidity ^0.8.20;\\n\\ninterface IOdosRouterV2 {\\n    struct swapTokenInfo {\\n        address inputToken;\\n        uint256 inputAmount;\\n        address inputReceiver;\\n        address outputToken;\\n        uint256 outputQuote;\\n        uint256 outputMin;\\n        address outputReceiver;\\n    }\\n\\n    struct inputTokenInfo {\\n        address tokenAddress;\\n        uint256 amountIn;\\n        address receiver;\\n    }\\n\\n    struct outputTokenInfo {\\n        address tokenAddress;\\n        uint256 relativeValue;\\n        address receiver;\\n    }\\n\\n    struct permit2Info {\\n        address contractAddress;\\n        uint256 nonce;\\n        uint256 deadline;\\n        bytes signature;\\n    }\\n\\n    event Swap(\\n        address sender,\\n        uint256 inputAmount,\\n        address inputToken,\\n        uint256 amountOut,\\n        address outputToken,\\n        int256 slippage,\\n        uint32 referralCode\\n    );\\n\\n    event SwapMulti(\\n        address sender,\\n        uint256[] amountsIn,\\n        address[] tokensIn,\\n        uint256[] amountsOut,\\n        address[] tokensOut,\\n        uint32 referralCode\\n    );\\n\\n    function FEE_DENOM() external view returns (uint256);\\n\\n    function REFERRAL_WITH_FEE_THRESHOLD() external view returns (uint256);\\n\\n    function addressList(uint256) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function referralLookup(uint32) external view returns (uint64 referralFee, address beneficiary, bool registered);\\n\\n    function registerReferralCode(uint32 _referralCode, uint64 _referralFee, address _beneficiary) external;\\n\\n    function renounceOwnership() external;\\n\\n    function setSwapMultiFee(uint256 _swapMultiFee) external;\\n\\n    function swap(\\n        swapTokenInfo calldata tokenInfo,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapCompact() external payable returns (uint256);\\n\\n    function swapMulti(\\n        inputTokenInfo[] calldata inputs,\\n        outputTokenInfo[] calldata outputs,\\n        uint256 valueOutMin,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external payable returns (uint256[] memory amountsOut);\\n\\n    function swapMultiCompact() external payable returns (uint256[] memory amountsOut);\\n\\n    function swapMultiFee() external view returns (uint256);\\n\\n    function swapMultiPermit2(\\n        permit2Info calldata permit2,\\n        inputTokenInfo[] calldata inputs,\\n        outputTokenInfo[] calldata outputs,\\n        uint256 valueOutMin,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external payable returns (uint256[] memory amountsOut);\\n\\n    function swapPermit2(\\n        permit2Info calldata permit2,\\n        swapTokenInfo calldata tokenInfo,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external returns (uint256 amountOut);\\n\\n    function swapRouterFunds(\\n        inputTokenInfo[] calldata inputs,\\n        outputTokenInfo[] calldata outputs,\\n        uint256 valueOutMin,\\n        bytes calldata pathDefinition,\\n        address executor\\n    ) external returns (uint256[] memory amountsOut);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function transferRouterFunds(address[] calldata tokens, uint256[] calldata amounts, address dest) external;\\n\\n    function writeAddressList(address[] calldata addresses) external;\\n\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0xd149282db59678f36fbf505acfe4f0b7c4764ddabb55cef93937e78d611e658d\",\"license\":\"MIT\"},\"contracts/pendle/PendleSwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.20;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title PendleSwapUtils\\n * @notice Library for handling Pendle PT token swaps using SDK-generated transaction data\\n * @dev This library executes pre-computed transaction data from Pendle's hosted SDK\\n */\\nlibrary PendleSwapUtils {\\n    using SafeERC20 for ERC20;\\n\\n    /// @notice Custom error for failed Pendle swap with no revert reason\\n    error PendleSwapFailed();\\n    /// @notice Custom error when PT token approval fails\\n    error PTApprovalFailed();\\n\\n    /**\\n     * @notice Executes a generic Pendle swap operation using SDK-generated transaction data\\n     * @dev Pendle router treats all tokens equally - PT, underlying, or any other ERC20\\n     * @param tokenIn The input token being swapped\\n     * @param tokenOut The output token being received  \\n     * @param amountIn Amount of input tokens to swap\\n     * @param router Pendle router contract address from Pendle SDK\\n     * @param swapData Transaction data from Pendle SDK\\n     * @return amountOut Actual amount of output tokens received\\n     */\\n    function swapExactInput(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address router,\\n        bytes memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        // Record output balance before swap\\n        uint256 outputBalanceBefore = ERC20(tokenOut).balanceOf(address(this));\\n\\n        // Execute swap with approval handling\\n        _executeWithApproval(tokenIn, amountIn, router, swapData);\\n\\n        // Calculate actual tokens received using balance difference\\n        uint256 outputBalanceAfter = ERC20(tokenOut).balanceOf(address(this));\\n        amountOut = outputBalanceAfter - outputBalanceBefore;\\n\\n        return amountOut;\\n    }\\n\\n    /**\\n     * @notice Shared utility for Pendle router execution with approval handling\\n     * @param inputToken Token to approve and potentially spend\\n     * @param inputAmount Amount to approve\\n     * @param router Pendle router contract address\\n     * @param swapData Transaction data from Pendle SDK\\n     * @return result The return data from the router call\\n     */\\n    function _executeWithApproval(\\n        address inputToken,\\n        uint256 inputAmount,\\n        address router,\\n        bytes memory swapData\\n    ) private returns (bytes memory result) {\\n        // Approve input tokens to Pendle router\\n        SafeERC20.forceApprove(ERC20(inputToken), router, inputAmount);\\n\\n        // Check if approval was successful\\n        uint256 currentAllowance = ERC20(inputToken).allowance(address(this), router);\\n        if (currentAllowance < inputAmount) {\\n            revert PTApprovalFailed();\\n        }\\n\\n        // Execute Pendle swap using shared utility\\n        bool success;\\n        (success, result) = executePendleCall(router, swapData);\\n        \\n        if (!success) {\\n            revert PendleSwapFailed();\\n        }\\n\\n        // Reset approval to 0 after swap to avoid potential exploits\\n        ERC20(inputToken).approve(router, 0);\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Executes generic Pendle swap with arbitrary calldata\\n     * @param router Pendle router contract address\\n     * @param swapData Transaction data from Pendle SDK\\n     * @return success Whether the swap was successful\\n     * @return result The return data from the swap\\n     */\\n    function executePendleCall(\\n        address router,\\n        bytes memory swapData\\n    ) internal returns (bool success, bytes memory result) {\\n        // Execute Pendle router call\\n        (success, result) = router.call(swapData);\\n        \\n        if (!success && result.length > 0) {\\n            // Bubble up revert reason\\n            assembly {\\n                let resultLength := mload(result)\\n                revert(add(32, result), resultLength)\\n            }\\n        }\\n        \\n        return (success, result);\\n    }\\n}\\n\",\"keccak256\":\"0x193449354a04099f6d592838d60a2ddd0e7e1bcd57f663b79602658735016484\",\"license\":\"GNU AGPLv3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b35760003560e01c80638035786211610071578063803578621461017a5780638321928d146101915780638da5cb5b146101b8578063920f5c84146101c9578063c0560374146101ec578063f2fde38b1461020857600080fd5b8062ae3bf8146100b85780630542975c146100cd578063206aeab314610111578063395c0b6814610138578063715018a61461014b5780637535d24614610153575b600080fd5b6100cb6100c6366004612e86565b61021b565b005b6100f47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f47f000000000000000000000000000000000000000000000000000000000000000081565b6100cb61014636600461309f565b6102df565b6100cb6105a7565b6100f47f000000000000000000000000000000000000000000000000000000000000000081565b6101836101f481565b604051908152602001610108565b6100f47f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03166100f4565b6101dc6101d73660046131e1565b61061b565b6040519015158152602001610108565b6101f561abce81565b60405161ffff9091168152602001610108565b6100cb610216366004612e86565b610971565b6000546001600160a01b0316331461024e5760405162461bcd60e51b8152600401610245906132e6565b60405180910390fd5b6102dc6102636000546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa1580156102a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cb919061331b565b6001600160a01b0384169190610a5b565b50565b6002600154036103315760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610245565b600260018190555061035b8260400151836080015184610120015185606001518660c00151610ac3565b606083015260a08201516105955781516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d5919061331b565b905060006103f184600001518560c00151866020015186610bc7565b905061041184600001518560400151838760600151886101000151610e2c565b506104248460400151856060015161102d565b6040808501516060860151608087015160c0880151935163573ade8160e01b81526001600160a01b0393841660048201526024810192909252604482015291811660648301527f0000000000000000000000000000000000000000000000000000000000000000169063573ade81906084016020604051808303816000875af11580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d9919061331b565b5083516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610522573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610546919061331b565b90506000838211610558576000610562565b610562848361334a565b9050801561058c578551610576908261102d565b61058c8660000151828860c0015161abce611101565b5050505061059f565b61059f828261119b565b505060018055565b6000546001600160a01b031633146105d15760405162461bcd60e51b8152600401610245906132e6565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610697576040516303c3463f60e31b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401610245565b6001600160a01b03841630146106d15760405163fdbc12a560e01b81526001600160a01b0385166004820152306024820152604401610245565b6000806106e08486018661309f565b9150915060008c8c60008181106106f9576106f961335d565b905060200201602081019061070e9190612e86565b905060008b8b60008181106107255761072561335d565b90506020020135905060008a8a60008181106107435761074361335d565b6040516370a0823160e01b81523060048201526020909102929092013592506000916001600160a01b03861691506370a0823190602401602060405180830381865afa158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb919061331b565b90506107d78487604001518589606001518a6101000151610e2c565b506107ea8660400151876060015161102d565b6040808701516060880151608089015160c08a0151935163573ade8160e01b81526001600160a01b0393841660048201526024810192909252604482015291811660648301527f0000000000000000000000000000000000000000000000000000000000000000169063573ade81906084016020604051808303816000875af115801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f919061331b565b506040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b919061331b565b9050600081831161091d576000610927565b610927828461334a565b9050610944868960c00151838761093e9190613373565b8a610bc7565b50610958866109538688613373565b61102d565b6001985050505050505050509998505050505050505050565b6000546001600160a01b0316331461099b5760405162461bcd60e51b8152600401610245906132e6565b6001600160a01b038116610a005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610245565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6040516001600160a01b038316602482015260448101829052610abe90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261132e565b505050565b6000806000610ad188611400565b50909250905060006001886002811115610aed57610aed613386565b6002811115610afe57610afe613386565b14610b095782610b0b565b815b6040516370a0823160e01b81526001600160a01b0387811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7b919061331b565b90508715610b8b57809650610bb6565b80871115610bb657604051630210019560e61b81526004810182905260248101889052604401610245565b869450505050505b95945050505050565b60008160400151600014610c7957815160208301516040808501516060860151608087015160a0880151935163d505accf60e01b81526001600160a01b038b811660048301523060248301526044820196909652606481019390935260ff909116608483015260a482015260c481019190915291169063d505accf9060e401600060405180830381600087803b158015610c6057600080fd5b505af1158015610c74573d6000803e3d6000fd5b505050505b6000610c8486611400565b6040516370a0823160e01b8152306004820152909350600092506001600160a01b03841691506370a0823190602401602060405180830381865afa158015610cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf4919061331b565b9050610d0b6001600160a01b0383168730886114b4565b6040516370a0823160e01b815230600482015260009082906001600160a01b038516906370a0823190602401602060405180830381865afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d78919061331b565b610d82919061334a565b604051631a4ca37b60e21b81526001600160a01b038a81166004830152602482018390523060448301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec906064016020604051808303816000875af1158015610dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e20919061331b565b50979650505050505050565b60008585610e3c828288886114f2565b6000610e488383611823565b90506000816003811115610e5e57610e5e613386565b03610e7a57610e70838389898961189f565b9350505050610bbe565b6040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a0823190602401602060405180830381865afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee5919061331b565b905087811015610f125760405163b6554a4960e01b81526004810182905260248101899052604401610245565b6000610f2185858b8b8b6118d9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038d16906370a0823190602401602060405180830381865afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f919061331b565b905080831015610fbc5760405163b6554a4960e01b81526004810184905260248101829052604401610245565b610fc6818461334a565b9650846001600160a01b0316866001600160a01b03167fbf77fd13a39d14dc0da779342c14105c38d9a5d0c60f2caa22f5fd1d5525416d8985604051611016929190918252602082015260400190565b60405180910390a350505050505095945050505050565b604051636eb1769f60e11b81523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526000919084169063dd62ed3e90604401602060405180830381865afa15801561109d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c1919061331b565b905081811015610abe57610abe6001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000060001961197a565b60405163617ba03760e01b81526001600160a01b03858116600483015260248201859052838116604483015261ffff831660648301527f0000000000000000000000000000000000000000000000000000000000000000169063617ba03790608401600060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b5050505050505050565b600082826040516020016111b09291906133ec565b60408051601f198184030181526001808452838301909252925060009190602080830190803683370190505090508360000151816000815181106111f6576111f661335d565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905084602001518160008151811061124b5761124b61335d565b602090810291909101015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061128f5761128f61335d565b602090810291909101015260405163ab9c4b5d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ab9c4b5d906112f490309087908790879084908c9061abce9060040161352c565b600060405180830381600087803b15801561130e57600080fd5b505af1158015611322573d6000803e3d6000fd5b50505050505050505050565b6000611383826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a8f9092919063ffffffff16565b805190915015610abe57808060200190518101906113a191906135dc565b610abe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610245565b6040516335ea6a7560e01b81526001600160a01b0382811660048301526000918291829182917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016101e060405180830381865afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611494919061368d565b610140810151610120820151610100909201519097919650945092505050565b6040516001600160a01b03808516602483015283166044820152606481018290526114ec9085906323b872dd60e01b90608401610a87565b50505050565b826001600160a01b0316846001600160a01b031603156114ec5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561156c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159091906137b0565b60405163b3596f0760e01b81526001600160a01b03878116600483015291925060009183169063b3596f0790602401602060405180830381865afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611600919061331b565b60405163b3596f0760e01b81526001600160a01b03878116600483015291925060009184169063b3596f0790602401602060405180830381865afa15801561164c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611670919061331b565b905081158061167d575080155b1561168a575050506114ec565b6000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee91906137cd565b60ff1690506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611733573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175791906137cd565b60ff169050600061176982600a6138ce565b61177390866138da565b61177e84600a6138ce565b611788868a6138da565b61179291906138da565b61179c91906138f1565b905080881115611322576000816117b3818b61334a565b6117bf906127106138da565b6117c991906138f1565b90506101f4811115611816576040516389cbb84760e01b81526001600160a01b03808d1660048301528b16602482015260448101839052606481018a90526084810182905260a401610245565b5050505050505050505050565b60008061182f84611aa8565b509050600061183d84611aa8565b5090508115801561184c575080155b1561185c57600092505050611899565b818015611867575080155b1561187757600192505050611899565b811580156118825750805b1561189257600292505050611899565b6003925050505b92915050565b60006118cf7f00000000000000000000000000000000000000000000000000000000000000008787878787611bb9565b9695505050505050565b60006118cf6040518060e00160405280886001600160a01b03168152602001876001600160a01b031681526020018681526020018581526020018481526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316815250611df4565b8015806119f45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f2919061331b565b155b611a5f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610245565b6040516001600160a01b038316602482015260448101829052610abe90849063095ea7b360e01b90606401610a87565b6060611a9e8484600085611f6d565b90505b9392505050565b60408051600481526024810182526020810180516001600160e01b031663afd27bf560e01b17905290516000918291829182916001600160a01b03871691611aef91613913565b600060405180830381855afa9150503d8060008114611b2a576040519150601f19603f3d011682016040523d82523d6000602084013e611b2f565b606091505b5091509150818015611b42575080516020145b15611bb25780806020019051810190611b5b91906137b0565b6001600160a01b0381161580159550909350611bb257826001600160a01b0316856001600160a01b03167f1e5361486115d03329d5743ec247b6eae9b1d6af9aad63d1a1f05e84e20b432460405160405180910390a35b5050915091565b6040516370a0823160e01b815230600482015260009081906001600160a01b038716906370a0823190602401602060405180830381865afa158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c26919061331b565b9050611c33878987612095565b600080896001600160a01b031685604051611c4e9190613913565b6000604051808303816000865af19150503d8060008114611c8b576040519150601f19603f3d011682016040523d82523d6000602084013e611c90565b606091505b509150915081611cc357805115611caa5780518082602001fd5b60405163081ceff360e41b815260040160405180910390fd5b60208101516040516370a0823160e01b81523060048201529094506000906001600160a01b038a16906370a0823190602401602060405180830381865afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d36919061331b565b90506000611d44858361334a565b905087811015611d7157604051630583371760e31b81526004810189905260248101829052604401610245565b60405163095ea7b360e01b81526001600160a01b038d81166004830152600060248301528c169063095ea7b3906044016020604051808303816000875af1158015611dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de491906135dc565b5050505050509695505050505050565b600080611e0983600001518460200151611823565b90506000816003811115611e1f57611e1f613386565b03611e4a57611aa18360c0015184600001518560200151866040015187606001518860800151611bb9565b60008360800151806020019051810190611e649190613974565b9050611e6f81612149565b611e8c5760405163b204669b60e01b815260040160405180910390fd5b6001826003811115611ea057611ea0613386565b03611ed457611ecc84600001518560200151866040015187606001518860a001518960c001518761217a565b949350505050565b6002826003811115611ee857611ee8613386565b03611f1457611ecc84600001518560200151866040015187606001518860a001518960c0015187612293565b6003826003811115611f2857611f28613386565b03611f5457611ecc84600001518560200151866040015187606001518860a001518960c0015187612615565b60405163b204669b60e01b815260040160405180910390fd5b606082471015611fce5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610245565b843b61201c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610245565b600080866001600160a01b031685876040516120389190613913565b60006040518083038185875af1925050503d8060008114612075576040519150601f19603f3d011682016040523d82523d6000602084013e61207a565b606091505b509150915061208a828286612961565b979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526120e6848261299a565b6114ec57604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261213f9085906129e4565b6114ec84826129e4565b805160009061215d57506060015151151590565b81604001515160000361217257506000919050565b506001919050565b80516000901580612196575060208201516001600160a01b0316155b156121b45760405163205544d760e11b815260040160405180910390fd5b60006121cb89888560200151888760400151612a55565b9050876001600160a01b031683602001516001600160a01b0316036121f257809150612231565b8260600151516000036122185760405163205544d760e11b815260040160405180910390fd5b61222e8484602001518a848a8860600151611bb9565b91505b876001600160a01b0316896001600160a01b03167f82494e43b53e197c30b1d5d35cf1c20c1e5d45885b1a8aa61f457a9dd5e7c364898560405161227f929190918252602082015260400190565b60405180910390a350979650505050505050565b805160009015806122af575060208201516001600160a01b0316155b156122cd5760405163205544d760e11b815260040160405180910390fd5b600082602001516001600160a01b0316896001600160a01b0316036122f357508561248c565b8260600151516000036123195760405163205544d760e11b815260040160405180910390fd5b60208301516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612364573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612388919061331b565b90506123a1858b86602001518b60008960600151611bb9565b60208501516040516370a0823160e01b81523060048201529193506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156123f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612415919061331b565b90506000612423838361334a565b90508060000361248857604051631300105360e01b815260206004820152602960248201527f4f646f7320737761702072657475726e6564207a65726f20756e6465726c79696044820152686e6720746f6b656e7360b81b6064820152608401610245565b5050505b60208301516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156124d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fb919061331b565b905081811015612528576040516305be2c3160e21b81526004810183905260248101829052604401610245565b61253d84602001518a84898860400151612b9a565b92508683101561256a5760405163223b57c760e21b81526004810188905260248101849052604401610245565b886001600160a01b031684602001516001600160a01b0316600080516020613a3f83398151915284866040516125aa929190918252602082015260400190565b60405180910390a3886001600160a01b03168a6001600160a01b03167f82494e43b53e197c30b1d5d35cf1c20c1e5d45885b1a8aa61f457a9dd5e7c3648a86604051612600929190918252602082015260400190565b60405180910390a35050979650505050505050565b60008061262189611aa8565b509050600061262f89611aa8565b50905081158061263d575080155b15612666576040516303c4074b60e21b81526001600160a01b038b166004820152602401610245565b8351158061267f575060208401516001600160a01b0316155b8061268d5750606084015151155b8061269b5750604084015151155b156126b95760405163205544d760e11b815260040160405180910390fd5b60208401516040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015612708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272c919061331b565b9050612745878d88602001518d60008b60600151611bb9565b5060208601516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b5919061331b565b90506127c1828261334a565b925050508060000361282b57604051631300105360e01b815260206004820152602c60248201527f4f646f7320505420737761702072657475726e6564207a65726f20756e64657260448201526b6c79696e6720746f6b656e7360a01b6064820152608401610245565b84602001516001600160a01b03168b6001600160a01b0316600080516020613a3f8339815191528b8460405161286b929190918252602082015260400190565b60405180910390a361288885602001518b838a8960400151612b9a565b9350878410156128b55760405163223b57c760e21b81526004810189905260248101859052604401610245565b896001600160a01b031685602001516001600160a01b0316600080516020613a3f83398151915283876040516128f5929190918252602082015260400190565b60405180910390a3896001600160a01b03168b6001600160a01b03167f82494e43b53e197c30b1d5d35cf1c20c1e5d45885b1a8aa61f457a9dd5e7c3648b8760405161294b929190918252602082015260400190565b60405180910390a3505050979650505050505050565b60608315612970575081611aa1565b8251156129805782518084602001fd5b8160405162461bcd60e51b81526004016102459190613a2b565b6000806000806020600086516020880160008a5af192503d915060005190508280156118cf575081156129d057806001146118cf565b50505050506001600160a01b03163b151590565b600080602060008451602086016000885af180612a07576040513d6000823e3d81fd5b50506000513d91508115612a1f578060011415612a2c565b6001600160a01b0384163b155b156114ec57604051635274afe760e01b81526001600160a01b0385166004820152602401610245565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a0823190602401602060405180830381865afa158015612a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac2919061331b565b9050612ad18786888787612b9a565b506040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa158015612b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3d919061331b565b9050612b49828261334a565b9250856001600160a01b0316886001600160a01b0316600080516020613a3f8339815191528986604051612b87929190918252602082015260400190565b60405180910390a3505095945050505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038716906370a0823190602401602060405180830381865afa158015612be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c07919061331b565b9050612c1587868686612c99565b506040516370a0823160e01b81523060048201526000906001600160a01b038816906370a0823190602401602060405180830381865afa158015612c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c81919061331b565b9050612c8d828261334a565b98975050505050505050565b6060612ca6858486612095565b604051636eb1769f60e11b81523060048201526001600160a01b0384811660248301526000919087169063dd62ed3e90604401602060405180830381865afa158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a919061331b565b905084811015612d3d5760405163a7ed3d5f60e01b815260040160405180910390fd5b6000612d498585612de9565b9350905080612d6b57604051630fe7fe8560e01b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b0386811660048301526000602483015288169063095ea7b3906044016020604051808303816000875af1158015612dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dde91906135dc565b505050949350505050565b60006060836001600160a01b031683604051612e059190613913565b6000604051808303816000865af19150503d8060008114612e42576040519150601f19603f3d011682016040523d82523d6000602084013e612e47565b606091505b50909250905081158015612e5c575060008151115b15612e6a5780518082602001fd5b9250929050565b6001600160a01b03811681146102dc57600080fd5b600060208284031215612e9857600080fd5b8135611aa181612e71565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715612edd57612edd612ea3565b60405290565b6040516101e0810167ffffffffffffffff81118282101715612edd57612edd612ea3565b6040516080810167ffffffffffffffff81118282101715612edd57612edd612ea3565b604051601f8201601f1916810167ffffffffffffffff81118282101715612f5357612f53612ea3565b604052919050565b8035612f6681612e71565b919050565b80151581146102dc57600080fd5b8035612f6681612f6b565b600067ffffffffffffffff821115612f9e57612f9e612ea3565b50601f01601f191660200190565b600082601f830112612fbd57600080fd5b8135612fd0612fcb82612f84565b612f2a565b818152846020838601011115612fe557600080fd5b816020850160208301376000918101602001919091529392505050565b60ff811681146102dc57600080fd5b600060c0828403121561302357600080fd5b60405160c0810181811067ffffffffffffffff8211171561304657613046612ea3565b604052905080823561305781612e71565b808252506020830135602082015260408301356040820152606083013561307d81613002565b806060830152506080830135608082015260a083013560a08201525092915050565b60008060e083850312156130b257600080fd5b823567ffffffffffffffff808211156130ca57600080fd5b9084019061014082870312156130df57600080fd5b6130e7612eb9565b6130f083612f5b565b81526020830135602082015261310860408401612f5b565b6040820152606083013560608201526080830135608082015261312d60a08401612f79565b60a082015261313e60c08401612f5b565b60c082015260e083013560e0820152610100808401358381111561316157600080fd5b61316d89828701612fac565b828401525050610120915081830135828201528094505050506131938460208501613011565b90509250929050565b60008083601f8401126131ae57600080fd5b50813567ffffffffffffffff8111156131c657600080fd5b6020830191508360208260051b8501011115612e6a57600080fd5b600080600080600080600080600060a08a8c0312156131ff57600080fd5b893567ffffffffffffffff8082111561321757600080fd5b6132238d838e0161319c565b909b50995060208c013591508082111561323c57600080fd5b6132488d838e0161319c565b909950975060408c013591508082111561326157600080fd5b61326d8d838e0161319c565b909750955060608c0135915061328282612e71565b90935060808b0135908082111561329857600080fd5b818c0191508c601f8301126132ac57600080fd5b8135818111156132bb57600080fd5b8d60208285010111156132cd57600080fd5b6020830194508093505050509295985092959850929598565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561332d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561189957611899613334565b634e487b7160e01b600052603260045260246000fd5b8082018082111561189957611899613334565b634e487b7160e01b600052602160045260246000fd5b60005b838110156133b757818101518382015260200161339f565b50506000910152565b600081518084526133d881602086016020860161339c565b601f01601f19169290920160200192915050565b60e0815261340660e0820184516001600160a01b03169052565b60006020840151610100818185015260408601519150610120613433818601846001600160a01b03169052565b606087015161014086810191909152608088015161016087015260a0880151151561018087015260c08801516001600160a01b03166101a087015260e08801516101c0870152828801516101e087019190915292506134966102208601846133c0565b908701516102008601529250611aa1915050602083018480516001600160a01b03168252602080820151908301526040808201519083015260608082015160ff16908301526080808201519083015260a090810151910152565b60008151808452602080850194506020840160005b8381101561352157815187529582019590820190600101613505565b509495945050505050565b6001600160a01b03888116825260e0602080840182905289519184018290526000928a820192909190610100860190855b8181101561357b57855185168352948301949183019160010161355d565b5050858103604087015261358f818c6134f0565b935050505082810360608401526135a681886134f0565b6001600160a01b0387166080850152905082810360a08401526135c981866133c0565b915050612c8d60c083018461ffff169052565b6000602082840312156135ee57600080fd5b8151611aa181612f6b565b60006020828403121561360b57600080fd5b6040516020810181811067ffffffffffffffff8211171561362e5761362e612ea3565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff81168114612f6657600080fd5b805164ffffffffff81168114612f6657600080fd5b805161ffff81168114612f6657600080fd5b8051612f6681612e71565b60006101e082840312156136a057600080fd5b6136a8612ee3565b6136b284846135f9565b81526136c06020840161363b565b60208201526136d16040840161363b565b60408201526136e26060840161363b565b60608201526136f36080840161363b565b608082015261370460a0840161363b565b60a082015261371560c0840161365b565b60c082015261372660e08401613670565b60e0820152610100613739818501613682565b9082015261012061374b848201613682565b9082015261014061375d848201613682565b9082015261016061376f848201613682565b9082015261018061378184820161363b565b908201526101a061379384820161363b565b908201526101c06137a584820161363b565b908201529392505050565b6000602082840312156137c257600080fd5b8151611aa181612e71565b6000602082840312156137df57600080fd5b8151611aa181613002565b600181815b8085111561382557816000190482111561380b5761380b613334565b8085161561381857918102915b93841c93908002906137ef565b509250929050565b60008261383c57506001611899565b8161384957506000611899565b816001811461385f576002811461386957613885565b6001915050611899565b60ff84111561387a5761387a613334565b50506001821b611899565b5060208310610133831016604e8410600b84101617156138a8575081810a611899565b6138b283836137ea565b80600019048211156138c6576138c6613334565b029392505050565b6000611aa1838361382d565b808202811582820484141761189957611899613334565b60008261390e57634e487b7160e01b600052601260045260246000fd5b500490565b6000825161392581846020870161339c565b9190910192915050565b600082601f83011261394057600080fd5b815161394e612fcb82612f84565b81815284602083860101111561396357600080fd5b611ecc82602083016020870161339c565b60006020828403121561398657600080fd5b815167ffffffffffffffff8082111561399e57600080fd5b90830190608082860312156139b257600080fd5b6139ba612f07565b82516139c581612f6b565b815260208301516139d581612e71565b60208201526040830151828111156139ec57600080fd5b6139f88782860161392f565b604083015250606083015182811115613a1057600080fd5b613a1c8782860161392f565b60608301525095945050505050565b602081526000611aa160208301846133c056fe27039ac08bcb6070578fc805ffca75715bb586e39696d42a16aaa308c1248eb7a2646970667358221220f7159371bc6fbcea47a2e596ea2712a854a1d8f642a2e1d46e5e956901e0996c64736f6c63430008160033",
  "devdoc": {
    "details": "Supports PT tokens through composed Pendle + Odos swaps",
    "errors": {
      "CallerMustBePool(address,address)": [
        {
          "details": "Thrown when the caller is not the pool",
          "params": {
            "caller": "The actual caller",
            "pool": "The expected pool"
          }
        }
      ],
      "InitiatorMustBeThis(address,address)": [
        {
          "details": "Thrown when the initiator is not the expected initiator",
          "params": {
            "expectedInitiator": "The expected initiator",
            "initiator": "The actual initiator"
          }
        }
      ],
      "InsufficientAmountToRepay(uint256,uint256)": [
        {
          "details": "Custom error for insufficient amount to repay",
          "params": {
            "amountReceived": "The amount received from the swap",
            "amountToRepay": "The amount needed to repay"
          }
        }
      ],
      "InsufficientBalanceBeforeSwap(uint256,uint256)": [
        {
          "details": "Thrown when the balance before swap is insufficient",
          "params": {
            "balance": "The actual balance",
            "required": "The required balance"
          }
        }
      ],
      "InsufficientOutputAfterComposedSwap(uint256,uint256)": [
        {
          "details": "Thrown when insufficient output is received after composed swap",
          "params": {
            "actual": "The actual amount received",
            "expected": "The expected amount"
          }
        }
      ],
      "InsufficientOutputAmount(uint256,uint256)": [
        {
          "details": "Thrown when the output amount is less than the minimum expected",
          "params": {
            "actual": "The actual output amount",
            "expected": "The minimum expected output amount"
          }
        }
      ],
      "InvalidPTSwapData()": [
        {
          "details": "Thrown when PT swap data is invalid"
        }
      ],
      "LeftoverCollateralAfterSwap(address,uint256)": [
        {
          "details": "Thrown when leftover collateral remains after exact input swap",
          "params": {
            "asset": "The collateral asset address",
            "leftoverAmount": "The amount of leftover collateral"
          }
        }
      ],
      "OdosSwapFailed(string)": [
        {
          "details": "Thrown when Odos swap fails",
          "params": {
            "reason": "The failure reason"
          }
        }
      ],
      "OraclePriceDeviationExceeded(address,address,uint256,uint256,uint256)": [
        {
          "details": "Thrown when oracle price validation fails (deviation > tolerance)",
          "params": {
            "actualAmount": "The swap parameter amount",
            "deviationBps": "The actual deviation in basis points",
            "expectedAmount": "The oracle-calculated expected amount",
            "tokenIn": "The input token address",
            "tokenOut": "The output token address"
          }
        }
      ],
      "PendleSwapFailed(string)": [
        {
          "details": "Thrown when Pendle swap fails",
          "params": {
            "reason": "The failure reason"
          }
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Bought(address,address,uint256,uint256)": {
        "details": "Emitted when a token is bought on Odos",
        "params": {
          "amountIn": "The amount of tokens sold",
          "amountOut": "The amount of tokens bought",
          "tokenIn": "The address of the token sold",
          "tokenOut": "The address of the token bought"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "details": "Executes the repay with collateral after receiving the flash-borrowed assetsWorkflow: 1. Buy debt asset by providing the flash-borrowed assets in exchange 2. Repay debt 3. Pull aToken collateral from user and withdraw from Pool 4. Repay flashloan",
        "params": {
          "amounts": "The amounts of the flash-borrowed assets",
          "assets": "The addresses of the flash-borrowed assets",
          "initiator": "The address of the flashloan initiator",
          "params": "The byte-encoded params passed when initiating the flashloan",
          "premiums": "The premiums of the flash-borrowed assets"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repayWithCollateral((address,uint256,address,uint256,uint256,bool,address,uint256,bytes,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "collateralATokenPermit": "optional permit for collateral aToken",
          "repayParams": "struct describing the repay with collateral swap"
        }
      },
      "rescueTokens(address)": {
        "details": "Emergency rescue for token stucked on this contract, as failsafe mechanism - Funds should never remain in this contract more time than during transactions - Only callable by the owner"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "OdosRepayAdapterV2",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InsufficientOutput(uint256,uint256)": [
        {
          "notice": "Custom error when actual output amount is less than expected"
        }
      ],
      "InvalidSwapData()": [
        {
          "notice": "Error when swap data validation fails"
        }
      ],
      "PTApprovalFailed()": [
        {
          "notice": "Custom error when PT token approval fails"
        }
      ],
      "PendleSwapFailed()": [
        {
          "notice": "Custom error for failed Pendle swap with no revert reason"
        }
      ],
      "SwapFailed()": [
        {
          "notice": "Custom error for failed swap with no revert reason"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "notice": "The address of the Aave PoolAddressesProvider contract"
      },
      "ORACLE_PRICE_TOLERANCE_BPS()": {
        "notice": "Oracle price deviation tolerance in basis points (500 = 5%)"
      },
      "POOL()": {
        "notice": "The address of the Aave Pool contract"
      },
      "odosRouter()": {
        "notice": "The address of the Odos Router"
      },
      "pendleRouter()": {
        "notice": "The address of the Pendle Router"
      },
      "repayWithCollateral((address,uint256,address,uint256,uint256,bool,address,uint256,bytes,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Repays with collateral by swapping the collateral asset to debt asset"
      }
    },
    "notice": "Implements the logic for repaying a debt using a different asset as source",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20002,
        "contract": "contracts/dlend/periphery/adapters/odos/OdosRepayAdapterV2.sol:OdosRepayAdapterV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 57202,
        "contract": "contracts/dlend/periphery/adapters/odos/OdosRepayAdapterV2.sol:OdosRepayAdapterV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}