{
  "address": "0x0766785BAb61bf64b4B703793C700D26ed098a28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC3156FlashLender",
          "name": "_flashLender",
          "type": "address"
        },
        {
          "internalType": "contract IOdosRouterV2",
          "name": "_odosRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentCollateralTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minOutputCollateralAmount",
          "type": "uint256"
        }
      ],
      "name": "EstimatedCollateralTokenAmountLessThanMinOutputCollateralAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "flashLender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        }
      ],
      "name": "FlashLenderNotSameAsDebtToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currentDebtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dLoopCoreDebtToken",
          "type": "address"
        }
      ],
      "name": "IncompatibleDLoopCoreDebtToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "IncorrectSharesBurned",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "InsufficientOutput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "outputTokenBalanceBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputTokenBalanceAfter",
          "type": "uint256"
        }
      ],
      "name": "OutputTokenBalanceNotIncreasedAfterSwap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedOutputTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "ReceivedOutputTokenAmountNotEqualAmountOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sharesBeforeWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharesAfterWithdraw",
          "type": "uint256"
        }
      ],
      "name": "SharesNotDecreasedAfterFlashLoan",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slippageBps",
          "type": "uint256"
        }
      ],
      "name": "SlippageBpsCannotExceedOneHundredPercent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "spentInputTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        }
      ],
      "name": "SpentInputTokenAmountGreaterThanAmountInMaximum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "spentInputTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "returnedAmountIn",
          "type": "uint256"
        }
      ],
      "name": "SpentInputTokenAmountNotEqualReturnedAmountIn",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralTokenBalanceBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralTokenBalanceAfter",
          "type": "uint256"
        }
      ],
      "name": "UnexpectedDecreaseInCollateralToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralTokenBalanceBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralTokenBalanceAfter",
          "type": "uint256"
        }
      ],
      "name": "UnexpectedDecreaseInCollateralTokenAfterFlashLoan",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debtTokenBalanceBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtTokenBalanceAfter",
          "type": "uint256"
        }
      ],
      "name": "UnexpectedIncreaseInDebtToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "thisContract",
          "type": "address"
        }
      ],
      "name": "UnknownInitiator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flashLender",
          "type": "address"
        }
      ],
      "name": "UnknownLender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawnCollateralTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReceiveCollateralTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnCollateralTokenAmountNotMetMinReceiveAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dLoopCore",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LeftoverCollateralTokenTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dLoopCore",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "MinLeftoverCollateralTokenAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLASHLOAN_CALLBACK",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageBps",
          "type": "uint256"
        },
        {
          "internalType": "contract DLoopCoreBase",
          "name": "dLoopCore",
          "type": "address"
        }
      ],
      "name": "calculateMinOutputCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "existingCollateralTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLender",
      "outputs": [
        {
          "internalType": "contract IERC3156FlashLender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRestrictedRescueTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "restrictedTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minLeftoverCollateralTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "odosRouter",
      "outputs": [
        {
          "internalType": "contract IOdosRouterV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flashLoanFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onFlashLoan",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minOutputCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "collateralToDebtTokenSwapData",
          "type": "bytes"
        },
        {
          "internalType": "contract DLoopCoreBase",
          "name": "dLoopCore",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dLoopCore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinLeftoverCollateralTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa51ca286e2bb70d9c1b82b65a273734c753436e1b163e5d9918f4fa70d469236",
  "receipt": {
    "to": null,
    "from": "0xAD5BDAD791f19c1aF34bb0E71F453cf8A19f34D6",
    "contractAddress": "0x0766785BAb61bf64b4B703793C700D26ed098a28",
    "transactionIndex": 1,
    "gasUsed": "1686966",
    "logsBloom": "0x
    "blockHash": "0x42c567027245dfaeb9ec777697b9b6119a77f67180c7c5c127e7a2db8c6b26f5",
    "transactionHash": "0xa51ca286e2bb70d9c1b82b65a273734c753436e1b163e5d9918f4fa70d469236",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 33627986,
        "transactionHash": "0xa51ca286e2bb70d9c1b82b65a273734c753436e1b163e5d9918f4fa70d469236",
        "address": "0x0766785BAb61bf64b4B703793C700D26ed098a28",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ad5bdad791f19c1af34bb0e71f453cf8a19f34d6"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x42c567027245dfaeb9ec777697b9b6119a77f67180c7c5c127e7a2db8c6b26f5"
      }
    ],
    "blockNumber": 33627986,
    "cumulativeGasUsed": "2485804",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x53a6aBb52B2F968fA80dF6A894e4f1b1020DA975",
    "0xaC041Df48dF9791B0654f1Dbbf2CC8450C5f2e9D"
  ],
  "numDeployments": 1,
  "solcInputHash": "9caaa9c1cca91e83209a10bdb9bb0c8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"_flashLender\",\"type\":\"address\"},{\"internalType\":\"contract IOdosRouterV2\",\"name\":\"_odosRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentCollateralTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputCollateralAmount\",\"type\":\"uint256\"}],\"name\":\"EstimatedCollateralTokenAmountLessThanMinOutputCollateralAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flashLender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"FlashLenderNotSameAsDebtToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currentDebtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dLoopCoreDebtToken\",\"type\":\"address\"}],\"name\":\"IncompatibleDLoopCoreDebtToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"IncorrectSharesBurned\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"InsufficientOutput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"outputTokenBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputTokenBalanceAfter\",\"type\":\"uint256\"}],\"name\":\"OutputTokenBalanceNotIncreasedAfterSwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedOutputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"ReceivedOutputTokenAmountNotEqualAmountOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesBeforeWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAfterWithdraw\",\"type\":\"uint256\"}],\"name\":\"SharesNotDecreasedAfterFlashLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippageBps\",\"type\":\"uint256\"}],\"name\":\"SlippageBpsCannotExceedOneHundredPercent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spentInputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"name\":\"SpentInputTokenAmountGreaterThanAmountInMaximum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spentInputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnedAmountIn\",\"type\":\"uint256\"}],\"name\":\"SpentInputTokenAmountNotEqualReturnedAmountIn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralTokenBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenBalanceAfter\",\"type\":\"uint256\"}],\"name\":\"UnexpectedDecreaseInCollateralToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralTokenBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenBalanceAfter\",\"type\":\"uint256\"}],\"name\":\"UnexpectedDecreaseInCollateralTokenAfterFlashLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtTokenBalanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtTokenBalanceAfter\",\"type\":\"uint256\"}],\"name\":\"UnexpectedIncreaseInDebtToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"thisContract\",\"type\":\"address\"}],\"name\":\"UnknownInitiator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flashLender\",\"type\":\"address\"}],\"name\":\"UnknownLender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawnCollateralTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceiveCollateralTokenAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnCollateralTokenAmountNotMetMinReceiveAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dLoopCore\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LeftoverCollateralTokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dLoopCore\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"MinLeftoverCollateralTokenAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLASHLOAN_CALLBACK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageBps\",\"type\":\"uint256\"},{\"internalType\":\"contract DLoopCoreBase\",\"name\":\"dLoopCore\",\"type\":\"address\"}],\"name\":\"calculateMinOutputCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"existingCollateralTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLender\",\"outputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRestrictedRescueTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"restrictedTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLeftoverCollateralTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"odosRouter\",\"outputs\":[{\"internalType\":\"contract IOdosRouterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flashLoanFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"collateralToDebtTokenSwapData\",\"type\":\"bytes\"},{\"internalType\":\"contract DLoopCoreBase\",\"name\":\"dLoopCore\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dLoopCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinLeftoverCollateralTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of DLoopRedeemerBase with Odos swap functionality\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"calculateMinOutputCollateral(uint256,uint256,address)\":{\"details\":\"Calculates the minimum output collateral amount for a given shares and slippage bps\",\"params\":{\"dLoopCore\":\"Address of the DLoopCore contract\",\"shares\":\"Amount of shares to redeem\",\"slippageBps\":\"Slippage bps\"},\"returns\":{\"_0\":\"minOutputCollateralAmount Minimum output collateral amount\"}},\"constructor\":{\"details\":\"Constructor for the DLoopRedeemerOdos contract\",\"params\":{\"_flashLender\":\"Address of the flash loan provider\",\"_odosRouter\":\"Address of the Odos router\"}},\"getRestrictedRescueTokens()\":{\"details\":\"Gets the restricted rescue tokens\",\"returns\":{\"restrictedTokens\":\"Restricted rescue tokens\"}},\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"details\":\"Callback function for flash loans\",\"params\":{\"data\":\"Encoded flash loan parameters\",\"initiator\":\"Address that initiated the flash loan\",\"token\":\"Address of the flash-borrowed token\"},\"returns\":{\"_0\":\"bytes32 The flash loan callback success bytes\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256,address,uint256,bytes,address)\":{\"details\":\"Redeems shares from the core vault with flash loans      - The required debt token to withdraw will be flash loaned from the flash lender\",\"params\":{\"collateralToDebtTokenSwapData\":\"Swap data from collateral token to debt token\",\"dLoopCore\":\"Address of the DLoopCore contract to use\",\"minOutputCollateralAmount\":\"Minimum amount of collateral token to receive (slippage protection)\",\"receiver\":\"Address to receive the assets\",\"shares\":\"Amount of shares to redeem\"},\"returns\":{\"assets\":\"Amount of assets redeemed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"rescueToken(address,address,uint256)\":{\"details\":\"Rescues tokens accidentally sent to the contract (except for the collateral token and debt token)\",\"params\":{\"amount\":\"Amount of tokens to rescue\",\"receiver\":\"Address to receive the rescued tokens\",\"token\":\"Address of the token to rescue\"}},\"setMinLeftoverCollateralTokenAmount(address,address,uint256)\":{\"details\":\"Sets the minimum leftover collateral token amount for a given dLoopCore and collateral token\",\"params\":{\"collateralToken\":\"Address of the collateral token\",\"dLoopCore\":\"Address of the dLoopCore contract\",\"minAmount\":\"Minimum leftover collateral token amount for the given dLoopCore and collateral token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"DLoopRedeemerOdos\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/dloop/periphery/venue/odos/DLoopRedeemerOdos.sol\":\"DLoopRedeemerOdos\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x7b6690c21e94a45b825631a12581b40a753ea827de5ac9127a6b5833411317f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, IERC20Metadata, ERC20} from \\\"../ERC20.sol\\\";\\nimport {SafeERC20} from \\\"../utils/SafeERC20.sol\\\";\\nimport {IERC4626} from \\\"../../../interfaces/IERC4626.sol\\\";\\nimport {Math} from \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC-4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC-20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC-20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation introduces configurable virtual assets and shares to help developers mitigate that risk.\\n * The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals\\n * and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which\\n * itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default\\n * offset (0) makes it non-profitable even if an attacker is able to capture value from multiple user deposits, as a result\\n * of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains.\\n * With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the\\n * underlying math can be found xref:ROOT:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC-20 or ERC-777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool ok, uint8 assetDecimals) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeCall(IERC20Metadata.decimals, ())\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual returns (uint256) {\\n        return IERC20(asset()).balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\\n        uint256 maxAssets = maxDeposit(receiver);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}. */\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\\n        uint256 maxShares = maxMint(receiver);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxAssets = maxWithdraw(owner);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxShares = maxRedeem(owner);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If asset() is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(IERC20(asset()), caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If asset() is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(IERC20(asset()), receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x194f019f863066305012a575da8aff2fe660eb7f292e0e2d3fba578f11b75513\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa28a1515702793c6b56b97272f75e05890fd82aa2e7ec47b41d4d56a81023f69\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/BasisPointConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nlibrary BasisPointConstants {\\n    // Shared definitions of how we represent percentages and basis points\\n    uint16 public constant ONE_BPS = 100; // 1 basis point with 2 decimals\\n    uint32 public constant ONE_PERCENT_BPS = ONE_BPS * 100;\\n    uint32 public constant ONE_HUNDRED_PERCENT_BPS = ONE_PERCENT_BPS * 100;\\n}\\n\",\"keccak256\":\"0xcaa3c2f2eaf2de426875dafae0956015204c7cf85939010129192c2da4aeb54e\",\"license\":\"MIT\"},\"contracts/common/Erc20Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nlibrary Erc20Helper {\\n    /**\\n     * @dev Checks if a token is an ERC-20\\n     * @param token Address of the token\\n     * @return bool True if the token is an ERC-20, false otherwise\\n     */\\n    function isERC20(address token) internal view returns (bool) {\\n        try ERC20(token).totalSupply() returns (uint256) {\\n            try ERC20(token).balanceOf(address(this)) returns (uint256) {\\n                return true;\\n            } catch {\\n                return false;\\n            }\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x15c6ad857d3a1bb246a731117c984956d056182db2c4d8f28cbad25cb6045f3c\",\"license\":\"MIT\"},\"contracts/common/RescuableVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\n\\n/**\\n * @title RescuableVault\\n * @dev A helper contract for rescuing tokens accidentally sent to the contract\\n *      - The derived contract must implement the getRestrictedRescueTokens() function\\n */\\nabstract contract RescuableVault is Ownable, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n\\n    /* Virtual Methods - Required to be implemented by derived contracts */\\n\\n    /**\\n     * @dev Gets the restricted rescue tokens\\n     * @return address[] Restricted rescue tokens\\n     */\\n    function getRestrictedRescueTokens()\\n        public\\n        view\\n        virtual\\n        returns (address[] memory);\\n\\n    /* Rescue Functions */\\n\\n    /**\\n     * @dev Rescues tokens accidentally sent to the contract (except for the collateral token and debt token)\\n     * @param token Address of the token to rescue\\n     * @param receiver Address to receive the rescued tokens\\n     * @param amount Amount of tokens to rescue\\n     */\\n    function rescueToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) public onlyOwner nonReentrant {\\n        // The vault does not hold any debt token and collateral token, so it is not necessary to restrict the rescue of debt token and collateral token\\n        // We can just rescue any ERC-20 token\\n\\n        address[] memory restrictedRescueTokens = getRestrictedRescueTokens();\\n\\n        // Check if the token is restricted\\n        for (uint256 i = 0; i < restrictedRescueTokens.length; i++) {\\n            if (token == restrictedRescueTokens[i]) {\\n                revert(\\\"Cannot rescue restricted token\\\");\\n            }\\n        }\\n\\n        // Rescue the token\\n        ERC20(token).safeTransfer(receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7dd19646b79650a1abd01acfc6a0e2c518ed0043c9e4c6fd784e57251afc7d56\",\"license\":\"MIT\"},\"contracts/common/SwappableVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\n\\n/**\\n * @title SwappableVault\\n * @dev Base contract for swap functions\\n *      - Need to implement the _swapExactOutputImplementation function\\n *      - The wrapper function _swapExactOutput has some sanity checks\\n */\\nabstract contract SwappableVault {\\n    error SpentInputTokenAmountGreaterThanAmountInMaximum(\\n        uint256 spentInputTokenAmount,\\n        uint256 amountInMaximum\\n    );\\n    error ReceivedOutputTokenAmountNotEqualAmountOut(\\n        uint256 receivedOutputTokenAmount,\\n        uint256 amountOut\\n    );\\n    error OutputTokenBalanceNotIncreasedAfterSwap(\\n        uint256 outputTokenBalanceBefore,\\n        uint256 outputTokenBalanceAfter\\n    );\\n    error SpentInputTokenAmountNotEqualReturnedAmountIn(\\n        uint256 spentInputTokenAmount,\\n        uint256 returnedAmountIn\\n    );\\n\\n    /* Virtual functions */\\n\\n    /**\\n     * @dev Swaps an exact amount of input assets for as much output assets as possible\\n     * @param inputToken Input asset\\n     * @param outputToken Output asset\\n     * @param amountOut Amount of input assets\\n     * @param amountInMaximum Minimum amount of output assets (slippage protection)\\n     * @param receiver Address to receive the output assets\\n     * @param deadline Deadline for the swap\\n     * @param extraData Additional data for the swap\\n     * @return amountIn Amount of input assets used for the swap\\n     */\\n    function _swapExactOutputImplementation(\\n        ERC20 inputToken,\\n        ERC20 outputToken,\\n        uint256 amountOut,\\n        uint256 amountInMaximum,\\n        address receiver,\\n        uint256 deadline,\\n        bytes memory extraData\\n    ) internal virtual returns (uint256);\\n\\n    /* Swap functions */\\n\\n    /**\\n     * @dev A wrapper function for the _swapExactOutputImplementation function\\n     *      - Add some sanity checks\\n     * @param inputToken Input asset\\n     * @param outputToken Output asset\\n     * @param amountOut Amount of input assets\\n     * @param amountInMaximum Minimum amount of output assets (slippage protection)\\n     * @param receiver Address to receive the output assets\\n     * @param deadline Deadline for the swap\\n     * @param extraData Additional data for the swap\\n     * @return amountIn Amount of input assets used for the swap\\n     */\\n    function _swapExactOutput(\\n        ERC20 inputToken,\\n        ERC20 outputToken,\\n        uint256 amountOut,\\n        uint256 amountInMaximum,\\n        address receiver,\\n        uint256 deadline,\\n        bytes memory extraData\\n    ) internal returns (uint256) {\\n        uint256 inputTokenBalanceBefore = inputToken.balanceOf(address(this));\\n        uint256 outputTokenBalanceBefore = outputToken.balanceOf(address(this));\\n\\n        // Perform the swap\\n        uint256 amountIn = _swapExactOutputImplementation(\\n            inputToken,\\n            outputToken,\\n            amountOut,\\n            amountInMaximum,\\n            receiver,\\n            deadline,\\n            extraData\\n        );\\n        uint256 inputTokenBalanceAfter = inputToken.balanceOf(address(this));\\n        uint256 outputTokenBalanceAfter = outputToken.balanceOf(address(this));\\n\\n        // Make sure the spent input token amount is not greater than the amount in maximum\\n        if (inputTokenBalanceAfter < inputTokenBalanceBefore) {\\n            uint256 spentInputTokenAmount = inputTokenBalanceBefore -\\n                inputTokenBalanceAfter;\\n            if (spentInputTokenAmount > amountInMaximum) {\\n                revert SpentInputTokenAmountGreaterThanAmountInMaximum(\\n                    spentInputTokenAmount,\\n                    amountInMaximum\\n                );\\n            }\\n            if (spentInputTokenAmount != amountIn) {\\n                revert SpentInputTokenAmountNotEqualReturnedAmountIn(\\n                    spentInputTokenAmount,\\n                    amountIn\\n                );\\n            }\\n        }\\n        // Do not need to check the input token balance decreased after the swap\\n        // as it is not a risk for the caller\\n\\n        // Make sure the received output token amount is exactly the amount out\\n        if (outputTokenBalanceAfter > outputTokenBalanceBefore) {\\n            uint256 receivedOutputTokenAmount = outputTokenBalanceAfter -\\n                outputTokenBalanceBefore;\\n            if (receivedOutputTokenAmount != amountOut) {\\n                revert ReceivedOutputTokenAmountNotEqualAmountOut(\\n                    receivedOutputTokenAmount,\\n                    amountOut\\n                );\\n            }\\n        } else {\\n            revert OutputTokenBalanceNotIncreasedAfterSwap(\\n                outputTokenBalanceBefore,\\n                outputTokenBalanceAfter\\n            );\\n        }\\n\\n        return amountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x74be6233cc8106af9f56e995afa187de3d2f3a7b3ff11c53f46ea5fb5143ee3e\",\"license\":\"MIT\"},\"contracts/odos/OdosSwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interface/IOdosRouterV2.sol\\\";\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\n/**\\n * @title OdosSwapUtils\\n * @notice Library for handling Odos swaps in liquidator contracts\\n */\\nlibrary OdosSwapUtils {\\n    using SafeTransferLib for ERC20;\\n\\n    /// @notice Custom error for failed swap with no revert reason\\n    error SwapFailed();\\n    /// @notice Custom error when actual output amount is less than expected\\n    error InsufficientOutput(uint256 expected, uint256 actual);\\n\\n    /**\\n     * @notice Performs an swap operation using Odos router with swap data\\n     * @param router Odos router contract\\n     * @param inputToken Input token\\n     * @param maxIn Maximum input amount\\n     * @param exactOut Exact output amount\\n     * @param swapData Encoded swap path data\\n     */\\n    function excuteSwapOperation(\\n        IOdosRouterV2 router,\\n        address inputToken,\\n        uint256 maxIn,\\n        uint256 exactOut,\\n        bytes memory swapData\\n    ) internal returns (uint256) {\\n        ERC20(inputToken).approve(address(router), maxIn);\\n\\n        (bool success, bytes memory result) = address(router).call(swapData);\\n        if (!success) {\\n            // Decode the revert reason if present\\n            if (result.length > 0) {\\n                // First try to decode the standard revert reason\\n                assembly {\\n                    let resultLength := mload(result)\\n                    revert(add(32, result), resultLength)\\n                }\\n            }\\n            revert SwapFailed();\\n        }\\n\\n        uint256 actualAmountOut;\\n        assembly {\\n            actualAmountOut := mload(add(result, 32))\\n        }\\n\\n        if (actualAmountOut < exactOut) {\\n            revert InsufficientOutput(exactOut, actualAmountOut);\\n        }\\n\\n        return actualAmountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xf7a0a11ceaa4d9976f77778061dad65ade387e2d47afb7aa79cb13bab7f1aa4e\",\"license\":\"GNU AGPLv3\"},\"contracts/odos/interface/IOdosRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\n/**\\n * @dev Interface for Odos Router V2.\\n * @dev Generated from original ABI: https://fraxscan.com/address/0x56c85a254dd12ee8d9c04049a4ab62769ce98210#code\\n */\\npragma solidity ^0.8.20;\\n\\ninterface IOdosRouterV2 {\\n    struct swapTokenInfo {\\n        address inputToken;\\n        uint256 inputAmount;\\n        address inputReceiver;\\n        address outputToken;\\n        uint256 outputQuote;\\n        uint256 outputMin;\\n        address outputReceiver;\\n    }\\n\\n    struct inputTokenInfo {\\n        address tokenAddress;\\n        uint256 amountIn;\\n        address receiver;\\n    }\\n\\n    struct outputTokenInfo {\\n        address tokenAddress;\\n        uint256 relativeValue;\\n        address receiver;\\n    }\\n\\n    struct permit2Info {\\n        address contractAddress;\\n        uint256 nonce;\\n        uint256 deadline;\\n        bytes signature;\\n    }\\n\\n    event Swap(\\n        address sender,\\n        uint256 inputAmount,\\n        address inputToken,\\n        uint256 amountOut,\\n        address outputToken,\\n        int256 slippage,\\n        uint32 referralCode\\n    );\\n\\n    event SwapMulti(\\n        address sender,\\n        uint256[] amountsIn,\\n        address[] tokensIn,\\n        uint256[] amountsOut,\\n        address[] tokensOut,\\n        uint32 referralCode\\n    );\\n\\n    function FEE_DENOM() external view returns (uint256);\\n\\n    function REFERRAL_WITH_FEE_THRESHOLD() external view returns (uint256);\\n\\n    function addressList(uint256) external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function referralLookup(\\n        uint32\\n    )\\n        external\\n        view\\n        returns (uint64 referralFee, address beneficiary, bool registered);\\n\\n    function registerReferralCode(\\n        uint32 _referralCode,\\n        uint64 _referralFee,\\n        address _beneficiary\\n    ) external;\\n\\n    function renounceOwnership() external;\\n\\n    function setSwapMultiFee(uint256 _swapMultiFee) external;\\n\\n    function swap(\\n        swapTokenInfo calldata tokenInfo,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapCompact() external payable returns (uint256);\\n\\n    function swapMulti(\\n        inputTokenInfo[] calldata inputs,\\n        outputTokenInfo[] calldata outputs,\\n        uint256 valueOutMin,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external payable returns (uint256[] memory amountsOut);\\n\\n    function swapMultiCompact()\\n        external\\n        payable\\n        returns (uint256[] memory amountsOut);\\n\\n    function swapMultiFee() external view returns (uint256);\\n\\n    function swapMultiPermit2(\\n        permit2Info calldata permit2,\\n        inputTokenInfo[] calldata inputs,\\n        outputTokenInfo[] calldata outputs,\\n        uint256 valueOutMin,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external payable returns (uint256[] memory amountsOut);\\n\\n    function swapPermit2(\\n        permit2Info calldata permit2,\\n        swapTokenInfo calldata tokenInfo,\\n        bytes calldata pathDefinition,\\n        address executor,\\n        uint32 referralCode\\n    ) external returns (uint256 amountOut);\\n\\n    function swapRouterFunds(\\n        inputTokenInfo[] calldata inputs,\\n        outputTokenInfo[] calldata outputs,\\n        uint256 valueOutMin,\\n        bytes calldata pathDefinition,\\n        address executor\\n    ) external returns (uint256[] memory amountsOut);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function transferRouterFunds(\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address dest\\n    ) external;\\n\\n    function writeAddressList(address[] calldata addresses) external;\\n\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0x99934b8947848df22480188a9a480fc002a97e2b3e6ecdb455585cca5adc1f6f\",\"license\":\"MIT\"},\"contracts/vaults/dloop/core/DLoopCoreBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {BasisPointConstants} from \\\"contracts/common/BasisPointConstants.sol\\\";\\nimport {ERC4626, ERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {Erc20Helper} from \\\"contracts/common/Erc20Helper.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {RescuableVault} from \\\"contracts/common/RescuableVault.sol\\\";\\n\\n/**\\n * @title DLoopCoreBase\\n * @dev A contract that executes leveraged operations on a lending pool using a collateral token and a debt token\\n *      - A leveraged position is created by supplying a collateral token to the lending pool and borrowing a debt token\\n *      - The leverage ratio will be changed if the collateral and debt values are changed (due to price changes)\\n *      - The leverage can be increased by supplying more collateral token or decreasing the debt token\\n *      - The leverage can be decreased by withdrawing collateral token or increasing the debt token\\n *      - In order to keep the vault balanced, user can call increaseLeverage or decreaseLeverage to increase or decrease the leverage\\n *        when it is away from the target leverage\\n *      - There is a subsidy for the caller when increasing the leverage.\\n */\\nabstract contract DLoopCoreBase is\\n    ERC4626,\\n    Ownable,\\n    ReentrancyGuard,\\n    RescuableVault\\n{\\n    using SafeERC20 for ERC20;\\n\\n    /* Core state */\\n\\n    uint32 public lowerBoundTargetLeverageBps;\\n    uint32 public upperBoundTargetLeverageBps;\\n    uint256 public maxSubsidyBps;\\n\\n    /* Constants */\\n\\n    uint32 public immutable targetLeverageBps; // ie. 30000 = 300% in basis points, means 3x leverage\\n    ERC20 public immutable collateralToken;\\n    ERC20 public immutable debtToken;\\n\\n    /* Errors */\\n\\n    error TooImbalanced(\\n        uint256 currentLeverageBps,\\n        uint256 lowerBoundTargetLeverageBps,\\n        uint256 upperBoundTargetLeverageBps\\n    );\\n    error InsufficientAllowanceOfDebtAssetToRepay(\\n        address owner,\\n        address spender,\\n        address debtAsset,\\n        uint256 requiredAllowance\\n    );\\n    error DepositInsufficientToSupply(\\n        uint256 currentBalance,\\n        uint256 newTotalAssets\\n    );\\n    error CollateralLessThanDebt(\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase\\n    );\\n    error InsufficientShareBalanceToRedeem(\\n        address owner,\\n        uint256 sharesToRedeem,\\n        uint256 shareBalance\\n    );\\n    error WithdrawableIsLessThanRequired(\\n        address token,\\n        uint256 assetToRemoveFromLending,\\n        uint256 withdrawableAmount\\n    );\\n    error DecreaseLeverageOutOfRange(\\n        uint256 newLeverageBps,\\n        uint256 targetLeverageBps, // lower bound\\n        uint256 currentLeverageBps // upper bound\\n    );\\n    error IncreaseLeverageOutOfRange(\\n        uint256 newLeverageBps,\\n        uint256 targetLeverageBps, // upper bound\\n        uint256 currentLeverageBps // lower bound\\n    );\\n    error TokenBalanceNotDecreasedAfterRepay(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error UnexpectedRepayAmountToPool(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error TokenBalanceNotDecreasedAfterSupply(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error UnexpectedSupplyAmountToPool(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error TokenBalanceNotIncreasedAfterBorrow(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error UnexpectedBorrowAmountFromPool(\\n        address token,\\n        uint256 borrowedAmountBefore,\\n        uint256 borrowedAmountAfter,\\n        uint256 expectedBorrowedAmount\\n    );\\n    error TokenBalanceNotIncreasedAfterWithdraw(\\n        address token,\\n        uint256 tokenBalanceBefore,\\n        uint256 tokenBalanceAfter,\\n        uint256 expectedTokenBalance\\n    );\\n    error UnexpectedWithdrawAmountFromPool(\\n        address token,\\n        uint256 withdrawableAmountBefore,\\n        uint256 withdrawableAmountAfter,\\n        uint256 expectedWithdrawableAmount\\n    );\\n    error InvalidLeverageBounds(\\n        uint256 lowerBound,\\n        uint256 targetLeverage,\\n        uint256 upperBound\\n    );\\n    error AssetPriceIsZero(address asset);\\n    error LeverageExceedsTarget(\\n        uint256 currentLeverageBps,\\n        uint256 targetLeverageBps\\n    );\\n    error LeverageBelowTarget(\\n        uint256 currentLeverageBps,\\n        uint256 targetLeverageBps\\n    );\\n    error RebalanceReceiveLessThanMinAmount(\\n        string operation,\\n        uint256 receivedAmount,\\n        uint256 minReceivedAmount\\n    );\\n    error InvalidLeverage(uint256 leverageBps);\\n    error TotalCollateralBaseIsZero();\\n    error TotalCollateralBaseIsLessThanTotalDebtBase(\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase\\n    );\\n\\n    /**\\n     * @dev Constructor for the DLoopCore contract\\n     * @param _name Name of the vault token\\n     * @param _symbol Symbol of the vault token\\n     * @param _collateralToken Address of the collateral token\\n     * @param _debtToken Address of the debt token\\n     * @param _targetLeverageBps Target leverage in basis points\\n     * @param _lowerBoundTargetLeverageBps Lower bound of target leverage in basis points\\n     * @param _upperBoundTargetLeverageBps Upper bound of target leverage in basis points\\n     * @param _maxSubsidyBps Maximum subsidy in basis points\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        ERC20 _collateralToken,\\n        ERC20 _debtToken,\\n        uint32 _targetLeverageBps,\\n        uint32 _lowerBoundTargetLeverageBps,\\n        uint32 _upperBoundTargetLeverageBps,\\n        uint256 _maxSubsidyBps\\n    ) ERC20(_name, _symbol) ERC4626(_collateralToken) Ownable(msg.sender) {\\n        debtToken = _debtToken;\\n        collateralToken = _collateralToken;\\n\\n        if (_targetLeverageBps < BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert(\\\"Target leverage must be at least 100% in basis points\\\");\\n        }\\n\\n        if (\\n            _lowerBoundTargetLeverageBps >= _targetLeverageBps ||\\n            _targetLeverageBps >= _upperBoundTargetLeverageBps\\n        ) {\\n            revert InvalidLeverageBounds(\\n                _lowerBoundTargetLeverageBps,\\n                _targetLeverageBps,\\n                _upperBoundTargetLeverageBps\\n            );\\n        }\\n\\n        // Make sure collateral token is ERC-20\\n        if (!Erc20Helper.isERC20(address(_collateralToken))) {\\n            revert(\\\"Collateral token must be an ERC-20\\\");\\n        }\\n\\n        // Make sure debt token is ERC-20\\n        if (!Erc20Helper.isERC20(address(_debtToken))) {\\n            revert(\\\"Debt token must be an ERC-20\\\");\\n        }\\n\\n        targetLeverageBps = _targetLeverageBps;\\n        lowerBoundTargetLeverageBps = _lowerBoundTargetLeverageBps;\\n        upperBoundTargetLeverageBps = _upperBoundTargetLeverageBps;\\n        maxSubsidyBps = _maxSubsidyBps;\\n    }\\n\\n    /* Virtual Methods - Required to be implemented by derived contracts */\\n\\n    /**\\n     * @dev Gets the total collateral and debt of a user in base currency\\n     * @param user Address of the user\\n     * @return totalCollateralBase Total collateral in base currency\\n     * @return totalDebtBase Total debt in base currency\\n     */\\n    function getTotalCollateralAndDebtOfUserInBase(\\n        address user\\n    )\\n        public\\n        view\\n        virtual\\n        returns (uint256 totalCollateralBase, uint256 totalDebtBase);\\n\\n    /**\\n     * @dev Gets the additional rescue tokens\\n     *      - As the getRestrictedRescueTokens function is very critical and we do not\\n     *        want to override it in the derived contracts, we use this function to\\n     *        get the additional rescue tokens\\n     * @return address[] Additional rescue tokens\\n     */\\n    function _getAdditionalRescueTokensImplementation()\\n        internal\\n        view\\n        virtual\\n        returns (address[] memory);\\n\\n    /**\\n     * @dev Gets the asset price from the oracle\\n     * @param asset Address of the asset\\n     * @return uint256 Price of the asset\\n     */\\n    function _getAssetPriceFromOracleImplementation(\\n        address asset\\n    ) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Supply tokens to the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to supply\\n     * @param onBehalfOf Address to supply on behalf of\\n     */\\n    function _supplyToPoolImplementation(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Borrow tokens from the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to borrow\\n     * @param onBehalfOf Address to borrow on behalf of\\n     */\\n    function _borrowFromPoolImplementation(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Repay debt to the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to repay\\n     * @param onBehalfOf Address to repay on behalf of\\n     */\\n    function _repayDebtToPoolImplementation(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Withdraw tokens from the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to withdraw\\n     * @param onBehalfOf Address to withdraw on behalf of\\n     */\\n    function _withdrawFromPoolImplementation(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal virtual;\\n\\n    /* Wrapper Functions */\\n\\n    /**\\n     * @dev Supply tokens to the lending pool, and make sure the output is as expected\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to supply\\n     * @param onBehalfOf Address to supply on behalf of\\n     */\\n    function _supplyToPool(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal {\\n        // At this step, we assume that the funds from the depositor are already in the vault\\n\\n        uint256 tokenBalanceBeforeSupply = ERC20(token).balanceOf(onBehalfOf);\\n\\n        _supplyToPoolImplementation(token, amount, onBehalfOf);\\n\\n        uint256 tokenBalanceAfterSupply = ERC20(token).balanceOf(onBehalfOf);\\n        if (tokenBalanceAfterSupply >= tokenBalanceBeforeSupply) {\\n            revert TokenBalanceNotDecreasedAfterSupply(\\n                token,\\n                tokenBalanceBeforeSupply,\\n                tokenBalanceAfterSupply,\\n                amount\\n            );\\n        }\\n\\n        // Now, as balance before must be greater than balance after, we can just check if the difference is the expected amount\\n        if (tokenBalanceBeforeSupply - tokenBalanceAfterSupply != amount) {\\n            revert UnexpectedSupplyAmountToPool(\\n                token,\\n                tokenBalanceBeforeSupply,\\n                tokenBalanceAfterSupply,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Borrow tokens from the lending pool, and make sure the output is as expected\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to borrow\\n     * @param onBehalfOf Address to borrow on behalf of\\n     */\\n    function _borrowFromPool(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal {\\n        // At this step, we assume that the funds from the depositor are already in the vault\\n\\n        uint256 tokenBalanceBeforeBorrow = ERC20(token).balanceOf(onBehalfOf);\\n\\n        _borrowFromPoolImplementation(token, amount, onBehalfOf);\\n\\n        uint256 tokenBalanceAfterBorrow = ERC20(token).balanceOf(onBehalfOf);\\n        if (tokenBalanceAfterBorrow <= tokenBalanceBeforeBorrow) {\\n            revert TokenBalanceNotIncreasedAfterBorrow(\\n                token,\\n                tokenBalanceBeforeBorrow,\\n                tokenBalanceAfterBorrow,\\n                amount\\n            );\\n        }\\n\\n        // Now, as balance before must be less than balance after, we can just check if the difference is the expected amount\\n        if (tokenBalanceAfterBorrow - tokenBalanceBeforeBorrow != amount) {\\n            revert UnexpectedBorrowAmountFromPool(\\n                token,\\n                tokenBalanceBeforeBorrow,\\n                tokenBalanceAfterBorrow,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Repay debt to the lending pool, and make sure the output is as expected\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to repay\\n     * @param onBehalfOf Address to repay on behalf of\\n     */\\n    function _repayDebtToPool(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal {\\n        // At this step, we assume that the funds from the depositor are already in the vault\\n\\n        uint256 tokenBalanceBeforeRepay = ERC20(token).balanceOf(onBehalfOf);\\n\\n        _repayDebtToPoolImplementation(token, amount, onBehalfOf);\\n\\n        uint256 tokenBalanceAfterRepay = ERC20(token).balanceOf(onBehalfOf);\\n\\n        if (tokenBalanceAfterRepay >= tokenBalanceBeforeRepay) {\\n            revert TokenBalanceNotDecreasedAfterRepay(\\n                token,\\n                tokenBalanceBeforeRepay,\\n                tokenBalanceAfterRepay,\\n                amount\\n            );\\n        }\\n\\n        // Now, as balance before must be greater than balance after, we can just check if the difference is the expected amount\\n        if (tokenBalanceBeforeRepay - tokenBalanceAfterRepay != amount) {\\n            revert UnexpectedRepayAmountToPool(\\n                token,\\n                tokenBalanceBeforeRepay,\\n                tokenBalanceAfterRepay,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw tokens from the lending pool, and make sure the output is as expected\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to withdraw\\n     * @param onBehalfOf Address to withdraw on behalf of\\n     */\\n    function _withdrawFromPool(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal {\\n        // At this step, we assume that the funds from the depositor are already in the vault\\n\\n        uint256 tokenBalanceBeforeWithdraw = ERC20(token).balanceOf(onBehalfOf);\\n\\n        _withdrawFromPoolImplementation(token, amount, onBehalfOf);\\n\\n        uint256 tokenBalanceAfterWithdraw = ERC20(token).balanceOf(onBehalfOf);\\n\\n        if (tokenBalanceAfterWithdraw <= tokenBalanceBeforeWithdraw) {\\n            revert TokenBalanceNotIncreasedAfterWithdraw(\\n                token,\\n                tokenBalanceBeforeWithdraw,\\n                tokenBalanceAfterWithdraw,\\n                amount\\n            );\\n        }\\n\\n        // Now, as balance before must be less than balance after, we can just check if the difference is the expected amount\\n        if (tokenBalanceAfterWithdraw - tokenBalanceBeforeWithdraw != amount) {\\n            revert UnexpectedWithdrawAmountFromPool(\\n                token,\\n                tokenBalanceBeforeWithdraw,\\n                tokenBalanceAfterWithdraw,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /* Safety */\\n\\n    /**\\n     * @dev Gets the restricted rescue tokens\\n     * @return address[] Restricted rescue tokens\\n     */\\n    function getRestrictedRescueTokens()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        // Get the additional rescue tokens from the derived contract\\n        address[]\\n            memory additionalRescueTokens = _getAdditionalRescueTokensImplementation();\\n\\n        // Restrict the rescue tokens to the collateral token and the debt token\\n        // as they are going to be used to compensate subsidies during the rebalance\\n        address[] memory restrictedRescueTokens = new address[](\\n            2 + additionalRescueTokens.length\\n        );\\n        restrictedRescueTokens[0] = address(collateralToken);\\n        restrictedRescueTokens[1] = address(debtToken);\\n\\n        // Concatenate the restricted rescue tokens and the additional rescue tokens\\n        for (uint256 i = 0; i < additionalRescueTokens.length; i++) {\\n            restrictedRescueTokens[2 + i] = additionalRescueTokens[i];\\n        }\\n        return restrictedRescueTokens;\\n    }\\n\\n    /* Helper Functions */\\n\\n    /**\\n     * @dev Calculates the leveraged amount of the assets\\n     * @param assets Amount of assets\\n     * @return leveragedAssets Amount of leveraged assets\\n     */\\n    function getLeveragedAssets(uint256 assets) public view returns (uint256) {\\n        return\\n            (assets * targetLeverageBps) /\\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS;\\n    }\\n\\n    /**\\n     * @dev Calculates the unleveraged amount of the assets\\n     * @param leveragedAssets Amount of leveraged assets\\n     * @return unleveragedAssets Amount of unleveraged assets\\n     */\\n    function getUnleveragedAssets(\\n        uint256 leveragedAssets\\n    ) public view returns (uint256) {\\n        return\\n            (leveragedAssets * BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) /\\n            targetLeverageBps;\\n    }\\n\\n    /**\\n     * @dev Gets the asset price from the oracle\\n     * @param asset Address of the asset\\n     * @return uint256 Price of the asset\\n     */\\n    function getAssetPriceFromOracle(\\n        address asset\\n    ) public view returns (uint256) {\\n        uint256 assetPrice = _getAssetPriceFromOracleImplementation(asset);\\n\\n        // Sanity check\\n        if (assetPrice == 0) {\\n            revert AssetPriceIsZero(asset);\\n        }\\n\\n        return assetPrice;\\n    }\\n\\n    /**\\n     * @dev Converts an amount in base currency to the actual amount in the token\\n     * @param amountInBase Amount in base currency\\n     * @param token Address of the token\\n     * @return amountInToken Amount in the token\\n     */\\n    function convertFromBaseCurrencyToToken(\\n        uint256 amountInBase,\\n        address token\\n    ) public view returns (uint256) {\\n        // The price decimals is cancelled out in the division (as the amount and price are in the same unit)\\n        uint256 tokenPriceInBase = getAssetPriceFromOracle(token);\\n        return\\n            (amountInBase * 10 ** ERC20(token).decimals()) / tokenPriceInBase;\\n    }\\n\\n    /**\\n     * @dev Converts an amount in the token to the actual amount in base currency\\n     * @param amountInToken Amount in the token\\n     * @param token Address of the token\\n     * @return amountInBase Amount in base currency\\n     */\\n    function convertFromTokenAmountToBaseCurrency(\\n        uint256 amountInToken,\\n        address token\\n    ) public view returns (uint256) {\\n        // The token decimals is cancelled out in the division (as the amount and price are in the same unit)\\n        uint256 tokenPriceInBase = getAssetPriceFromOracle(token);\\n        return\\n            (amountInToken * tokenPriceInBase) / 10 ** ERC20(token).decimals();\\n    }\\n\\n    /**\\n     * @dev Override of totalAssets from ERC4626\\n     * @return uint256 Total assets in the vault\\n     */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        // We override this function to return the total assets in the vault\\n        // with respect to the position in the lending pool\\n        // The dLend interest will be distributed to the dToken\\n        (uint256 totalCollateralBase, ) = getTotalCollateralAndDebtOfUserInBase(\\n            address(this)\\n        );\\n        // The price decimals is cancelled out in the division (as the amount and price are in the same unit)\\n        return\\n            convertFromBaseCurrencyToToken(\\n                totalCollateralBase,\\n                address(collateralToken)\\n            );\\n    }\\n\\n    /* Safety */\\n\\n    /**\\n     * @dev Returns whether the current leverage is too imbalanced\\n     * @return bool True if leverage is too imbalanced, false otherwise\\n     */\\n    function isTooImbalanced() public view returns (bool) {\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n        // If there is no deposit yet, we don't need to rebalance, thus it is not too imbalanced\\n        return\\n            currentLeverageBps != 0 &&\\n            (currentLeverageBps < lowerBoundTargetLeverageBps ||\\n                currentLeverageBps > upperBoundTargetLeverageBps);\\n    }\\n\\n    /* Deposit and Mint */\\n\\n    /**\\n     * @dev Deposits assets into the vault\\n     *      - It will send the borrowed debt token and the minted shares to the receiver\\n     *      - The minted shares represent the position of the supplied collateral assets in the lending pool\\n     * @param caller Address of the caller\\n     * @param receiver Address to receive the minted shares\\n     * @param assets Amount of assets to deposit\\n     * @param shares Amount of shares to mint\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal override nonReentrant {\\n        /**\\n         * Example of how this function works:\\n         *\\n         * Suppose that the target leverage is 3x, and the baseLTVAsCollateral is 70%\\n         * - The collateral token is WETH\\n         * - The debt here is dUSD\\n         * - The current collateral token balance is 0 WETH\\n         * - The current debt token balance is 0 dUSD\\n         * - The current shares supply is 0\\n         * - Assume that the price of WETH is 2000 dUSD\\n         *\\n         * 1. User deposits 300 WETH\\n         * 2. The vault supplies 300 WETH to the lending pool\\n         * 3. The vault borrows 400,000 dUSD (300 * 2000 * 66.6666666%) from the lending pool\\n         *    - 66.666% is to keep the target leverage 3x\\n         * 4. The vault sends 400,000 dUSD to the receiver\\n         * 5. The vault mints 300 shares to the user (representing 300 WETH position in the lending pool)\\n         *\\n         * The current leverage is: (300 * 2000) / (300 * 2000 - 400,000) = 3x\\n         */\\n\\n        // Make sure the current leverage is within the target range\\n        if (isTooImbalanced()) {\\n            revert TooImbalanced(\\n                getCurrentLeverageBps(),\\n                lowerBoundTargetLeverageBps,\\n                upperBoundTargetLeverageBps\\n            );\\n        }\\n\\n        uint256 debtAssetBorrowed = _depositToPoolImplementation(\\n            caller,\\n            assets\\n        );\\n\\n        // Transfer the debt asset to the receiver\\n        debtToken.safeTransfer(receiver, debtAssetBorrowed);\\n\\n        // Mint the vault's shares to the depositor\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Handles the logic of supplying collateral token and borrowing debt token\\n     * @param caller Address of the caller\\n     * @param supplyAssetAmount Amount of assets to supply\\n     * @return debtAssetAmountToBorrow Amount of debt asset to borrow\\n     */\\n    function _depositToPoolImplementation(\\n        address caller,\\n        uint256 supplyAssetAmount // supply amount\\n    ) private returns (uint256) {\\n        // Transfer the assets to the vault (need the allowance before calling this function)\\n        collateralToken.safeTransferFrom(\\n            caller,\\n            address(this),\\n            supplyAssetAmount\\n        );\\n\\n        // At this step, we assume that the funds from the depositor are already in the vault\\n\\n        // Get current leverage before supplying (IMPORTANT: this is the leverage before supplying)\\n        uint256 currentLeverageBpsBeforeSupply = getCurrentLeverageBps();\\n\\n        // Make sure we have enough balance to supply before supplying\\n        uint256 currentCollateralTokenBalance = collateralToken.balanceOf(\\n            address(this)\\n        );\\n        if (currentCollateralTokenBalance < supplyAssetAmount) {\\n            revert DepositInsufficientToSupply(\\n                currentCollateralTokenBalance,\\n                supplyAssetAmount\\n            );\\n        }\\n\\n        // Supply the collateral token to the lending pool\\n        _supplyToPool(\\n            address(collateralToken),\\n            supplyAssetAmount,\\n            address(this)\\n        );\\n\\n        // Get the amount of debt token to borrow that keeps the current leverage\\n        // If there is no deposit yet (leverage=0), we use the target leverage\\n        uint256 debtTokenAmountToBorrow = getBorrowAmountThatKeepCurrentLeverage(\\n                address(collateralToken),\\n                address(debtToken),\\n                supplyAssetAmount,\\n                currentLeverageBpsBeforeSupply > 0\\n                    ? currentLeverageBpsBeforeSupply\\n                    : targetLeverageBps\\n            );\\n\\n        // Borrow the max amount of debt token\\n        _borrowFromPool(\\n            address(debtToken),\\n            debtTokenAmountToBorrow,\\n            address(this)\\n        );\\n\\n        return debtTokenAmountToBorrow;\\n    }\\n\\n    /* Withdraw and Redeem */\\n\\n    /**\\n     * @dev Withdraws collateral assets from the vault\\n     *      - It requires to spend the debt token to repay the debt\\n     *      - It will send the withdrawn collateral assets to the receiver and burn the shares\\n     *      - The burned shares represent the position of the withdrawn assets in the lending pool\\n     * @param caller Address of the caller\\n     * @param receiver Address to receive the withdrawn assets\\n     * @param owner Address of the owner\\n     * @param assets Amount of assets to remove from the lending pool\\n     * @param shares Amount of shares to burn\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal override nonReentrant {\\n        /**\\n         * Example of how this function works:\\n         *\\n         * Suppose that the target leverage is 3x, and the baseLTVAsCollateral is 70%\\n         * - The collateral token is WETH\\n         * - The debt here is dUSD\\n         * - The current shares supply is 300\\n         * - The current leverage is 3x\\n         * - The current collateral token balance is 300 WETH\\n         * - The current debt token balance is 400,000 dUSD (300 * 2000 * 66.6666666%)\\n         * - Assume that the price of WETH is 2000 dUSD\\n         *\\n         * 1. User has 100 shares\\n         * 2. User wants to withdraw 100 WETH\\n         * 3. The vault burns 100 shares\\n         * 4. The vault transfers 133,333 dUSD (100 * 2000 * 66.6666666%) from the user to the vault\\n         *    - 66.6666% is to keep the target leverage 3x\\n         * 5. The vault repays 133,333 dUSD to the lending pool\\n         *    - The debt is now 266,667 dUSD (400,000 - 133,333)\\n         * 6. The vault withdraws 100 WETH from the lending pool\\n         *    - The collateral is now 200 WETH (300 - 100)\\n         * 7. The vault sends 100 WETH to the receiver\\n         *\\n         * The current leverage is: (200 * 2000) / (200 * 2000 - 266,667) = 3x\\n         */\\n\\n        // Note that we need the allowance before calling this function\\n        // - Allowance for the message sender to spend the shares on behalf of the owner\\n        // - Allowance for the vault to burn the shares\\n\\n        // If the owner is not the caller, then we need to spend the allowance\\n        // so that the caller can spend the shares on behalf of the owner\\n        if (owner != caller) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // Check user's balance before burning shares\\n        uint256 userShares = balanceOf(owner);\\n        if (userShares < shares) {\\n            revert InsufficientShareBalanceToRedeem(owner, shares, userShares);\\n        }\\n\\n        // Burn the shares\\n        _burn(owner, shares);\\n\\n        // Make sure the current leverage is within the target range\\n        if (isTooImbalanced()) {\\n            revert TooImbalanced(\\n                getCurrentLeverageBps(),\\n                lowerBoundTargetLeverageBps,\\n                upperBoundTargetLeverageBps\\n            );\\n        }\\n\\n        // Withdraw the collateral from the lending pool\\n        // After this step, the _withdrawFromPool wrapper function will also assert that\\n        // the withdrawn amount is exactly the amount requested.\\n        _withdrawFromPoolImplementation(caller, assets);\\n\\n        // Transfer the asset to the receiver\\n        collateralToken.safeTransfer(receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Handles the logic for repaying debt and withdrawing collateral from the pool\\n     *      - It calculates the required debt token to repay to keep the current leverage\\n     *        given the expected withdraw amount\\n     *      - Then performs the actual repay and withdraw\\n     * @param caller Address of the caller\\n     * @param collateralTokenToWithdraw The amount of collateral token to withdraw\\n     * @return repaidDebtTokenAmount The amount of debt token repaid\\n     */\\n    function _withdrawFromPoolImplementation(\\n        address caller,\\n        uint256 collateralTokenToWithdraw\\n    ) private returns (uint256 repaidDebtTokenAmount) {\\n        // Get the current leverage before repaying the debt (IMPORTANT: this is the leverage before repaying the debt)\\n        // It is used to calculate the expected withdrawable amount that keeps the current leverage\\n        uint256 leverageBpsBeforeRepayDebt = getCurrentLeverageBps();\\n\\n        repaidDebtTokenAmount = getRepayAmountThatKeepCurrentLeverage(\\n            address(collateralToken),\\n            address(debtToken),\\n            collateralTokenToWithdraw,\\n            leverageBpsBeforeRepayDebt\\n        );\\n\\n        // If don't have enough allowance, revert with the error message\\n        // This is to early-revert with instruction in the error message\\n        if (\\n            debtToken.allowance(caller, address(this)) < repaidDebtTokenAmount\\n        ) {\\n            revert InsufficientAllowanceOfDebtAssetToRepay(\\n                caller,\\n                address(this),\\n                address(debtToken),\\n                repaidDebtTokenAmount\\n            );\\n        }\\n\\n        // Transfer the debt token to the vault to repay the debt\\n        debtToken.safeTransferFrom(\\n            caller,\\n            address(this),\\n            repaidDebtTokenAmount\\n        );\\n\\n        // Repay the debt to withdraw the collateral\\n        _repayDebtToPool(\\n            address(debtToken),\\n            repaidDebtTokenAmount,\\n            address(this)\\n        );\\n\\n        // Withdraw the collateral\\n        // At this step, the _withdrawFromPool wrapper function will also assert that\\n        // the withdrawn amount is exactly the amount requested.\\n        _withdrawFromPool(\\n            address(collateralToken),\\n            collateralTokenToWithdraw,\\n            address(this)\\n        );\\n\\n        return repaidDebtTokenAmount;\\n    }\\n\\n    /* Calculate */\\n\\n    function getRepayAmountThatKeepCurrentLeverage(\\n        address collateralAsset,\\n        address debtAsset,\\n        uint256 targetWithdrawAmount,\\n        uint256 leverageBpsBeforeRepayDebt\\n    ) public view returns (uint256 repayAmount) {\\n        /* Formula definition:\\n         * - C1: totalCollateralBase before repay (in base currency)\\n         * - D1: totalDebtBase before repay (in base currency)\\n         * - C2: totalCollateralBase after repay (in base currency)\\n         * - D2: totalDebtBase after repay (in base currency)\\n         * - T: target leverage\\n         * - x: withdraw amount in base currency\\n         * - y: repay amount in base currency\\n         *\\n         * We have:\\n         *        C1 / (C1-D1) = C2 / (C2-D2)\\n         *        C2 = C1-x\\n         *        D2 = D1-y\\n         *        C1 / (C1-D1) = T <=> C1 = (C1-D1) * T <=> C1 = C1*T - D1*T <=> C1*T - C1 = D1*T <=> C1 = D1*T/(T-1)\\n         *\\n         * Formula expression:\\n         *        C1 / (C1-D1) = (C1-x) / (C1-x-D1+y)\\n         *    <=> C1 * (C1-x-D1+y) = (C1-x) * (C1-D1)\\n         *    <=> C1^2 - C1*x - C1*D1 + C1*y = C1^2 - C1*D1 - C1*x + D1*x\\n         *    <=> C1^2 - C1*x - C1*D1 + C1*y = C1^2 - C1*x - C1*D1 + D1*x\\n         *    <=> C1*y = x*D1\\n         *    <=> y = x*D1 / C1\\n         *    <=> y = x*D1 / [D1*T / (T-1)]\\n         *    <=> y = x * (T-1)/T\\n         *\\n         * Suppose that T' = T * ONE_HUNDRED_PERCENT_BPS, then:\\n         *\\n         *  => T = T' / ONE_HUNDRED_PERCENT_BPS\\n         * where T' is the target leverage in basis points unit\\n         *\\n         * We have:\\n         *      y = x * (T-1)/T\\n         *  <=> y = x * (T' / ONE_HUNDRED_PERCENT_BPS - 1) / (T' / ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> y = x * (T' - ONE_HUNDRED_PERCENT_BPS) / T'\\n         */\\n\\n        // Convert the target withdraw amount to base\\n        uint256 targetWithdrawAmountInBase = convertFromTokenAmountToBaseCurrency(\\n                targetWithdrawAmount,\\n                collateralAsset\\n            );\\n\\n        // Calculate the repay amount in base\\n        uint256 repayAmountInBase = (targetWithdrawAmountInBase *\\n            (leverageBpsBeforeRepayDebt -\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS)) /\\n            leverageBpsBeforeRepayDebt;\\n\\n        return convertFromBaseCurrencyToToken(repayAmountInBase, debtAsset);\\n    }\\n\\n    /**\\n     * @dev Gets the borrow amount that keeps the current leverage\\n     * @param collateralAsset The collateral asset\\n     * @param debtAsset The debt asset\\n     * @param suppliedCollateralAmount The actual supplied amount of collateral asset\\n     * @param leverageBpsBeforeSupply Leverage in basis points before supplying\\n     * @return expectedBorrowAmount The expected borrow amount that keeps the current leverage\\n     */\\n    function getBorrowAmountThatKeepCurrentLeverage(\\n        address collateralAsset,\\n        address debtAsset,\\n        uint256 suppliedCollateralAmount,\\n        uint256 leverageBpsBeforeSupply\\n    ) public view returns (uint256 expectedBorrowAmount) {\\n        /* Formula definition:\\n         * - C1: totalCollateralBase before supply (in base currency)\\n         * - D1: totalDebtBase before supply (in base currency)\\n         * - C2: totalCollateralBase after supply (in base currency)\\n         * - D2: totalDebtBase after supply (in base currency)\\n         * - T: target leverage\\n         * - x: supply amount in base currency\\n         * - y: borrow amount in base currency\\n         *\\n         * We have:\\n         *      C1 / (C1-D1) = C2 / (C2-D2)\\n         *      C2 = C1+x\\n         *      D2 = D1+y\\n         *      C1 / (C1-D1) = T <=> C1 = (C1-D1) * T <=> C1 = C1*T - D1*T <=> C1*T - C1 = D1*T <=> C1 = D1*T/(T-1)\\n         *\\n         * Formula expression:\\n         *      C1 / (C1-D1) = (C1+x) / (C1+x-D1-y)\\n         *  <=> C1 * (C1+x-D1-y) = (C1+x) * (C1-D1)\\n         *  <=> C1^2 + C1*x - C1*D1 - C1*y = C1^2 - C1*D1 + C1*x - D1*x\\n         *  <=> C1*y = x*D1\\n         *  <=> y = x*D1 / C1\\n         *  <=> y = x * (T-1)/T\\n         *\\n         * Suppose that:\\n         *      T' = T * ONE_HUNDRED_PERCENT_BPS, then:\\n         *   => T = T' / ONE_HUNDRED_PERCENT_BPS\\n         * where:\\n         *      - T' is the target leverage in basis points unit\\n         *\\n         * This is the formula to calculate the borrow amount that keeps the current leverage:\\n         *      y = x * (T-1)/T\\n         *  <=> y = x * (T' / ONE_HUNDRED_PERCENT_BPS - 1) / (T' / ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> y = x * (T' - ONE_HUNDRED_PERCENT_BPS) / T'\\n         */\\n\\n        // Convert the actual supplied amount to base\\n        uint256 suppliedCollateralAmountInBase = convertFromTokenAmountToBaseCurrency(\\n                suppliedCollateralAmount,\\n                collateralAsset\\n            );\\n\\n        // Calculate the borrow amount in base currency that keeps the current leverage\\n        uint256 borrowAmountInBase = (suppliedCollateralAmountInBase *\\n            (leverageBpsBeforeSupply -\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS)) /\\n            leverageBpsBeforeSupply;\\n\\n        return convertFromBaseCurrencyToToken(borrowAmountInBase, debtAsset);\\n    }\\n\\n    /* Rebalance */\\n\\n    /**\\n     * @dev Gets the collateral token amount to reach the target leverage\\n     *      - This method is only being called for increasing the leverage quote in getAmountToReachTargetLeverage()\\n     * @param expectedTargetLeverageBps The expected target leverage in basis points unit\\n     * @param totalCollateralBase The total collateral base\\n     * @param totalDebtBase The total debt base\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @param useVaultTokenBalance Whether to use the current token balance in the vault as the amount to rebalance\\n     * @return collateralTokenAmount The collateral token amount to reach the target leverage\\n     */\\n    function _getCollateralTokenAmountToReachTargetLeverage(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 subsidyBps,\\n        bool useVaultTokenBalance\\n    ) internal view returns (uint256) {\\n        /**\\n         * The formula is at getAmountToReachTargetLeverage()\\n         *\\n         * Calculate the amount of collateral token to supply\\n         * The original formula is:\\n         *      x = (T'*(C - D) - C*ONE_HUNDRED_PERCENT_BPS) * ONE_HUNDRED_PERCENT_BPS / (ONE_HUNDRED_PERCENT_BPS^2 + T' * k')\\n         *\\n         * However, the calculation of ONE_HUNDRED_PERCENT_BPS^2 causes arithmetic overflow,\\n         * so we need to simplify the formula to avoid the overflow.\\n         *\\n         * So, the transformed formula is:\\n         *      x = (T'*(C - D) - C*ONE_HUNDRED_PERCENT_BPS) / (ONE_HUNDRED_PERCENT_BPS + T' * k' / ONE_HUNDRED_PERCENT_BPS)\\n         */\\n        if (totalCollateralBase == 0) {\\n            revert TotalCollateralBaseIsZero();\\n        }\\n        if (totalCollateralBase < totalDebtBase) {\\n            revert TotalCollateralBaseIsLessThanTotalDebtBase(\\n                totalCollateralBase,\\n                totalDebtBase\\n            );\\n        }\\n\\n        uint256 requiredCollateralTokenAmountInBase = (expectedTargetLeverageBps *\\n                (totalCollateralBase - totalDebtBase) -\\n                totalCollateralBase *\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) /\\n                (BasisPointConstants.ONE_HUNDRED_PERCENT_BPS +\\n                    ((expectedTargetLeverageBps * subsidyBps) /\\n                        BasisPointConstants.ONE_HUNDRED_PERCENT_BPS));\\n\\n        // Convert to token unit\\n        uint256 requiredCollateralTokenAmount = convertFromBaseCurrencyToToken(\\n            requiredCollateralTokenAmountInBase,\\n            address(collateralToken)\\n        );\\n\\n        if (useVaultTokenBalance) {\\n            // Get the current collateral token balance in the vault to compensate the required collateral amount\\n            // when increasing the leverage\\n            uint256 collateralBalanceInVault = collateralToken.balanceOf(\\n                address(this)\\n            );\\n\\n            // If the required collateral token amount is more than the collateral balance in the vault,\\n            // the caller need to call increaseLeverage with the additional collateral token amount\\n            if (requiredCollateralTokenAmount > collateralBalanceInVault) {\\n                return requiredCollateralTokenAmount - collateralBalanceInVault;\\n            }\\n\\n            // Otherwise, it is a free lunch, the user call increaseLeverage without having to pay\\n            // for the collateral token\\n            return 0;\\n        }\\n\\n        // Otherwise, the user can call increaseLeverage with the required collateral token amount\\n        return requiredCollateralTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Gets the debt token amount to reach the target leverage\\n     *      - This method is only being called for decreasing the leverage quote in getAmountToReachTargetLeverage()\\n     * @param expectedTargetLeverageBps The expected target leverage in basis points unit\\n     * @param totalCollateralBase The total collateral base\\n     * @param totalDebtBase The total debt base\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @param useVaultTokenBalance Whether to use the current token balance in the vault as the amount to rebalance\\n     * @return requiredDebtTokenAmount The debt token amount to reach the target leverage\\n     */\\n    function _getDebtTokenAmountToReachTargetLeverage(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 subsidyBps,\\n        bool useVaultTokenBalance\\n    ) internal view returns (uint256) {\\n        /**\\n         * The formula is at getAmountToReachTargetLeverage()\\n         *\\n         * Calculate the amount of debt token to repay\\n         * The original formula is:\\n         *      x = (C*ONE_HUNDRED_PERCENT_BPS - T'*(C - D)) * ONE_HUNDRED_PERCENT_BPS / (ONE_HUNDRED_PERCENT_BPS^2 + T' * k')\\n         *\\n         * However, the calculation of ONE_HUNDRED_PERCENT_BPS^2 causes arithmetic overflow,\\n         * so we need to simplify the formula to avoid the overflow.\\n         *\\n         * So, the transformed formula is:\\n         *      x = (C*ONE_HUNDRED_PERCENT_BPS - T'*(C - D)) / (ONE_HUNDRED_PERCENT_BPS + T' * k' / ONE_HUNDRED_PERCENT_BPS)\\n         */\\n        if (totalCollateralBase == 0) {\\n            revert TotalCollateralBaseIsZero();\\n        }\\n        if (totalCollateralBase < totalDebtBase) {\\n            revert TotalCollateralBaseIsLessThanTotalDebtBase(\\n                totalCollateralBase,\\n                totalDebtBase\\n            );\\n        }\\n\\n        uint256 requiredDebtTokenAmountInBase = (totalCollateralBase *\\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS -\\n            expectedTargetLeverageBps *\\n            (totalCollateralBase - totalDebtBase)) /\\n            (BasisPointConstants.ONE_HUNDRED_PERCENT_BPS +\\n                (expectedTargetLeverageBps * subsidyBps) /\\n                BasisPointConstants.ONE_HUNDRED_PERCENT_BPS);\\n\\n        // Convert to token unit\\n        uint256 requiredDebtTokenAmount = convertFromBaseCurrencyToToken(\\n            requiredDebtTokenAmountInBase,\\n            address(debtToken)\\n        );\\n\\n        if (useVaultTokenBalance) {\\n            // Get the current debt token balance in the vault to compensate the required debt amount\\n            uint256 debtTokenBalanceInVault = debtToken.balanceOf(\\n                address(this)\\n            );\\n\\n            // If the required debt token amount is more than the debt token balance in the vault,\\n            // the caller need to call decreaseLeverage with the additional debt token amount\\n            if (requiredDebtTokenAmount > debtTokenBalanceInVault) {\\n                return requiredDebtTokenAmount - debtTokenBalanceInVault;\\n            }\\n\\n            // Otherwise, it is a free lunch, the user call decreaseLeverage without having to pay\\n            // for the debt token\\n            return 0;\\n        }\\n\\n        // Otherwise, the user can call decreaseLeverage with the required debt token amount\\n        return requiredDebtTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Gets the rebalance amount to reach the target leverage in token unit\\n     *      - This method is supposed to be used by the rebalancing service which will use it to quote the required\\n     *        collateral/debt amount and the corresponding direction (increase or decrease)\\n     * @param useVaultTokenBalance Whether to use the current token balance in the vault as the amount to rebalance\\n     *      - It will help to save the additional collateral/debt token transfer from the caller to the vault, while getting\\n     *        the same effect as calling increaseLeverage or decreaseLeverage with the required collateral/debt token amount\\n     * @return tokenAmount The amount of token to call increaseLeverage or decreaseLeverage (in token unit)\\n     *         - If the direction is 1, the amount is in collateral token\\n     *         - If the direction is -1, the amount is in debt token\\n     * @return direction The direction of the rebalance (1 for increase, -1 for decrease, 0 means no rebalance)\\n     */\\n    function getAmountToReachTargetLeverage(\\n        bool useVaultTokenBalance\\n    ) public view returns (uint256 tokenAmount, int8 direction) {\\n        /**\\n         * Formula definition:\\n         * - C: totalCollateralBase\\n         * - D: totalDebtBase\\n         * - T: target leverage\\n         * - k: subsidy (0.01 means 1%)\\n         * - x: change amount of collateral in base currency\\n         * - y: change amount of debt in base currency\\n         *\\n         * We have:\\n         *      y = x*(1+k)\\n         *      (C + x) / (C + x - D - y) = T\\n         *  <=> (C + x) / (C + x - D - x*(1+k)) = T\\n         *  <=> (C + x) = T * (C + x - D - x*(1+k))\\n         *  <=> C + x = T*C + T*x - T*D - T*x - T*x*k\\n         *  <=> C + x = T*C - T*D - T*x*k\\n         *  <=> x + T*x*k = T*C - T*D - C\\n         *  <=> x*(1 + T*k) = T*C - T*D - C\\n         *  <=> x = (T*(C - D) - C) / (1 + T*k)\\n         *\\n         * Suppose that:\\n         *      T' = T * ONE_HUNDRED_PERCENT_BPS\\n         *      k' = k * ONE_HUNDRED_PERCENT_BPS\\n         * then:\\n         *      T = T' / ONE_HUNDRED_PERCENT_BPS\\n         *      k = k' / ONE_HUNDRED_PERCENT_BPS\\n         * where:\\n         *      - T' is the target leverage in basis points unit\\n         *      - k' is the subsidy in basis points unit\\n         *\\n         * We have:\\n         *      x = (T*(C - D) - C) / (1 + T*k)\\n         *  <=> x = (T'*(C - D) / ONE_HUNDRED_PERCENT_BPS - C) / (1 + T'*k / ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> x = (T'*(C - D) - C*ONE_HUNDRED_PERCENT_BPS) / (ONE_HUNDRED_PERCENT_BPS + T'*k)\\n         *  <=> x = (T'*(C - D) - C*ONE_HUNDRED_PERCENT_BPS) / (ONE_HUNDRED_PERCENT_BPS + T' * k' / ONE_HUNDRED_PERCENT_BPS)\\n         *  <=> x = (T'*(C - D) - C*ONE_HUNDRED_PERCENT_BPS) * ONE_HUNDRED_PERCENT_BPS / (ONE_HUNDRED_PERCENT_BPS^2 + T' * k')\\n         *\\n         * If x > 0, it means the user should increase the leverage, so the direction is 1\\n         *    => x = (T*(C - D) - C) / (1 + T*k)\\n         *    => x = (T'*(C - D) - C*ONE_HUNDRED_PERCENT_BPS) * ONE_HUNDRED_PERCENT_BPS / (ONE_HUNDRED_PERCENT_BPS^2 + T' * k')\\n         * If x < 0, it means the user should decrease the leverage, so the direction is -1\\n         *    => x = (C - T*(C - D)) / (1 + T*k)\\n         *    => x = (C*ONE_HUNDRED_PERCENT_BPS - T'*(C - D)) * ONE_HUNDRED_PERCENT_BPS / (ONE_HUNDRED_PERCENT_BPS^2 + T' * k')\\n         * If x = 0, it means the user should not rebalance, so the direction is 0\\n         */\\n\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n        uint256 subsidyBps = getCurrentSubsidyBps();\\n        (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase\\n        ) = getTotalCollateralAndDebtOfUserInBase(address(this));\\n\\n        if (totalCollateralBase == 0) {\\n            // No collateral means no debt and no leverage, so no rebalance is needed\\n            return (0, 0);\\n        }\\n\\n        // If the current leverage is below the target leverage, the user should increase the leverage\\n        if (currentLeverageBps < targetLeverageBps) {\\n            return (\\n                _getCollateralTokenAmountToReachTargetLeverage(\\n                    targetLeverageBps,\\n                    totalCollateralBase,\\n                    totalDebtBase,\\n                    subsidyBps,\\n                    useVaultTokenBalance\\n                ),\\n                1\\n            );\\n        }\\n        // If the current leverage is above the target leverage, the user should decrease the leverage\\n        else if (currentLeverageBps > targetLeverageBps) {\\n            return (\\n                _getDebtTokenAmountToReachTargetLeverage(\\n                    targetLeverageBps,\\n                    totalCollateralBase,\\n                    totalDebtBase,\\n                    subsidyBps,\\n                    useVaultTokenBalance\\n                ),\\n                -1\\n            );\\n        }\\n\\n        // If the current leverage is equal to the target leverage, the user should not rebalance\\n        return (0, 0);\\n    }\\n\\n    /**\\n     * @dev Gets the required collateral token amount to reach the target leverage\\n     * @param expectedTargetLeverageBps The expected target leverage in basis points unit\\n     * @param totalCollateralBase The total collateral base\\n     * @param totalDebtBase The total debt base\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @param additionalCollateralTokenAmount The additional collateral token amount to supply\\n     * @return requiredCollateralTokenAmount The required collateral token amount to reach the target leverage\\n     */\\n    function _getRequiredCollateralTokenAmountToRebalance(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 subsidyBps,\\n        uint256 additionalCollateralTokenAmount\\n    ) internal view returns (uint256 requiredCollateralTokenAmount) {\\n        /* If the additional collateral token amount is 0, it means the expected collateral token amount to reach the target leverage\\n         * can be less than or equal to the current collateral token balance in the vault\\n         * Thus, we need to calculate the actual required collateral token amount to reach the target leverage\\n         * and then use the current collateral token balance in the vault to supply\\n         * - It is to avoid the situation where the current collateral token balance in the vault is too high\\n         *   and thus cannot call increaseLeverage with this balance as it will increase the leverage above the target leverage\\n         *\\n         * This function is only being used internally\\n         */\\n        if (additionalCollateralTokenAmount == 0) {\\n            return\\n                _getCollateralTokenAmountToReachTargetLeverage(\\n                    expectedTargetLeverageBps,\\n                    totalCollateralBase,\\n                    totalDebtBase,\\n                    subsidyBps,\\n                    false\\n                );\\n        }\\n\\n        // Otherwise, it means the expected collateral token amount to reach the target leverage\\n        // is less than the current collateral token balance in the vault\\n        uint256 collateralTokenBalanceInVault = collateralToken.balanceOf(\\n            address(this)\\n        );\\n        return collateralTokenBalanceInVault + additionalCollateralTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Gets the required debt token amount to reach the target leverage\\n     * @param expectedTargetLeverageBps The expected target leverage in basis points unit\\n     * @param totalCollateralBase The total collateral base\\n     * @param totalDebtBase The total debt base\\n     * @param subsidyBps The subsidy in basis points unit\\n     * @param additionalDebtTokenAmount The additional debt token amount to repay\\n     * @return requiredDebtTokenAmount The required debt token amount to reach the target leverage\\n     */\\n    function _getRequiredDebtTokenAmountToRebalance(\\n        uint256 expectedTargetLeverageBps,\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 subsidyBps,\\n        uint256 additionalDebtTokenAmount\\n    ) internal view returns (uint256 requiredDebtTokenAmount) {\\n        /* If the additional debt token amount is 0, it means the expected debt token amount to reach the target leverage\\n         * can be less than or equal to the current debt token balance in the vault\\n         * Thus, we need to calculate the actual required debt token amount to reach the target leverage\\n         * and then use the current debt token balance in the vault to repay\\n         * - It is to avoid the situation where the current debt token balance in the vault is too high\\n         *   and thus cannot call decreaseLeverage with this balance as it will decrease the leverage below the target leverage\\n         *\\n         * This function is only being used internally\\n         */\\n        if (additionalDebtTokenAmount == 0) {\\n            return\\n                _getDebtTokenAmountToReachTargetLeverage(\\n                    expectedTargetLeverageBps,\\n                    totalCollateralBase,\\n                    totalDebtBase,\\n                    subsidyBps,\\n                    false\\n                );\\n        }\\n\\n        uint256 debtTokenBalanceInVault = debtToken.balanceOf(address(this));\\n        return debtTokenBalanceInVault + additionalDebtTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Increases the leverage of the user by supplying collateral token and borrowing more debt token\\n     *      - It requires to spend the collateral token from the user's wallet to supply to the pool\\n     *      - It will send the borrowed debt token to the user's wallet\\n     * @param additionalCollateralTokenAmount The additional amount of collateral token to supply\\n     * @param minReceivedDebtTokenAmount The minimum amount of debt token to receive\\n     */\\n    function increaseLeverage(\\n        uint256 additionalCollateralTokenAmount,\\n        uint256 minReceivedDebtTokenAmount\\n    ) public nonReentrant {\\n        /**\\n         * Example of how this function works:\\n         *\\n         * Suppose that the target leverage is 3x, and the baseLTVAsCollateral is 70%\\n         * - The collateral token is WETH\\n         * - The debt here is dUSD\\n         * - Assume that the price of WETH is 2000 dUSD\\n         * - The current leverage is 1.25x\\n         *   - Total collateral: 100 WETH (100 * 2000 = 200,000 dUSD)\\n         *   - Total debt: 40,000 dUSD\\n         *   - Leverage: 200,000 / (200,000 - 40,000) = 1.25x\\n         *   - Assume that there is 0 collateral token in the vault\\n         *\\n         * 1. User call increaseLeverage with 50 WETH\\n         * 2. The vault transfers 50 WETH from the user's wallet to the vault\\n         * 3. The vault supplies 50 WETH to the lending pool\\n         * 4. The vault borrows 100,000 dUSD (50 * 2000) from the lending pool\\n         * 5. The vault sends 100,000 dUSD to the user\\n         *\\n         * The current leverage is now increased:\\n         *    - Total collateral: 150 WETH (150 * 2000 = 300,000 dUSD)\\n         *    - Total debt: 140,000 dUSD\\n         *    - Leverage: 300,000 / (300,000 - 140,000) = 1.875x\\n         */\\n\\n        (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase\\n        ) = getTotalCollateralAndDebtOfUserInBase(address(this));\\n        uint256 subsidyBps = getCurrentSubsidyBps();\\n\\n        // Make sure only increase the leverage if it is below the target leverage\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n        if (currentLeverageBps >= targetLeverageBps) {\\n            revert LeverageExceedsTarget(currentLeverageBps, targetLeverageBps);\\n        }\\n\\n        // Need to calculate the required collateral token amount before transferring the additional collateral token\\n        // to the vault as it will change the current collateral token balance in the vault\\n        uint256 requiredCollateralTokenAmount = _getRequiredCollateralTokenAmountToRebalance(\\n                targetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase,\\n                subsidyBps,\\n                additionalCollateralTokenAmount\\n            );\\n\\n        // Only transfer the collateral token if there is an additional amount to supply\\n        if (additionalCollateralTokenAmount > 0) {\\n            // Transfer the additional collateral token from the caller to the vault\\n            collateralToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                additionalCollateralTokenAmount\\n            );\\n        }\\n\\n        // Calculate the amount of collateral token in base currency\\n        uint256 requiredCollateralTokenAmountInBase = convertFromTokenAmountToBaseCurrency(\\n                requiredCollateralTokenAmount,\\n                address(collateralToken)\\n            );\\n\\n        // The amount of debt token to borrow (in base currency) is equal to the amount of collateral token supplied\\n        // plus the subsidy (bonus for the caller)\\n        uint256 borrowedDebtTokenInBase = (requiredCollateralTokenAmountInBase *\\n            (BasisPointConstants.ONE_HUNDRED_PERCENT_BPS + subsidyBps)) /\\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS;\\n\\n        // Calculate the new leverage after increasing the leverage\\n        uint256 newLeverageBps = ((totalCollateralBase +\\n            requiredCollateralTokenAmountInBase) *\\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) /\\n            (totalCollateralBase +\\n                requiredCollateralTokenAmountInBase -\\n                totalDebtBase -\\n                borrowedDebtTokenInBase);\\n\\n        // Make sure the new leverage is increasing and does not exceed the target leverage\\n        if (\\n            newLeverageBps > targetLeverageBps ||\\n            newLeverageBps <= currentLeverageBps\\n        ) {\\n            revert IncreaseLeverageOutOfRange(\\n                newLeverageBps,\\n                targetLeverageBps,\\n                currentLeverageBps\\n            );\\n        }\\n\\n        // Supply the collateral token to the lending pool\\n        _supplyToPool(\\n            address(collateralToken),\\n            requiredCollateralTokenAmount,\\n            address(this)\\n        );\\n\\n        // Borrow debt token\\n        uint256 borrowedDebtTokenAmount = convertFromBaseCurrencyToToken(\\n            borrowedDebtTokenInBase,\\n            address(debtToken)\\n        );\\n\\n        // Slippage protection, to make sure the user receives at least minReceivedDebtTokenAmount\\n        if (borrowedDebtTokenAmount < minReceivedDebtTokenAmount) {\\n            revert RebalanceReceiveLessThanMinAmount(\\n                \\\"increaseLeverage\\\",\\n                borrowedDebtTokenAmount,\\n                minReceivedDebtTokenAmount\\n            );\\n        }\\n\\n        // At this step, the _borrowFromPool wrapper function will also assert that\\n        // the borrowed amount is exactly the amount requested, thus we can safely\\n        // have the slippage check before calling this function\\n        _borrowFromPool(\\n            address(debtToken),\\n            borrowedDebtTokenAmount,\\n            address(this)\\n        );\\n\\n        // Transfer the debt token to the user\\n        debtToken.safeTransfer(msg.sender, borrowedDebtTokenAmount);\\n    }\\n\\n    /**\\n     * @dev Decreases the leverage of the user by repaying debt and withdrawing collateral\\n     *      - It requires to spend the debt token from the user's wallet to repay the debt to the pool\\n     *      - It will send the withdrawn collateral asset to the user's wallet\\n     * @param additionalDebtTokenAmount The additional amount of debt token to repay\\n     * @param minReceivedAmount The minimum amount of collateral asset to receive\\n     */\\n    function decreaseLeverage(\\n        uint256 additionalDebtTokenAmount,\\n        uint256 minReceivedAmount\\n    ) public nonReentrant {\\n        /**\\n         * Example of how this function works:\\n         *\\n         * Suppose that the target leverage is 3x, and the baseLTVAsCollateral is 70%\\n         * - The collateral token is WETH\\n         * - The debt here is dUSD\\n         * - Assume that the price of WETH is 2000 dUSD\\n         * - The current leverage is 4x\\n         *   - Total collateral: 100 WETH (100 * 2000 = 200,000 dUSD)\\n         *   - Total debt: 150,000 dUSD\\n         *   - Leverage: 200,000 / (200,000 - 150,000) = 4x\\n         *\\n         * 1. User call decreaseLeverage with 20,000 dUSD\\n         * 2. The vault transfers 20,000 dUSD from the user's wallet to the vault\\n         * 3. The vault repays 20,000 dUSD to the lending pool\\n         * 4. The vault withdraws 10 WETH (20,000 / 2000) from the lending pool\\n         * 5. The vault sends 10 WETH to the user\\n         *\\n         * The current leverage is now decreased:\\n         *    - Total collateral: 90 WETH (90 * 2000 = 180,000 dUSD)\\n         *    - Total debt: 130,000 dUSD\\n         *    - Leverage: 180,000 / (180,000 - 130,000) = 3.6x\\n         */\\n        // Make sure only decrease the leverage if it is above the target leverage\\n\\n        (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase\\n        ) = getTotalCollateralAndDebtOfUserInBase(address(this));\\n        uint256 subsidyBps = getCurrentSubsidyBps();\\n\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n        if (currentLeverageBps <= targetLeverageBps) {\\n            revert LeverageBelowTarget(currentLeverageBps, targetLeverageBps);\\n        }\\n\\n        // Need to calculate the required debt token amount before transferring the additional debt token\\n        // to the vault as it will change the current debt token balance in the vault\\n        uint256 requiredDebtTokenAmount = _getRequiredDebtTokenAmountToRebalance(\\n                targetLeverageBps,\\n                totalCollateralBase,\\n                totalDebtBase,\\n                subsidyBps,\\n                additionalDebtTokenAmount\\n            );\\n\\n        // Only transfer the debt token if there is an additional amount to repay\\n        if (additionalDebtTokenAmount > 0) {\\n            // Transfer the additional debt token from the caller to the vault\\n            debtToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                additionalDebtTokenAmount\\n            );\\n        }\\n\\n        // Calculate the amount of debt token in base currency\\n        uint256 requiredDebtTokenAmountInBase = convertFromTokenAmountToBaseCurrency(\\n                requiredDebtTokenAmount,\\n                address(debtToken)\\n            );\\n\\n        // The amount of collateral asset to withdraw is equal to the amount of debt token repaid\\n        // plus the subsidy (bonus for the caller)\\n        uint256 withdrawCollateralTokenInBase = (requiredDebtTokenAmountInBase *\\n            (BasisPointConstants.ONE_HUNDRED_PERCENT_BPS + subsidyBps)) /\\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS;\\n\\n        // Calculate the new leverage after decreasing the leverage\\n        uint256 newLeverageBps = ((totalCollateralBase -\\n            withdrawCollateralTokenInBase) *\\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) /\\n            (totalCollateralBase -\\n                withdrawCollateralTokenInBase -\\n                totalDebtBase +\\n                requiredDebtTokenAmountInBase);\\n\\n        // Make sure the new leverage is decreasing and is not below the target leverage\\n        if (\\n            newLeverageBps < targetLeverageBps ||\\n            newLeverageBps >= currentLeverageBps\\n        ) {\\n            revert DecreaseLeverageOutOfRange(\\n                newLeverageBps,\\n                targetLeverageBps,\\n                currentLeverageBps\\n            );\\n        }\\n\\n        // Repay the debt token to the lending pool\\n        _repayDebtToPool(\\n            address(debtToken),\\n            requiredDebtTokenAmount,\\n            address(this)\\n        );\\n\\n        // Withdraw collateral\\n        uint256 withdrawnCollateralTokenAmount = convertFromBaseCurrencyToToken(\\n            withdrawCollateralTokenInBase,\\n            address(collateralToken)\\n        );\\n\\n        // Slippage protection, to make sure the user receives at least minReceivedAmount\\n        if (withdrawnCollateralTokenAmount < minReceivedAmount) {\\n            revert RebalanceReceiveLessThanMinAmount(\\n                \\\"decreaseLeverage\\\",\\n                withdrawnCollateralTokenAmount,\\n                minReceivedAmount\\n            );\\n        }\\n\\n        // At this step, the _withdrawFromPool wrapper function will also assert that\\n        // the withdrawn amount is exactly the amount requested, thus we can safely\\n        // have the slippage check before calling this function\\n        _withdrawFromPool(\\n            address(collateralToken),\\n            withdrawnCollateralTokenAmount,\\n            address(this)\\n        );\\n\\n        // Transfer the collateral asset to the user\\n        collateralToken.safeTransfer(\\n            msg.sender,\\n            withdrawnCollateralTokenAmount\\n        );\\n    }\\n\\n    /* Informational */\\n\\n    /**\\n     * @dev Gets the current leverage in basis points\\n     * @return uint256 The current leverage in basis points\\n     */\\n    function getCurrentLeverageBps() public view returns (uint256) {\\n        (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase\\n        ) = getTotalCollateralAndDebtOfUserInBase(address(this));\\n\\n        if (totalCollateralBase < totalDebtBase) {\\n            revert CollateralLessThanDebt(totalCollateralBase, totalDebtBase);\\n        }\\n        if (totalCollateralBase == 0) {\\n            return 0;\\n        }\\n        if (totalCollateralBase == totalDebtBase) {\\n            return type(uint256).max; // infinite leverage\\n        }\\n        // The leverage will be 1 if totalDebtBase is 0 (no more debt)\\n        uint256 leverageBps = ((totalCollateralBase *\\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) /\\n            (totalCollateralBase - totalDebtBase));\\n        if (leverageBps <= BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert InvalidLeverage(leverageBps);\\n        }\\n        return leverageBps;\\n    }\\n\\n    /**\\n     * @dev Gets the current subsidy in basis points\\n     * @return uint256 The current subsidy in basis points\\n     */\\n    function getCurrentSubsidyBps() public view returns (uint256) {\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n\\n        uint256 subsidyBps;\\n        if (currentLeverageBps > targetLeverageBps) {\\n            subsidyBps =\\n                ((currentLeverageBps - targetLeverageBps) *\\n                    BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) /\\n                targetLeverageBps;\\n        } else {\\n            subsidyBps =\\n                ((targetLeverageBps - currentLeverageBps) *\\n                    BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) /\\n                targetLeverageBps;\\n        }\\n        if (subsidyBps > maxSubsidyBps) {\\n            return maxSubsidyBps;\\n        }\\n        return subsidyBps;\\n    }\\n\\n    /**\\n     * @dev Gets the address of the collateral token\\n     * @return address The address of the collateral token\\n     */\\n    function getCollateralTokenAddress() public view returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /**\\n     * @dev Gets the address of the debt token\\n     * @return address The address of the debt token\\n     */\\n    function getDebtTokenAddress() public view returns (address) {\\n        return address(debtToken);\\n    }\\n\\n    /**\\n     * @dev Gets the default maximum subsidy in basis points\\n     * @return uint256 The default maximum subsidy in basis points\\n     */\\n    function getDefaultMaxSubsidyBps() public view returns (uint256) {\\n        return maxSubsidyBps;\\n    }\\n\\n    /* Admin */\\n\\n    /**\\n     * @dev Sets the maximum subsidy in basis points\\n     * @param _maxSubsidyBps New maximum subsidy in basis points\\n     */\\n    function setMaxSubsidyBps(\\n        uint256 _maxSubsidyBps\\n    ) public onlyOwner nonReentrant {\\n        maxSubsidyBps = _maxSubsidyBps;\\n    }\\n\\n    /**\\n     * @dev Sets the lower and upper bounds of target leverage\\n     * @param _lowerBoundTargetLeverageBps New lower bound of target leverage in basis points\\n     * @param _upperBoundTargetLeverageBps New upper bound of target leverage in basis points\\n     */\\n    function setLeverageBounds(\\n        uint32 _lowerBoundTargetLeverageBps,\\n        uint32 _upperBoundTargetLeverageBps\\n    ) public onlyOwner nonReentrant {\\n        if (\\n            _lowerBoundTargetLeverageBps >= targetLeverageBps ||\\n            targetLeverageBps >= _upperBoundTargetLeverageBps\\n        ) {\\n            revert InvalidLeverageBounds(\\n                _lowerBoundTargetLeverageBps,\\n                targetLeverageBps,\\n                _upperBoundTargetLeverageBps\\n            );\\n        }\\n\\n        lowerBoundTargetLeverageBps = _lowerBoundTargetLeverageBps;\\n        upperBoundTargetLeverageBps = _upperBoundTargetLeverageBps;\\n    }\\n\\n    /* Overrides to add leverage check */\\n\\n    function maxDeposit(address _user) public view override returns (uint256) {\\n        // Don't allow deposit if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        return super.maxDeposit(_user);\\n    }\\n\\n    function maxMint(address _user) public view override returns (uint256) {\\n        // Don't allow mint if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        return super.maxMint(_user);\\n    }\\n\\n    function maxWithdraw(address _user) public view override returns (uint256) {\\n        // Don't allow withdraw if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        return super.maxWithdraw(_user);\\n    }\\n\\n    function maxRedeem(address _user) public view override returns (uint256) {\\n        // Don't allow redeem if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        return super.maxRedeem(_user);\\n    }\\n}\\n\",\"keccak256\":\"0x94243e3647c44e48aa5bd9eaff467afd774eec752ffa5df8f5924a135a0c3aec\",\"license\":\"MIT\"},\"contracts/vaults/dloop/periphery/DLoopRedeemerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {BasisPointConstants} from \\\"contracts/common/BasisPointConstants.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {IERC3156FlashBorrower} from \\\"./interface/flashloan/IERC3156FlashBorrower.sol\\\";\\nimport {IERC3156FlashLender} from \\\"./interface/flashloan/IERC3156FlashLender.sol\\\";\\nimport {DLoopCoreBase} from \\\"../core/DLoopCoreBase.sol\\\";\\nimport {SwappableVault} from \\\"contracts/common/SwappableVault.sol\\\";\\nimport {RescuableVault} from \\\"contracts/common/RescuableVault.sol\\\";\\n\\n/**\\n * @title DLoopRedeemerBase\\n * @dev A helper contract for withdrawing assets from the core vault with flash loans\\n *      - Suppose that the core contract has leverage of 3x, and the collateral token is WETH, debt token is dUSD, price of WETH is 1000, price of dUSD is 2000\\n *      - ie, given user has 300 shares representing 300 WETH, and wants to withdraw 300 WETH, this contract will do a flash loan to get 200 * 2000 dUSD\\n *        to repay the debt in the core vault, then withdraw 300 WETH from the core vault. The contract will swap 200 WETH to 200 * 2000 dUSD to repay the flash loan.\\n *      - In the final state, the user has 100 WETH (300 - 200), and the core contract has 0 WETH as collateral, 0 dUSD as debt\\n *      - NOTE: This contract only support redeem() from DLoopCore contracts, not withdraw()\\n */\\nabstract contract DLoopRedeemerBase is\\n    IERC3156FlashBorrower,\\n    Ownable,\\n    ReentrancyGuard,\\n    SwappableVault,\\n    RescuableVault\\n{\\n    using SafeERC20 for ERC20;\\n\\n    /* Constants */\\n\\n    bytes32 public constant FLASHLOAN_CALLBACK =\\n        keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /* Core state */\\n\\n    IERC3156FlashLender public immutable flashLender;\\n    // [dLoopCore][tokenAddress] -> leftOverAmount\\n    mapping(address => mapping(address => uint256))\\n        public minLeftoverCollateralTokenAmount;\\n    // [tokenAddress] -> exists (for gas efficient token tracking)\\n    mapping(address => bool) private _existingCollateralTokensMap;\\n    address[] public existingCollateralTokens;\\n\\n    /* Errors */\\n\\n    error UnknownLender(address msgSender, address flashLender);\\n    error UnknownInitiator(address initiator, address thisContract);\\n    error IncompatibleDLoopCoreDebtToken(\\n        address currentDebtToken,\\n        address dLoopCoreDebtToken\\n    );\\n    error SharesNotDecreasedAfterFlashLoan(\\n        uint256 sharesBeforeWithdraw,\\n        uint256 sharesAfterWithdraw\\n    );\\n    error InsufficientOutput(uint256 received, uint256 expected);\\n    error UnexpectedIncreaseInDebtToken(\\n        uint256 debtTokenBalanceBefore,\\n        uint256 debtTokenBalanceAfter\\n    );\\n    error UnexpectedDecreaseInCollateralToken(\\n        uint256 collateralTokenBalanceBefore,\\n        uint256 collateralTokenBalanceAfter\\n    );\\n    error UnexpectedDecreaseInCollateralTokenAfterFlashLoan(\\n        uint256 collateralTokenBalanceBefore,\\n        uint256 collateralTokenBalanceAfter\\n    );\\n    error IncorrectSharesBurned(uint256 expected, uint256 actual);\\n    error WithdrawnCollateralTokenAmountNotMetMinReceiveAmount(\\n        uint256 withdrawnCollateralTokenAmount,\\n        uint256 minReceiveCollateralTokenAmount\\n    );\\n    error EstimatedCollateralTokenAmountLessThanMinOutputCollateralAmount(\\n        uint256 currentCollateralTokenAmount,\\n        uint256 minOutputCollateralAmount\\n    );\\n    error FlashLenderNotSameAsDebtToken(address flashLender, address debtToken);\\n    error SlippageBpsCannotExceedOneHundredPercent(uint256 slippageBps);\\n\\n    /* Events */\\n\\n    event LeftoverCollateralTokenTransferred(\\n        address indexed dLoopCore,\\n        address indexed collateralToken,\\n        uint256 amount\\n    );\\n    event MinLeftoverCollateralTokenAmountSet(\\n        address indexed dLoopCore,\\n        address indexed collateralToken,\\n        uint256 minAmount\\n    );\\n\\n    /* Structs */\\n\\n    struct FlashLoanParams {\\n        uint256 shares;\\n        bytes collateralToDebtTokenSwapData;\\n        DLoopCoreBase dLoopCore;\\n    }\\n\\n    /**\\n     * @dev Constructor for the DLoopRedeemerBase contract\\n     * @param _flashLender Address of the flash loan provider\\n     */\\n    constructor(IERC3156FlashLender _flashLender) Ownable(msg.sender) {\\n        flashLender = _flashLender;\\n    }\\n\\n    /* RescuableVault Override */\\n\\n    /**\\n     * @dev Gets the restricted rescue tokens\\n     * @return restrictedTokens Restricted rescue tokens\\n     */\\n    function getRestrictedRescueTokens()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address[] memory restrictedTokens)\\n    {\\n        // Return the existing tokens as we handle leftover collateral tokens\\n        return existingCollateralTokens;\\n    }\\n\\n    /* Redeem */\\n\\n    /**\\n     * @dev Calculates the minimum output collateral amount for a given shares and slippage bps\\n     * @param shares Amount of shares to redeem\\n     * @param slippageBps Slippage bps\\n     * @param dLoopCore Address of the DLoopCore contract\\n     * @return minOutputCollateralAmount Minimum output collateral amount\\n     */\\n    function calculateMinOutputCollateral(\\n        uint256 shares,\\n        uint256 slippageBps,\\n        DLoopCoreBase dLoopCore\\n    ) public view returns (uint256) {\\n        if (slippageBps > BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert SlippageBpsCannotExceedOneHundredPercent(slippageBps);\\n        }\\n        uint256 expectedLeverageCollateral = dLoopCore.previewRedeem(shares);\\n        uint256 unleveragedCollateral = dLoopCore.getUnleveragedAssets(\\n            expectedLeverageCollateral\\n        );\\n        return\\n            (unleveragedCollateral *\\n                (BasisPointConstants.ONE_HUNDRED_PERCENT_BPS - slippageBps)) /\\n            BasisPointConstants.ONE_HUNDRED_PERCENT_BPS;\\n    }\\n\\n    /**\\n     * @dev Redeems shares from the core vault with flash loans\\n     *      - The required debt token to withdraw will be flash loaned from the flash lender\\n     * @param shares Amount of shares to redeem\\n     * @param receiver Address to receive the assets\\n     * @param minOutputCollateralAmount Minimum amount of collateral token to receive (slippage protection)\\n     * @param collateralToDebtTokenSwapData Swap data from collateral token to debt token\\n     * @param dLoopCore Address of the DLoopCore contract to use\\n     * @return assets Amount of assets redeemed\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        uint256 minOutputCollateralAmount,\\n        bytes calldata collateralToDebtTokenSwapData,\\n        DLoopCoreBase dLoopCore\\n    ) public nonReentrant returns (uint256 assets) {\\n        // Transfer the shares to the periphery contract to prepare for the redeeming process\\n        SafeERC20.safeTransferFrom(\\n            dLoopCore,\\n            msg.sender,\\n            address(this),\\n            shares\\n        );\\n\\n        // Do not need to transfer the debt token to repay the lending pool, as it will be done with flash loan\\n\\n        /**\\n         * In redeeming, we do not need to calculate the _calculateEstimatedOverallSlippageBps(), as the\\n         * withdrawn collateral token amount is always larger than the flashloan debt token amount (due to the leverage logic):\\n         *\\n         * According to the formula in DLoopCoreBase.getRepayAmountThatKeepCurrentLeverage():\\n         *       y = x * (T-1)/T\\n         *   and\\n         *       y = x * (T' - ONE_HUNDRED_PERCENT_BPS) / T'\\n         *   and\\n         *       T = T' / ONE_HUNDRED_PERCENT_BPS\\n         * where:\\n         *      - x is the collateral token amount\\n         *      - y is the debt token amount\\n         *      - T is the target leverage\\n         *      - T' is the target leverage in basis points unit\\n         *\\n         * We want find what is the condition of m so that we can withdraw the collateral token and swap\\n         * to the debt token which is sufficient to repay the flash loan amount and meet user minimum receiving\\n         * collateral amount. We want:\\n         *      y <= x * (1-s) - m\\n         * where:\\n         *      - m is the minimum receiving collateral amount in base currency\\n         *      - s is the swap slippage (0.01 means 1%)\\n         *\\n         * We have:\\n         *      y <= x * (1-s) - m\\n         *  <=> x * (T-1)/T <= x * (1-s) - m\\n         *  <=> x * (1-s) - x * (T-1)/T >= m\\n         *  <=> x * (1 - s - (T-1)/T) >= m\\n         *  <=> m <= x * (1 - s - (T-1)/T)\\n         *\\n         * Thus, the only thing to make the transaction works is to adjust the minOutputCollateralAmount\\n         * to be larger than the flashloan debt token amount, which is the leveraged amount\\n         */\\n\\n        // Create the flash loan params data\\n        FlashLoanParams memory params = FlashLoanParams(\\n            shares,\\n            collateralToDebtTokenSwapData,\\n            dLoopCore\\n        );\\n        bytes memory data = _encodeParamsToData(params);\\n        ERC20 collateralToken = dLoopCore.collateralToken();\\n        ERC20 debtToken = dLoopCore.debtToken();\\n        uint256 maxFlashLoanAmount = flashLender.maxFlashLoan(\\n            address(debtToken)\\n        );\\n\\n        // This value is used to calculate the shares burned after the flash loan\\n        uint256 sharesBeforeRedeem = dLoopCore.balanceOf(address(this));\\n\\n        // This value is used to calculate the received collateral token amount after the flash loan\\n        uint256 collateralTokenBalanceBefore = collateralToken.balanceOf(\\n            address(this)\\n        );\\n\\n        // Approve the flash lender to spend the flash loan amount of debt token from this contract\\n        debtToken.forceApprove(\\n            address(flashLender),\\n            maxFlashLoanAmount +\\n                flashLender.flashFee(address(debtToken), maxFlashLoanAmount)\\n        );\\n\\n        // Make sure the flashLender is the same as the debt token\\n        if (address(flashLender) != address(debtToken)) {\\n            revert FlashLenderNotSameAsDebtToken(\\n                address(flashLender),\\n                address(debtToken)\\n            );\\n        }\\n\\n        // The main logic will be done in the onFlashLoan function\\n        flashLender.flashLoan(\\n            this,\\n            address(debtToken),\\n            maxFlashLoanAmount,\\n            data\\n        );\\n\\n        // Check if the shares decreased after the flash loan\\n        uint256 sharesAfterRedeem = dLoopCore.balanceOf(address(this));\\n        if (sharesAfterRedeem >= sharesBeforeRedeem) {\\n            revert SharesNotDecreasedAfterFlashLoan(\\n                sharesBeforeRedeem,\\n                sharesAfterRedeem\\n            );\\n        }\\n\\n        // Make sure the burned shares is exactly the shares amount\\n        uint256 actualBurnedShares = sharesBeforeRedeem - sharesAfterRedeem;\\n        if (actualBurnedShares != shares) {\\n            revert IncorrectSharesBurned(shares, actualBurnedShares);\\n        }\\n\\n        // Collateral balance after the flash loan\\n        uint256 collateralTokenBalanceAfter = collateralToken.balanceOf(\\n            address(this)\\n        );\\n\\n        // Calculate the received collateral token amount after the flash loan\\n        if (collateralTokenBalanceAfter <= collateralTokenBalanceBefore) {\\n            revert UnexpectedDecreaseInCollateralTokenAfterFlashLoan(\\n                collateralTokenBalanceBefore,\\n                collateralTokenBalanceAfter\\n            );\\n        }\\n\\n        // Make sure the received collateral token amount is not less than the minimum output collateral amount\\n        // for slippage protection\\n        uint256 receivedCollateralTokenAmount = collateralTokenBalanceAfter -\\n            collateralTokenBalanceBefore;\\n        if (receivedCollateralTokenAmount < minOutputCollateralAmount) {\\n            revert WithdrawnCollateralTokenAmountNotMetMinReceiveAmount(\\n                receivedCollateralTokenAmount,\\n                minOutputCollateralAmount\\n            );\\n        }\\n\\n        // Transfer the received collateral token to the receiver\\n        collateralToken.safeTransfer(receiver, receivedCollateralTokenAmount);\\n\\n        // There is no leftover debt token, as all flash loaned debt token is used to repay the debt\\n        // when calling the redeem() function\\n\\n        // Handle any leftover collateral token and transfer them to the dLoopCore contract\\n        uint256 leftoverCollateralTokenAmount = collateralToken.balanceOf(\\n            address(this)\\n        );\\n        if (\\n            leftoverCollateralTokenAmount >\\n            minLeftoverCollateralTokenAmount[address(dLoopCore)][\\n                address(collateralToken)\\n            ]\\n        ) {\\n            collateralToken.safeTransfer(\\n                address(dLoopCore),\\n                leftoverCollateralTokenAmount\\n            );\\n            emit LeftoverCollateralTokenTransferred(\\n                address(dLoopCore),\\n                address(collateralToken),\\n                leftoverCollateralTokenAmount\\n            );\\n        }\\n\\n        // Return the received collateral token amount\\n        return receivedCollateralTokenAmount;\\n    }\\n\\n    /* Flash loan entrypoint */\\n\\n    /**\\n     * @dev Callback function for flash loans\\n     * @param initiator Address that initiated the flash loan\\n     * @param token Address of the flash-borrowed token\\n     * @param data Encoded flash loan parameters\\n     * @return bytes32 The flash loan callback success bytes\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256, // amount (flash loan amount)\\n        uint256 flashLoanFee, // fee (flash loan fee)\\n        bytes calldata data\\n    ) external override returns (bytes32) {\\n        // This function does not need nonReentrant as the flash loan will be called by redeem() public\\n        // function, which is already protected by nonReentrant\\n        // Moreover, this function is only be able to be called by the address(this) (check the initiator condition)\\n        // thus even though the flash loan is public and not protected by nonReentrant, it is still safe\\n        if (msg.sender != address(flashLender))\\n            revert UnknownLender(msg.sender, address(flashLender));\\n        if (initiator != address(this))\\n            revert UnknownInitiator(initiator, address(this));\\n\\n        // Decode the flash loan params data\\n        FlashLoanParams memory flashLoanParams = _decodeDataToParams(data);\\n        DLoopCoreBase dLoopCore = flashLoanParams.dLoopCore;\\n        ERC20 collateralToken = dLoopCore.collateralToken();\\n        ERC20 debtToken = dLoopCore.debtToken();\\n\\n        // Make sure the input dLoopCore is compatible with this periphery contract\\n        if (token != address(debtToken))\\n            revert IncompatibleDLoopCoreDebtToken(token, address(debtToken));\\n\\n        // This value is used to calculate the debt token was used from the flash loan\\n        uint256 debtTokenBalanceBefore = debtToken.balanceOf(address(this));\\n\\n        /**\\n         * Redeem the shares to get the collateral token\\n         * The core vault will also take the debt token from the periphery contract\\n         * to repay the debt and then withdraw the collateral token\\n         *\\n         * The receiver is this periphery contract as it needs to use the collateral token\\n         * to swap to the debt token to repay the flash loan\\n         *\\n         * The owner is the owner of the shares as it needs to burn the shares\\n         */\\n        debtToken.forceApprove(\\n            address(dLoopCore),\\n            type(uint256).max // No slippage tolerance\\n        );\\n        dLoopCore.redeem(\\n            flashLoanParams.shares,\\n            address(this), // receiver\\n            // the owner is the periphery contract as the shares were transferred from the owner to the periphery contract\\n            address(this) // owner\\n        );\\n        // Approve back to 0 to avoid any potential exploits later\\n        debtToken.forceApprove(address(dLoopCore), 0);\\n\\n        // Calculate the debt token was used from the flash loan\\n        uint256 debtTokenBalanceAfter = debtToken.balanceOf(address(this));\\n        if (debtTokenBalanceAfter > debtTokenBalanceBefore) {\\n            revert UnexpectedIncreaseInDebtToken(\\n                debtTokenBalanceBefore,\\n                debtTokenBalanceAfter\\n            );\\n        }\\n        uint256 debtTokenUsed = debtTokenBalanceBefore - debtTokenBalanceAfter;\\n\\n        /**\\n         * Swap the collateral token to the debt token to repay the flash loan\\n         *\\n         * Slippage protection is not needed here as the received collateral token\\n         * will be protected by the minOutputCollateralAmount of the redeem() function\\n         * - It means, if the swap has too high slippage, the final output collateral token\\n         *   amount will be less than the minOutputCollateralAmount, which will be reverted\\n         *   by the redeem() function\\n         */\\n        _swapExactOutput(\\n            collateralToken,\\n            debtToken,\\n            debtTokenUsed + flashLoanFee,\\n            type(uint256).max, // No slippage tolerance\\n            address(this),\\n            block.timestamp,\\n            flashLoanParams.collateralToDebtTokenSwapData\\n        );\\n\\n        // If the swapped debt token amount is less than the debt token used,\\n        // the flash loan fee will be reverted\\n\\n        // Return the success bytes\\n        return FLASHLOAN_CALLBACK;\\n    }\\n\\n    /* Setters */\\n\\n    /**\\n     * @dev Sets the minimum leftover collateral token amount for a given dLoopCore and collateral token\\n     * @param dLoopCore Address of the dLoopCore contract\\n     * @param collateralToken Address of the collateral token\\n     * @param minAmount Minimum leftover collateral token amount for the given dLoopCore and collateral token\\n     */\\n    function setMinLeftoverCollateralTokenAmount(\\n        address dLoopCore,\\n        address collateralToken,\\n        uint256 minAmount\\n    ) external nonReentrant onlyOwner {\\n        minLeftoverCollateralTokenAmount[dLoopCore][\\n            collateralToken\\n        ] = minAmount;\\n        if (!_existingCollateralTokensMap[collateralToken]) {\\n            _existingCollateralTokensMap[collateralToken] = true;\\n            existingCollateralTokens.push(collateralToken);\\n        }\\n        emit MinLeftoverCollateralTokenAmountSet(\\n            dLoopCore,\\n            collateralToken,\\n            minAmount\\n        );\\n    }\\n\\n    /* Data encoding/decoding helpers */\\n\\n    /**\\n     * @dev Encodes flash loan parameters to data\\n     * @param _flashLoanParams Flash loan parameters\\n     * @return data Encoded data\\n     */\\n    function _encodeParamsToData(\\n        FlashLoanParams memory _flashLoanParams\\n    ) internal pure returns (bytes memory data) {\\n        data = abi.encode(\\n            _flashLoanParams.shares,\\n            _flashLoanParams.collateralToDebtTokenSwapData,\\n            _flashLoanParams.dLoopCore\\n        );\\n    }\\n\\n    /**\\n     * @dev Decodes data to flash loan withdraw parameters\\n     * @param data Encoded data\\n     * @return _flashLoanParams Decoded flash loan parameters\\n     */\\n    function _decodeDataToParams(\\n        bytes memory data\\n    ) internal pure returns (FlashLoanParams memory _flashLoanParams) {\\n        (\\n            _flashLoanParams.shares,\\n            _flashLoanParams.collateralToDebtTokenSwapData,\\n            _flashLoanParams.dLoopCore\\n        ) = abi.decode(data, (uint256, bytes, DLoopCoreBase));\\n    }\\n}\\n\",\"keccak256\":\"0xcb384f54c5befac9aef2a334b6164d045b3239a93f417e6b1131d3ebf1470fb6\",\"license\":\"MIT\"},\"contracts/vaults/dloop/periphery/interface/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfd9ef1fa32aeca04e3911d712ba4a4a87d7a1b5a3a216adc857dcc79579b2aa9\",\"license\":\"GNU AGPLv3\"},\"contracts/vaults/dloop/periphery/interface/flashloan/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x01621dcebe463f5e1651009923207cf5ab0bb5e64f2aba227f1b860afe606e7c\",\"license\":\"GNU AGPLv3\"},\"contracts/vaults/dloop/periphery/venue/odos/DLoopRedeemerOdos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport {DLoopRedeemerBase, ERC20, IERC3156FlashLender} from \\\"../../DLoopRedeemerBase.sol\\\";\\nimport {OdosSwapLogic, IOdosRouterV2} from \\\"./OdosSwapLogic.sol\\\";\\n\\n/**\\n * @title DLoopRedeemerOdos\\n * @dev Implementation of DLoopRedeemerBase with Odos swap functionality\\n */\\ncontract DLoopRedeemerOdos is DLoopRedeemerBase {\\n    IOdosRouterV2 public immutable odosRouter;\\n\\n    /**\\n     * @dev Constructor for the DLoopRedeemerOdos contract\\n     * @param _flashLender Address of the flash loan provider\\n     * @param _odosRouter Address of the Odos router\\n     */\\n    constructor(\\n        IERC3156FlashLender _flashLender,\\n        IOdosRouterV2 _odosRouter\\n    ) DLoopRedeemerBase(_flashLender) {\\n        odosRouter = _odosRouter;\\n    }\\n\\n    /**\\n     * @dev Swaps an exact amount of output tokens for the minimum input tokens using Odos\\n     */\\n    function _swapExactOutputImplementation(\\n        ERC20 inputToken,\\n        ERC20 outputToken,\\n        uint256 amountOut,\\n        uint256 amountInMaximum,\\n        address receiver,\\n        uint256 deadline,\\n        bytes memory underlyingToDStableSwapData\\n    ) internal override returns (uint256) {\\n        return\\n            OdosSwapLogic.swapExactOutput(\\n                inputToken,\\n                outputToken,\\n                amountOut,\\n                amountInMaximum,\\n                receiver,\\n                deadline,\\n                underlyingToDStableSwapData,\\n                odosRouter\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa192816c04bba47c78c17393d3ecca7d5c2ad863e47d3a28c3e9c2a01200da3d\",\"license\":\"MIT\"},\"contracts/vaults/dloop/periphery/venue/odos/OdosSwapLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport {ERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {IOdosRouterV2} from \\\"contracts/odos/interface/IOdosRouterV2.sol\\\";\\nimport {OdosSwapUtils} from \\\"contracts/odos/OdosSwapUtils.sol\\\";\\n\\n/**\\n * @title OdosSwapLogic\\n * @dev Library for common Odos swap functions used in dLOOP contracts\\n */\\nlibrary OdosSwapLogic {\\n    using SafeERC20 for ERC20;\\n\\n    /**\\n     * @dev Swaps an exact amount of output tokens for input tokens using Odos router\\n     * @param inputToken Input token to be swapped\\n     * @param outputToken Output token to receive (used for validating the swap direction)\\n     * @param amountOut Exact amount of output tokens to receive\\n     * @param amountInMaximum Maximum amount of input tokens to spend\\n     * @param receiver Address to receive the output tokens (not used directly in Odos, but kept for interface consistency)\\n     * @param swapData Encoded swap data for Odos router\\n     * @param odosRouter Odos router instance\\n     * @return uint256 Amount of input tokens used\\n     */\\n    function swapExactOutput(\\n        ERC20 inputToken,\\n        ERC20 outputToken,\\n        uint256 amountOut,\\n        uint256 amountInMaximum,\\n        address receiver,\\n        uint256, // deadline, not used in Odos\\n        bytes memory swapData,\\n        IOdosRouterV2 odosRouter\\n    ) external returns (uint256) {\\n        // Use the OdosSwapUtils library to execute the swap\\n        uint256 actualAmountOut = OdosSwapUtils.excuteSwapOperation(\\n            odosRouter,\\n            address(inputToken),\\n            amountInMaximum,\\n            amountOut,\\n            swapData\\n        );\\n\\n        // If we received more than requested, transfer the surplus to the receiver\\n        if (actualAmountOut > amountOut && receiver != address(this)) {\\n            uint256 surplus = actualAmountOut - amountOut;\\n            ERC20(outputToken).safeTransfer(receiver, surplus);\\n        }\\n\\n        // Return the actual output amount\\n        return actualAmountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xb12f7feece0d552d2f3a70ef95e1d54c5d702b3ac8b8c34bb5bb64f02dc613e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c03461012357601f611def38819003918201601f19168301916001600160401b038311848410176101285780849260409485528339810103126101235780516001600160a01b03918282168203610123576020015190828216820361012357331561010a576000543360018060a01b0319821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001805560805260a052611cb0908161013f82396080518181816105aa015281816108440152818161091101528181610971015281816109e301528181610a5801528181610d7901528181610dc601526110bb015260a05181818161061801526114970152f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816323e30c8b1461106e575080632ae1810414611033578063500fc43414610f6b57806357ae0a72146106a0578063715018a6146106475780638321928d146106025780638da5cb5b146105d9578063a771445814610594578063b627bd401461047e578063e5711e8b1461033e578063e7a41486146101df578063e9c9dbff1461018e578063f2fde38b146101005763fc908293146100b957600080fd5b346100fb5760203660031901126100fb576004356004548110156100fb576100e2602091611a11565b905460405160039290921b1c6001600160a01b03168152f35b600080fd5b346100fb5760203660031901126100fb57610119611982565b610121611a5e565b6001600160a01b0390811690811561017557600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346100fb5760403660031901126100fb576101a7611982565b6101af611998565b9060018060a01b038091166000526002602052604060002091166000526020526020604060002054604051908152f35b346100fb5760603660031901126100fb5760248035906044356001600160a01b03811691908290036100fb57620f4240908184116103285760405163266d6a8360e11b815260048035908201526020949085818481885afa80156102ed5786916000916102f9575b50836040518097819363c879cf7d60e01b835260048301525afa9384156102ed576000946102be575b508203928284116102a957838102938185041490151715610295575060405191048152f35b634e487b7160e01b60009081526011600452fd5b50634e487b7160e01b60009081526011600452fd5b9093508481813d83116102e6575b6102d68183611ac2565b810103126100fb57519285610270565b503d6102cc565b6040513d6000823e3d90fd5b82819392503d8311610321575b6103108183611ac2565b810103126100fb5785905187610247565b503d610306565b60405163103b7d4960e11b815260048101859052fd5b346100fb5761034c366119dc565b9091610356611a5e565b61035e611b83565b60405191829060045480855282602080960160046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9260005b8882821061045f575050506103b192500383611ac2565b60005b825181101561044557600581901b83018501516001600160a01b038581169116146104005760001981146103ea576001016103b4565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260048101869052601e60248201527f43616e6e6f7420726573637565207265737472696374656420746f6b656e00006044820152606490fd5b61045982876001600160a01b038716611ae4565b60018055005b85546001600160a01b031684526001958601958895509301920161039a565b346100fb5761048c366119dc565b9091610496611b83565b61049e611a5e565b60018060a01b0380911691826000526002602052816040600020941693846000526020528060406000205560036020526040600020805460ff811615610512575b85857f0c50c097ce2862533c8b4cf54b8114ed60cba691c6e486c7e17d4e5908a46dda602086604051908152a360018055005b60ff19166001179055600454906801000000000000000082101561057e577f0c50c097ce2862533c8b4cf54b8114ed60cba691c6e486c7e17d4e5908a46dda9261056483600160209501600455611a11565b819291549060031b9188831b921b191617905590856104df565b634e487b7160e01b600052604160045260246000fd5b346100fb5760003660031901126100fb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fb5760003660031901126100fb576000546040516001600160a01b039091168152602090f35b346100fb5760003660031901126100fb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fb5760003660031901126100fb57610660611a5e565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100fb5760a03660031901126100fb576106b9611998565b67ffffffffffffffff906064358281116100fb576106db9036906004016119ae565b92608435916001600160a01b03831683036100fb576106f8611b83565b604051906323b872dd60e01b602083015233602483015230604483015260043560648301526064825260a08201928284109084111761057e5761074d610766926107b89460405260018060a01b038616611b27565b6040519561075a87611a8a565b60043587523691611bcf565b9384602082015260018060a01b03831660408201525161079b6040519586926020840152606060408401526080830190611c55565b6001600160a01b038416606083015203601f198101855284611ac2565b604051632c805af560e21b8152926020846004816001600160a01b0386165afa9384156102ed57600094610f4a575b50604051631f1b131360e31b8152906020826004816001600160a01b0387165afa9182156102ed57600092610f19575b5060405163613255ab60e01b81526001600160a01b038381166004830152909190602090839060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9182156102ed57600092610ee5575b506040516370a0823160e01b8152306004820152916020836024816001600160a01b0389165afa9283156102ed57600093610eb1575b506040516370a0823160e01b8152306004820152936020856024816001600160a01b038c165afa9485156102ed57600095610e7d575b50604051633676633960e21b81526001600160a01b038216600482015260248101839052602081806044810103817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa80156102ed57600090610e49575b610954915083611c25565b60405163095ea7b360e01b60208083018281526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602485015260448085019590955293835290926000906109b2606485611ac2565b835190826001600160a01b0388165af16000513d82610e24575b505015610dad575b50506001600160a01b038181167f000000000000000000000000000000000000000000000000000000000000000090911603610d6257604051632e7ff4ef60e11b81523060048201526001600160a01b0390911660248201526044810191909152608060648201529060209082908190610a52906084830190611c55565b038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102ed57610d2a575b506040516370a0823160e01b8152306004820152906020826024816001600160a01b0388165afa9182156102ed57600092610cf6575b5080821015610cd95790610ad691611ba6565b6004358103610cb957506040516370a0823160e01b81523060048201526020816024816001600160a01b0389165afa9081156102ed57600091610c87575b5081811115610c695790610b2791611ba6565b91604435808410610c4b5750610b489083906001600160a01b038616611ae4565b6040516370a0823160e01b8152306004820152926020846024816001600160a01b0385165afa9081156102ed57600091610c16575b6001600160a01b0383811660009081526002602090815260408083209385168352928152919020549095508211610bbe575b50505060018055604051908152f35b7fad79d05acd80cdd541a6b69468eb8c356bfb5426652f379c4c6d945f1ea15ec3908590610bf9846001600160a01b03878116908416611ae4565b6040519384526001600160a01b03908116941692a3828080610baf565b90506020843d602011610c43575b81610c3160209383611ac2565b810103126100fb576020935190610b7d565b3d9150610c24565b83604491604051916347247e7760e11b835260048301526024820152fd5b6044925060405191637506a25d60e11b835260048301526024820152fd5b90506020813d602011610cb1575b81610ca260209383611ac2565b810103126100fb575185610b14565b3d9150610c95565b604490604051906302d753ed60e61b825260043560048301526024820152fd5b60449160405191632b9e770560e11b835260048301526024820152fd5b9091506020813d602011610d22575b81610d1260209383611ac2565b810103126100fb57519086610ac3565b3d9150610d05565b6020813d602011610d5a575b81610d4360209383611ac2565b810103126100fb5751801515036100fb5785610a8d565b3d9150610d36565b60405163aaae67a160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152919091166024820152604490fd5b610e0e610e1d9260405190602082015260018060a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526000604482015260448152610dff81611aa6565b6001600160a01b038516611b27565b6001600160a01b038316611b27565b88806109d4565b909150610e4157506001600160a01b0383163b15155b8b806109cc565b600114610e3a565b506020813d602011610e75575b81610e6360209383611ac2565b810103126100fb576109549051610949565b3d9150610e56565b9094506020813d602011610ea9575b81610e9960209383611ac2565b810103126100fb575193886108e1565b3d9150610e8c565b9092506020813d602011610edd575b81610ecd60209383611ac2565b810103126100fb575191876108ab565b3d9150610ec0565b9091506020813d602011610f11575b81610f0160209383611ac2565b810103126100fb57519086610875565b3d9150610ef4565b610f3c91925060203d602011610f43575b610f348183611ac2565b810190611c06565b9085610817565b503d610f2a565b610f6491945060203d602011610f4357610f348183611ac2565b92846107e7565b346100fb5760003660031901126100fb57604051806004548083526020809301809160046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9060005b86828210611016578686610fcd82880383611ac2565b604051928392818401908285525180915260408401929160005b828110610ff657505050500390f35b83516001600160a01b031685528695509381019392810192600101610fe7565b83546001600160a01b031685529093019260019283019201610fb7565b346100fb5760003660031901126100fb5760206040517f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98152f35b346100fb5760a03660031901126100fb57611087611982565b90611090611998565b906084359267ffffffffffffffff938481116100fb576110b49036906004016119ae565b90929091907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163381900361195f575050306001600160a01b0382160361193657509061110a913691611bcf565b906040519261111884611a8a565b60008452606060208501526040840192600084528051810190606081602084019303126100fb5760208101519260408201519081116100fb5781019082603f830112156100fb5760208201519161116e83611bb3565b9361117c6040519586611ac2565b838552604084830101116100fb5760609261119e916040602087019101611c32565b0151936001600160a01b03851685036100fb576001600160a01b03851690819052602086810192909252918552604051632c805af560e21b81529391849060049082905afa9283156102ed57600093611915575b50604051631f1b131360e31b8152916020836004816001600160a01b0386165afa9283156102ed576000936118f4575b506001600160a01b03838116908216036118ca57506040516370a0823160e01b8152306004820152906020826024816001600160a01b0387165afa9182156102ed57600092611896575b5060405163095ea7b360e01b60208201526001600160a01b038216602482015260001960448083019190915281526112a381611aa6565b8051602090600090838301826001600160a01b0389165af16000513d82611871575b50501561181e575b508451604051635d043b2960e11b815260048101919091523060248201819052604482015260208160648160006001600160a01b0387165af180156102ed576117f3575b5060405163095ea7b360e01b60208083019182526001600160a01b0384166024840152600060448085018290528452909161134b84611aa6565b835190826001600160a01b0389165af16000513d826117ce575b50501561176b575b50506040516370a0823160e01b81523060048201526020816024816001600160a01b0387165afa9081156102ed57600091611739575b5081811161171b576020916113be6113c39260643592611ba6565b611c25565b9301516040516370a0823160e01b815230600482015290926001600160a01b031690602081602481855afa9081156102ed576000916116e9575b506040516370a0823160e01b8152306004820152926020846024816001600160a01b0385165afa9384156102ed576000946116b2575b506040516304ecaec960e31b8152600481018490526001600160a01b03821660248201526044810187905260001960648201523060848201524260a482015261010060c482015293949293926020908490819061149590610104830190611c55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660e4830152038173f407Fc422d663D2dAab7DbceA44E16aDe15ca87d5af49283156102ed5760009361167b575b506020602494604051958680926370a0823160e01b82523060048301525afa9384156102ed57600094611646575b506040516370a0823160e01b81523060048201529390602090859060249082906001600160a01b03165afa9384156102ed57600094611612575b508181106115dd575b505050818111156115c0579061157291611ba6565b8181036115a35760206040517f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98152f35b60449160405191638919e25360e01b835260048301526024820152fd5b60449250604051916204bb6760e81b835260048301526024820152fd5b6115e691611ba6565b908082036115f4578061155d565b6044925060405191637654e04760e11b835260048301526024820152fd5b9093506020813d60201161163e575b8161162e60209383611ac2565b810103126100fb57519286611554565b3d9150611621565b93506020843d602011611673575b8161166160209383611ac2565b810103126100fb57925192602061151a565b3d9150611654565b9392506020843d6020116116aa575b8161169760209383611ac2565b810103126100fb579251919260206114ec565b3d915061168a565b9293506020833d6020116116e1575b816116ce60209383611ac2565b810103126100fb57915192916020611433565b3d91506116c1565b90506020813d602011611713575b8161170460209383611ac2565b810103126100fb5751856113fd565b3d91506116f7565b604492506040519163a40ed01360e01b835260048301526024820152fd5b90506020813d602011611763575b8161175460209383611ac2565b810103126100fb5751856113a3565b3d9150611747565b60405163095ea7b360e01b60208201526001600160a01b039092166024830152600060448084019190915282526117c7916117b8906117a981611aa6565b6001600160a01b038616611b27565b6001600160a01b038416611b27565b848061136d565b9091506117eb57506001600160a01b0384163b15155b8780611365565b6001146117e4565b602090813d8311611817575b6118098183611ac2565b810103126100fb5785611311565b503d6117ff565b60405163095ea7b360e01b60208201526001600160a01b03831660248201526000604480830191909152815261186b9190610dff9061185c81611aa6565b6001600160a01b038716611b27565b856112cd565b90915061188e57506001600160a01b0384163b15155b87806112c5565b600114611887565b9091506020813d6020116118c2575b816118b260209383611ac2565b810103126100fb5751908561126c565b3d91506118a5565b60405163c7f1118d60e01b81526001600160a01b0391821660048201529083166024820152604490fd5b61190e91935060203d602011610f4357610f348183611ac2565b9185611222565b61192f91935060203d602011610f4357610f348183611ac2565b91846111f2565b604051636705ec4760e11b81526001600160a01b03919091166004820152306024820152604490fd5b631a01026f60e01b82523360048301526001600160a01b03166024820152604490fd5b600435906001600160a01b03821682036100fb57565b602435906001600160a01b03821682036100fb57565b9181601f840112156100fb5782359167ffffffffffffffff83116100fb57602083818601950101116100fb57565b60609060031901126100fb576001600160a01b039060043582811681036100fb579160243590811681036100fb579060443590565b600454811015611a485760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b03163303611a7257565b60405163118cdaa760e01b8152336004820152602490fd5b6060810190811067ffffffffffffffff82111761057e57604052565b6080810190811067ffffffffffffffff82111761057e57604052565b90601f8019910116810190811067ffffffffffffffff82111761057e57604052565b60405163a9059cbb60e01b60208201526001600160a01b03929092166024830152604480830193909352918152611b2591611b20606483611ac2565b611b27565b565b906000602091828151910182855af1156102ed576000513d611b7a57506001600160a01b0381163b155b611b585750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415611b51565b600260015414611b94576002600155565b604051633ee5aeb560e01b8152600490fd5b919082039182116103ea57565b67ffffffffffffffff811161057e57601f01601f191660200190565b929192611bdb82611bb3565b91611be96040519384611ac2565b8294818452818301116100fb578281602093846000960137010152565b908160209103126100fb57516001600160a01b03811681036100fb5790565b919082018092116103ea57565b60005b838110611c455750506000910152565b8181015183820152602001611c35565b90602091611c6e81518092818552858086019101611c32565b601f01601f191601019056fea264697066735822122065d32210562196f237f238e5c558091632aa3ef029cc188c73a429341593568b64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816323e30c8b1461106e575080632ae1810414611033578063500fc43414610f6b57806357ae0a72146106a0578063715018a6146106475780638321928d146106025780638da5cb5b146105d9578063a771445814610594578063b627bd401461047e578063e5711e8b1461033e578063e7a41486146101df578063e9c9dbff1461018e578063f2fde38b146101005763fc908293146100b957600080fd5b346100fb5760203660031901126100fb576004356004548110156100fb576100e2602091611a11565b905460405160039290921b1c6001600160a01b03168152f35b600080fd5b346100fb5760203660031901126100fb57610119611982565b610121611a5e565b6001600160a01b0390811690811561017557600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346100fb5760403660031901126100fb576101a7611982565b6101af611998565b9060018060a01b038091166000526002602052604060002091166000526020526020604060002054604051908152f35b346100fb5760603660031901126100fb5760248035906044356001600160a01b03811691908290036100fb57620f4240908184116103285760405163266d6a8360e11b815260048035908201526020949085818481885afa80156102ed5786916000916102f9575b50836040518097819363c879cf7d60e01b835260048301525afa9384156102ed576000946102be575b508203928284116102a957838102938185041490151715610295575060405191048152f35b634e487b7160e01b60009081526011600452fd5b50634e487b7160e01b60009081526011600452fd5b9093508481813d83116102e6575b6102d68183611ac2565b810103126100fb57519285610270565b503d6102cc565b6040513d6000823e3d90fd5b82819392503d8311610321575b6103108183611ac2565b810103126100fb5785905187610247565b503d610306565b60405163103b7d4960e11b815260048101859052fd5b346100fb5761034c366119dc565b9091610356611a5e565b61035e611b83565b60405191829060045480855282602080960160046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9260005b8882821061045f575050506103b192500383611ac2565b60005b825181101561044557600581901b83018501516001600160a01b038581169116146104005760001981146103ea576001016103b4565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260048101869052601e60248201527f43616e6e6f7420726573637565207265737472696374656420746f6b656e00006044820152606490fd5b61045982876001600160a01b038716611ae4565b60018055005b85546001600160a01b031684526001958601958895509301920161039a565b346100fb5761048c366119dc565b9091610496611b83565b61049e611a5e565b60018060a01b0380911691826000526002602052816040600020941693846000526020528060406000205560036020526040600020805460ff811615610512575b85857f0c50c097ce2862533c8b4cf54b8114ed60cba691c6e486c7e17d4e5908a46dda602086604051908152a360018055005b60ff19166001179055600454906801000000000000000082101561057e577f0c50c097ce2862533c8b4cf54b8114ed60cba691c6e486c7e17d4e5908a46dda9261056483600160209501600455611a11565b819291549060031b9188831b921b191617905590856104df565b634e487b7160e01b600052604160045260246000fd5b346100fb5760003660031901126100fb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fb5760003660031901126100fb576000546040516001600160a01b039091168152602090f35b346100fb5760003660031901126100fb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100fb5760003660031901126100fb57610660611a5e565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100fb5760a03660031901126100fb576106b9611998565b67ffffffffffffffff906064358281116100fb576106db9036906004016119ae565b92608435916001600160a01b03831683036100fb576106f8611b83565b604051906323b872dd60e01b602083015233602483015230604483015260043560648301526064825260a08201928284109084111761057e5761074d610766926107b89460405260018060a01b038616611b27565b6040519561075a87611a8a565b60043587523691611bcf565b9384602082015260018060a01b03831660408201525161079b6040519586926020840152606060408401526080830190611c55565b6001600160a01b038416606083015203601f198101855284611ac2565b604051632c805af560e21b8152926020846004816001600160a01b0386165afa9384156102ed57600094610f4a575b50604051631f1b131360e31b8152906020826004816001600160a01b0387165afa9182156102ed57600092610f19575b5060405163613255ab60e01b81526001600160a01b038381166004830152909190602090839060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9182156102ed57600092610ee5575b506040516370a0823160e01b8152306004820152916020836024816001600160a01b0389165afa9283156102ed57600093610eb1575b506040516370a0823160e01b8152306004820152936020856024816001600160a01b038c165afa9485156102ed57600095610e7d575b50604051633676633960e21b81526001600160a01b038216600482015260248101839052602081806044810103817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa80156102ed57600090610e49575b610954915083611c25565b60405163095ea7b360e01b60208083018281526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602485015260448085019590955293835290926000906109b2606485611ac2565b835190826001600160a01b0388165af16000513d82610e24575b505015610dad575b50506001600160a01b038181167f000000000000000000000000000000000000000000000000000000000000000090911603610d6257604051632e7ff4ef60e11b81523060048201526001600160a01b0390911660248201526044810191909152608060648201529060209082908190610a52906084830190611c55565b038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102ed57610d2a575b506040516370a0823160e01b8152306004820152906020826024816001600160a01b0388165afa9182156102ed57600092610cf6575b5080821015610cd95790610ad691611ba6565b6004358103610cb957506040516370a0823160e01b81523060048201526020816024816001600160a01b0389165afa9081156102ed57600091610c87575b5081811115610c695790610b2791611ba6565b91604435808410610c4b5750610b489083906001600160a01b038616611ae4565b6040516370a0823160e01b8152306004820152926020846024816001600160a01b0385165afa9081156102ed57600091610c16575b6001600160a01b0383811660009081526002602090815260408083209385168352928152919020549095508211610bbe575b50505060018055604051908152f35b7fad79d05acd80cdd541a6b69468eb8c356bfb5426652f379c4c6d945f1ea15ec3908590610bf9846001600160a01b03878116908416611ae4565b6040519384526001600160a01b03908116941692a3828080610baf565b90506020843d602011610c43575b81610c3160209383611ac2565b810103126100fb576020935190610b7d565b3d9150610c24565b83604491604051916347247e7760e11b835260048301526024820152fd5b6044925060405191637506a25d60e11b835260048301526024820152fd5b90506020813d602011610cb1575b81610ca260209383611ac2565b810103126100fb575185610b14565b3d9150610c95565b604490604051906302d753ed60e61b825260043560048301526024820152fd5b60449160405191632b9e770560e11b835260048301526024820152fd5b9091506020813d602011610d22575b81610d1260209383611ac2565b810103126100fb57519086610ac3565b3d9150610d05565b6020813d602011610d5a575b81610d4360209383611ac2565b810103126100fb5751801515036100fb5785610a8d565b3d9150610d36565b60405163aaae67a160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152919091166024820152604490fd5b610e0e610e1d9260405190602082015260018060a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526000604482015260448152610dff81611aa6565b6001600160a01b038516611b27565b6001600160a01b038316611b27565b88806109d4565b909150610e4157506001600160a01b0383163b15155b8b806109cc565b600114610e3a565b506020813d602011610e75575b81610e6360209383611ac2565b810103126100fb576109549051610949565b3d9150610e56565b9094506020813d602011610ea9575b81610e9960209383611ac2565b810103126100fb575193886108e1565b3d9150610e8c565b9092506020813d602011610edd575b81610ecd60209383611ac2565b810103126100fb575191876108ab565b3d9150610ec0565b9091506020813d602011610f11575b81610f0160209383611ac2565b810103126100fb57519086610875565b3d9150610ef4565b610f3c91925060203d602011610f43575b610f348183611ac2565b810190611c06565b9085610817565b503d610f2a565b610f6491945060203d602011610f4357610f348183611ac2565b92846107e7565b346100fb5760003660031901126100fb57604051806004548083526020809301809160046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9060005b86828210611016578686610fcd82880383611ac2565b604051928392818401908285525180915260408401929160005b828110610ff657505050500390f35b83516001600160a01b031685528695509381019392810192600101610fe7565b83546001600160a01b031685529093019260019283019201610fb7565b346100fb5760003660031901126100fb5760206040517f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98152f35b346100fb5760a03660031901126100fb57611087611982565b90611090611998565b906084359267ffffffffffffffff938481116100fb576110b49036906004016119ae565b90929091907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163381900361195f575050306001600160a01b0382160361193657509061110a913691611bcf565b906040519261111884611a8a565b60008452606060208501526040840192600084528051810190606081602084019303126100fb5760208101519260408201519081116100fb5781019082603f830112156100fb5760208201519161116e83611bb3565b9361117c6040519586611ac2565b838552604084830101116100fb5760609261119e916040602087019101611c32565b0151936001600160a01b03851685036100fb576001600160a01b03851690819052602086810192909252918552604051632c805af560e21b81529391849060049082905afa9283156102ed57600093611915575b50604051631f1b131360e31b8152916020836004816001600160a01b0386165afa9283156102ed576000936118f4575b506001600160a01b03838116908216036118ca57506040516370a0823160e01b8152306004820152906020826024816001600160a01b0387165afa9182156102ed57600092611896575b5060405163095ea7b360e01b60208201526001600160a01b038216602482015260001960448083019190915281526112a381611aa6565b8051602090600090838301826001600160a01b0389165af16000513d82611871575b50501561181e575b508451604051635d043b2960e11b815260048101919091523060248201819052604482015260208160648160006001600160a01b0387165af180156102ed576117f3575b5060405163095ea7b360e01b60208083019182526001600160a01b0384166024840152600060448085018290528452909161134b84611aa6565b835190826001600160a01b0389165af16000513d826117ce575b50501561176b575b50506040516370a0823160e01b81523060048201526020816024816001600160a01b0387165afa9081156102ed57600091611739575b5081811161171b576020916113be6113c39260643592611ba6565b611c25565b9301516040516370a0823160e01b815230600482015290926001600160a01b031690602081602481855afa9081156102ed576000916116e9575b506040516370a0823160e01b8152306004820152926020846024816001600160a01b0385165afa9384156102ed576000946116b2575b506040516304ecaec960e31b8152600481018490526001600160a01b03821660248201526044810187905260001960648201523060848201524260a482015261010060c482015293949293926020908490819061149590610104830190611c55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660e4830152038173__$73ace4aa8e5f9c1a2b48f796123ca85165$__5af49283156102ed5760009361167b575b506020602494604051958680926370a0823160e01b82523060048301525afa9384156102ed57600094611646575b506040516370a0823160e01b81523060048201529390602090859060249082906001600160a01b03165afa9384156102ed57600094611612575b508181106115dd575b505050818111156115c0579061157291611ba6565b8181036115a35760206040517f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98152f35b60449160405191638919e25360e01b835260048301526024820152fd5b60449250604051916204bb6760e81b835260048301526024820152fd5b6115e691611ba6565b908082036115f4578061155d565b6044925060405191637654e04760e11b835260048301526024820152fd5b9093506020813d60201161163e575b8161162e60209383611ac2565b810103126100fb57519286611554565b3d9150611621565b93506020843d602011611673575b8161166160209383611ac2565b810103126100fb57925192602061151a565b3d9150611654565b9392506020843d6020116116aa575b8161169760209383611ac2565b810103126100fb579251919260206114ec565b3d915061168a565b9293506020833d6020116116e1575b816116ce60209383611ac2565b810103126100fb57915192916020611433565b3d91506116c1565b90506020813d602011611713575b8161170460209383611ac2565b810103126100fb5751856113fd565b3d91506116f7565b604492506040519163a40ed01360e01b835260048301526024820152fd5b90506020813d602011611763575b8161175460209383611ac2565b810103126100fb5751856113a3565b3d9150611747565b60405163095ea7b360e01b60208201526001600160a01b039092166024830152600060448084019190915282526117c7916117b8906117a981611aa6565b6001600160a01b038616611b27565b6001600160a01b038416611b27565b848061136d565b9091506117eb57506001600160a01b0384163b15155b8780611365565b6001146117e4565b602090813d8311611817575b6118098183611ac2565b810103126100fb5785611311565b503d6117ff565b60405163095ea7b360e01b60208201526001600160a01b03831660248201526000604480830191909152815261186b9190610dff9061185c81611aa6565b6001600160a01b038716611b27565b856112cd565b90915061188e57506001600160a01b0384163b15155b87806112c5565b600114611887565b9091506020813d6020116118c2575b816118b260209383611ac2565b810103126100fb5751908561126c565b3d91506118a5565b60405163c7f1118d60e01b81526001600160a01b0391821660048201529083166024820152604490fd5b61190e91935060203d602011610f4357610f348183611ac2565b9185611222565b61192f91935060203d602011610f4357610f348183611ac2565b91846111f2565b604051636705ec4760e11b81526001600160a01b03919091166004820152306024820152604490fd5b631a01026f60e01b82523360048301526001600160a01b03166024820152604490fd5b600435906001600160a01b03821682036100fb57565b602435906001600160a01b03821682036100fb57565b9181601f840112156100fb5782359167ffffffffffffffff83116100fb57602083818601950101116100fb57565b60609060031901126100fb576001600160a01b039060043582811681036100fb579160243590811681036100fb579060443590565b600454811015611a485760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b03163303611a7257565b60405163118cdaa760e01b8152336004820152602490fd5b6060810190811067ffffffffffffffff82111761057e57604052565b6080810190811067ffffffffffffffff82111761057e57604052565b90601f8019910116810190811067ffffffffffffffff82111761057e57604052565b60405163a9059cbb60e01b60208201526001600160a01b03929092166024830152604480830193909352918152611b2591611b20606483611ac2565b611b27565b565b906000602091828151910182855af1156102ed576000513d611b7a57506001600160a01b0381163b155b611b585750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415611b51565b600260015414611b94576002600155565b604051633ee5aeb560e01b8152600490fd5b919082039182116103ea57565b67ffffffffffffffff811161057e57601f01601f191660200190565b929192611bdb82611bb3565b91611be96040519384611ac2565b8294818452818301116100fb578281602093846000960137010152565b908160209103126100fb57516001600160a01b03811681036100fb5790565b919082018092116103ea57565b60005b838110611c455750506000910152565b8181015183820152602001611c35565b90602091611c6e81518092818552858086019101611c32565b601f01601f191601019056fea264697066735822122065d32210562196f237f238e5c558091632aa3ef029cc188c73a429341593568b64736f6c63430008140033",
  "libraries": {
    "OdosSwapLogic": "0xf407Fc422d663D2dAab7DbceA44E16aDe15ca87d"
  },
  "devdoc": {
    "details": "Implementation of DLoopRedeemerBase with Odos swap functionality",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "calculateMinOutputCollateral(uint256,uint256,address)": {
        "details": "Calculates the minimum output collateral amount for a given shares and slippage bps",
        "params": {
          "dLoopCore": "Address of the DLoopCore contract",
          "shares": "Amount of shares to redeem",
          "slippageBps": "Slippage bps"
        },
        "returns": {
          "_0": "minOutputCollateralAmount Minimum output collateral amount"
        }
      },
      "constructor": {
        "details": "Constructor for the DLoopRedeemerOdos contract",
        "params": {
          "_flashLender": "Address of the flash loan provider",
          "_odosRouter": "Address of the Odos router"
        }
      },
      "getRestrictedRescueTokens()": {
        "details": "Gets the restricted rescue tokens",
        "returns": {
          "restrictedTokens": "Restricted rescue tokens"
        }
      },
      "onFlashLoan(address,address,uint256,uint256,bytes)": {
        "details": "Callback function for flash loans",
        "params": {
          "data": "Encoded flash loan parameters",
          "initiator": "Address that initiated the flash loan",
          "token": "Address of the flash-borrowed token"
        },
        "returns": {
          "_0": "bytes32 The flash loan callback success bytes"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint256,address,uint256,bytes,address)": {
        "details": "Redeems shares from the core vault with flash loans      - The required debt token to withdraw will be flash loaned from the flash lender",
        "params": {
          "collateralToDebtTokenSwapData": "Swap data from collateral token to debt token",
          "dLoopCore": "Address of the DLoopCore contract to use",
          "minOutputCollateralAmount": "Minimum amount of collateral token to receive (slippage protection)",
          "receiver": "Address to receive the assets",
          "shares": "Amount of shares to redeem"
        },
        "returns": {
          "assets": "Amount of assets redeemed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "rescueToken(address,address,uint256)": {
        "details": "Rescues tokens accidentally sent to the contract (except for the collateral token and debt token)",
        "params": {
          "amount": "Amount of tokens to rescue",
          "receiver": "Address to receive the rescued tokens",
          "token": "Address of the token to rescue"
        }
      },
      "setMinLeftoverCollateralTokenAmount(address,address,uint256)": {
        "details": "Sets the minimum leftover collateral token amount for a given dLoopCore and collateral token",
        "params": {
          "collateralToken": "Address of the collateral token",
          "dLoopCore": "Address of the dLoopCore contract",
          "minAmount": "Minimum leftover collateral token amount for the given dLoopCore and collateral token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "DLoopRedeemerOdos",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/vaults/dloop/periphery/venue/odos/DLoopRedeemerOdos.sol:DLoopRedeemerOdos",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2793,
        "contract": "contracts/vaults/dloop/periphery/venue/odos/DLoopRedeemerOdos.sol:DLoopRedeemerOdos",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 16579,
        "contract": "contracts/vaults/dloop/periphery/venue/odos/DLoopRedeemerOdos.sol:DLoopRedeemerOdos",
        "label": "minLeftoverCollateralTokenAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16583,
        "contract": "contracts/vaults/dloop/periphery/venue/odos/DLoopRedeemerOdos.sol:DLoopRedeemerOdos",
        "label": "_existingCollateralTokensMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 16586,
        "contract": "contracts/vaults/dloop/periphery/venue/odos/DLoopRedeemerOdos.sol:DLoopRedeemerOdos",
        "label": "existingCollateralTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}