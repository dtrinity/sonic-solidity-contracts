{
  "address": "0xF6819756b86678dEd7A0aECD983697c4F7D42bbc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sourceFeed1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sourceFeed2",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lowerThresholdInBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedPriceInBase",
              "type": "uint256"
            }
          ],
          "internalType": "struct ThresholdingUtils.ThresholdConfig",
          "name": "_primaryThreshold",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lowerThresholdInBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedPriceInBase",
              "type": "uint256"
            }
          ],
          "internalType": "struct ThresholdingUtils.ThresholdConfig",
          "name": "_secondaryThreshold",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PriceIsStale",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroFeedAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINLINK_BASE_CURRENCY_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAINLINK_HEARTBEAT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "heartbeatStaleTimeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lowerThresholdInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fixedPriceInBase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondaryThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lowerThresholdInBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fixedPriceInBase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sourceFeed1",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sourceFeed2",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa2bdd8976b510ea14409d3e49065cc89a6ead857de49ae9dc7c73360b2746c5",
  "receipt": {
    "to": null,
    "from": "0x51fc0830DBe3A446701E7897F32C89A3B04e5a0a",
    "contractAddress": "0xF6819756b86678dEd7A0aECD983697c4F7D42bbc",
    "transactionIndex": 0,
    "gasUsed": "619915",
    "logsBloom": "0x
    "blockHash": "0x97acdc57b1efc6c465a30ed6fb8ff632e3923932e220022df862847359adba92",
    "transactionHash": "0xaa2bdd8976b510ea14409d3e49065cc89a6ead857de49ae9dc7c73360b2746c5",
    "logs": [],
    "blockNumber": 36991563,
    "cumulativeGasUsed": "619915",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x125629732C21A403Ae1eFf159467971ee01470a6",
    "0xc76dFb89fF298145b417d221B2c747d84952e01d",
    {
      "lowerThresholdInBase": "0",
      "fixedPriceInBase": "0"
    },
    {
      "lowerThresholdInBase": "0",
      "fixedPriceInBase": "0"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "f59d574ae37fba41b6c04a8e00b04986",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceFeed1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sourceFeed2\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lowerThresholdInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceInBase\",\"type\":\"uint256\"}],\"internalType\":\"struct ThresholdingUtils.ThresholdConfig\",\"name\":\"_primaryThreshold\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lowerThresholdInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceInBase\",\"type\":\"uint256\"}],\"internalType\":\"struct ThresholdingUtils.ThresholdConfig\",\"name\":\"_secondaryThreshold\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PriceIsStale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroFeedAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINLINK_BASE_CURRENCY_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAINLINK_HEARTBEAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heartbeatStaleTimeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerThresholdInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceInBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerThresholdInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedPriceInBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sourceFeed1\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sourceFeed2\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements AggregatorV3Interface to mimic being a Chainlink price feed      Uses the same composition logic as RedstoneChainlinkCompositeWrapperWithThresholding\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_primaryThreshold\":\"Primary threshold configuration for feed1\",\"_secondaryThreshold\":\"Secondary threshold configuration for feed2\",\"_sourceFeed1\":\"Address of the first source Chainlink price feed\",\"_sourceFeed2\":\"Address of the second source Chainlink price feed\"}},\"description()\":{\"returns\":{\"_0\":\"Description string\"}},\"getRoundData(uint80)\":{\"details\":\"IMPORTANT: Due to Chainlink round ID divergence between feeds, this aggregator only supports latest data.      Historical round queries are not supported and will always return the latest available data.      Use latestRoundData() for the most recent price information.\",\"params\":{\"roundId\":\"(ignored, always returns latest data)\"},\"returns\":{\"answer\":\"The composite price with target decimals\",\"answeredInRound\":\"The round in which the answer was computed\",\"roundId\":\"The round ID\",\"startedAt\":\"The timestamp when the round started\",\"updatedAt\":\"The timestamp when the round was updated\"}},\"latestRoundData()\":{\"returns\":{\"answer\":\"The composite price with target decimals\",\"answeredInRound\":\"The round in which the answer was computed\",\"roundId\":\"The round ID\",\"startedAt\":\"The timestamp when the round started\",\"updatedAt\":\"The timestamp when the round was updated\"}},\"version()\":{\"returns\":{\"_0\":\"Version number\"}}},\"title\":\"ChainlinkCompositeAggregator\",\"version\":1},\"userdoc\":{\"errors\":{\"PriceIsStale()\":[{\"notice\":\"Error thrown when price is stale\"}],\"ZeroFeedAddress()\":[{\"notice\":\"Error thrown when a feed address is zero\"}]},\"kind\":\"user\",\"methods\":{\"CHAINLINK_BASE_CURRENCY_UNIT()\":{\"notice\":\"Base currency unit for price normalization (10^8)\"},\"CHAINLINK_HEARTBEAT()\":{\"notice\":\"Chainlink heartbeat period (24 hours)\"},\"constructor\":{\"notice\":\"Constructor to initialize the composite wrapper\"},\"decimals()\":{\"notice\":\"Target decimals for composite price (Chainlink standard: 8)\"},\"description()\":{\"notice\":\"Returns the description of the composite feed\"},\"getRoundData(uint80)\":{\"notice\":\"Gets data for a specific round\"},\"heartbeatStaleTimeLimit()\":{\"notice\":\"Heartbeat stale time limit (additional buffer)\"},\"latestRoundData()\":{\"notice\":\"Gets data for the latest round\"},\"primaryThreshold()\":{\"notice\":\"Primary threshold configuration for sourceFeed1\"},\"secondaryThreshold()\":{\"notice\":\"Secondary threshold configuration for sourceFeed2\"},\"sourceFeed1()\":{\"notice\":\"First source Chainlink price feed\"},\"sourceFeed2()\":{\"notice\":\"Second source Chainlink price feed\"},\"version()\":{\"notice\":\"Returns the version of the original feed\"}},\"notice\":\"Composes prices from two Chainlink price feeds with thresholding\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle_aggregator/chainlink/ChainlinkCompositeAggregator.sol\":\"ChainlinkCompositeAggregator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/oracle_aggregator/chainlink/ChainlinkCompositeAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interface/chainlink/IAggregatorV3Interface.sol\\\";\\nimport \\\"../wrapper/ThresholdingUtils.sol\\\";\\n\\n/**\\n * @title ChainlinkCompositeAggregator\\n * @notice Composes prices from two Chainlink price feeds with thresholding\\n * @dev Implements AggregatorV3Interface to mimic being a Chainlink price feed\\n *      Uses the same composition logic as RedstoneChainlinkCompositeWrapperWithThresholding\\n */\\ncontract ChainlinkCompositeAggregator is AggregatorV3Interface, ThresholdingUtils {\\n    /// @notice First source Chainlink price feed\\n    AggregatorV3Interface public immutable sourceFeed1;\\n\\n    /// @notice Second source Chainlink price feed\\n    AggregatorV3Interface public immutable sourceFeed2;\\n\\n    /// @notice Target decimals for composite price (Chainlink standard: 8)\\n    uint8 public constant override decimals = 8;\\n\\n    /// @notice Base currency unit for price normalization (10^8)\\n    uint256 public constant CHAINLINK_BASE_CURRENCY_UNIT = 10 ** 8;\\n\\n    /// @notice Primary threshold configuration for sourceFeed1\\n    ThresholdConfig public primaryThreshold;\\n\\n    /// @notice Secondary threshold configuration for sourceFeed2\\n    ThresholdConfig public secondaryThreshold;\\n\\n    /// @notice Chainlink heartbeat period (24 hours)\\n    uint256 public constant CHAINLINK_HEARTBEAT = 86400;\\n\\n    /// @notice Heartbeat stale time limit (additional buffer)\\n    uint256 public constant heartbeatStaleTimeLimit = 3600; // 1 hour\\n\\n    /// @notice Error thrown when price is stale\\n    error PriceIsStale();\\n\\n    /// @notice Error thrown when a feed address is zero\\n    error ZeroFeedAddress();\\n\\n    /**\\n     * @notice Constructor to initialize the composite wrapper\\n     * @param _sourceFeed1 Address of the first source Chainlink price feed\\n     * @param _sourceFeed2 Address of the second source Chainlink price feed\\n     * @param _primaryThreshold Primary threshold configuration for feed1\\n     * @param _secondaryThreshold Secondary threshold configuration for feed2\\n     */\\n    constructor(\\n        address _sourceFeed1,\\n        address _sourceFeed2,\\n        ThresholdConfig memory _primaryThreshold,\\n        ThresholdConfig memory _secondaryThreshold\\n    ) {\\n        // Validate feed addresses\\n        if (_sourceFeed1 == address(0) || _sourceFeed2 == address(0)) {\\n            revert ZeroFeedAddress();\\n        }\\n\\n        sourceFeed1 = AggregatorV3Interface(_sourceFeed1);\\n        sourceFeed2 = AggregatorV3Interface(_sourceFeed2);\\n        primaryThreshold = _primaryThreshold;\\n        secondaryThreshold = _secondaryThreshold;\\n    }\\n\\n    /**\\n     * @notice Returns the description of the composite feed\\n     * @return Description string\\n     */\\n    function description() external view override returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    sourceFeed1.description(),\\n                    \\\" x \\\",\\n                    sourceFeed2.description(),\\n                    \\\" (Composite)\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the version of the original feed\\n     * @return Version number\\n     */\\n    function version() external pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Gets data for the latest round\\n     * @return roundId The round ID\\n     * @return answer The composite price with target decimals\\n     * @return startedAt The timestamp when the round started\\n     * @return updatedAt The timestamp when the round was updated\\n     * @return answeredInRound The round in which the answer was computed\\n     */\\n    function latestRoundData()\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        // Get latest data from both feeds\\n        (\\n            uint80 roundId1,\\n            int256 answer1,\\n            uint256 startedAt1,\\n            uint256 updatedAt1,\\n            uint80 answeredInRound1\\n        ) = sourceFeed1.latestRoundData();\\n\\n        (\\n            ,\\n            // roundId2,\\n            int256 answer2,\\n            uint256 startedAt2,\\n            uint256 updatedAt2, // answeredInRound2\\n\\n        ) = sourceFeed2.latestRoundData();\\n\\n        // Check if prices are stale\\n        if (\\n            updatedAt1 + CHAINLINK_HEARTBEAT + heartbeatStaleTimeLimit <=\\n            block.timestamp ||\\n            updatedAt2 + CHAINLINK_HEARTBEAT + heartbeatStaleTimeLimit <=\\n            block.timestamp\\n        ) {\\n            revert PriceIsStale();\\n        }\\n\\n        // Use the latest timestamp from both feeds\\n        uint256 latestUpdatedAt = updatedAt1 > updatedAt2\\n            ? updatedAt1\\n            : updatedAt2;\\n        uint256 latestStartedAt = startedAt1 > startedAt2\\n            ? startedAt1\\n            : startedAt2;\\n\\n        // Calculate composite price using the same logic as Redstone wrapper\\n        uint256 compositePrice = _calculateCompositePrice(answer1, answer2);\\n\\n        return (\\n            roundId1, // Use the first feed's round ID\\n            int256(compositePrice),\\n            latestStartedAt,\\n            latestUpdatedAt,\\n            answeredInRound1 // Use the first feed's answeredInRound\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets data for a specific round\\n     * @dev IMPORTANT: Due to Chainlink round ID divergence between feeds, this aggregator only supports latest data.\\n     *      Historical round queries are not supported and will always return the latest available data.\\n     *      Use latestRoundData() for the most recent price information.\\n     * @param roundId (ignored, always returns latest data)\\n     * @return roundId The round ID\\n     * @return answer The composite price with target decimals\\n     * @return startedAt The timestamp when the round started\\n     * @return updatedAt The timestamp when the round was updated\\n     * @return answeredInRound The round in which the answer was computed\\n     */\\n    function getRoundData(\\n        uint80 /* _roundId */\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        // Delegate to latestRoundData to avoid round ID divergence issues\\n        return this.latestRoundData();\\n    }\\n\\n    /**\\n     * @notice Calculate composite price using the same logic as Redstone wrapper\\n     * @param answer1 Price from first feed\\n     * @param answer2 Price from second feed\\n     * @return Composite price in target decimals\\n     */\\n    function _calculateCompositePrice(\\n        int256 answer1,\\n        int256 answer2\\n    ) internal view returns (uint256) {\\n        // Convert negative answers to 0 (same as Redstone wrapper)\\n        uint256 chainlinkPrice1 = answer1 > 0 ? uint256(answer1) : 0;\\n        uint256 chainlinkPrice2 = answer2 > 0 ? uint256(answer2) : 0;\\n\\n        // Convert both prices to base currency unit first\\n        uint256 priceInBase1 = _convertToBaseCurrencyUnit(\\n            chainlinkPrice1,\\n            sourceFeed1.decimals()\\n        );\\n        uint256 priceInBase2 = _convertToBaseCurrencyUnit(\\n            chainlinkPrice2,\\n            sourceFeed2.decimals()\\n        );\\n\\n        // Apply thresholding to prices in base currency unit if specified\\n        if (primaryThreshold.lowerThresholdInBase > 0) {\\n            priceInBase1 = _applyThreshold(priceInBase1, primaryThreshold);\\n        }\\n        if (secondaryThreshold.lowerThresholdInBase > 0) {\\n            priceInBase2 = _applyThreshold(priceInBase2, secondaryThreshold);\\n        }\\n\\n        // Calculate composite price: (price1 * price2) / baseCurrencyUnit\\n        return (priceInBase1 * priceInBase2) / CHAINLINK_BASE_CURRENCY_UNIT;\\n    }\\n\\n    /**\\n     * @notice Convert price to base currency unit (same logic as Redstone wrapper)\\n     * @param price Price in source decimals\\n     * @param sourceDecimals Decimal precision of the source price\\n     * @return Price in base currency unit\\n     */\\n    function _convertToBaseCurrencyUnit(\\n        uint256 price,\\n        uint8 sourceDecimals\\n    ) internal pure returns (uint256) {\\n        if (sourceDecimals > decimals) {\\n            // Scale down to target decimals\\n            return price / (10 ** (sourceDecimals - decimals));\\n        } else if (sourceDecimals < decimals) {\\n            // Scale up to target decimals\\n            return price * (10 ** (decimals - sourceDecimals));\\n        }\\n        return price;\\n    }\\n}\\n\",\"keccak256\":\"0x9ff53deadadefd9ce593b320ca35642f61650c309593a7cca94fee3ac739ec80\",\"license\":\"MIT\"},\"contracts/oracle_aggregator/interface/chainlink/IAggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x114f2a4b1de25cf837f38b10c4c1bca07d53587f2367e37c6f310a953fd20bd4\",\"license\":\"MIT\"},\"contracts/oracle_aggregator/wrapper/ThresholdingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nabstract contract ThresholdingUtils {\\n    /* Types */\\n    struct ThresholdConfig {\\n        /// @notice The minimum price after which thresholding is applied. Not a price cap, but a trigger point.\\n        /// @dev If lowerThresholdInBase == fixedPriceInBase: Acts as an upper threshold\\n        /// @dev If lowerThresholdInBase < fixedPriceInBase: Acts as \\\"price rounding up\\\" (e.g. if USDC > 0.997 then round to 1)\\n        /// @dev If lowerThresholdInBase > fixedPriceInBase: Acts as \\\"price rounding down\\\" (e.g. if USDC > 1.003 then round to 1)\\n        uint256 lowerThresholdInBase;\\n        uint256 fixedPriceInBase;\\n    }\\n\\n    /**\\n     * @notice Apply threshold to a price value\\n     * @param priceInBase The price to check against threshold\\n     * @param thresholdConfig The threshold configuration\\n     * @return The original price or fixed price based on threshold\\n     */\\n    function _applyThreshold(\\n        uint256 priceInBase,\\n        ThresholdConfig memory thresholdConfig\\n    ) internal pure returns (uint256) {\\n        if (priceInBase > thresholdConfig.lowerThresholdInBase) {\\n            return thresholdConfig.fixedPriceInBase;\\n        }\\n        return priceInBase;\\n    }\\n}\\n\",\"keccak256\":\"0x2c3bb0f98af6761a8de5660cd7c9516880936bf5bfb1070b2065ab958476bb00\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c03461010057610b643881900390601f8201601f19168301906001600160401b03821184831017610105578291604052833981019060c081830312610100576100488161011b565b61006e6100576020840161011b565b936080610067826040870161012f565b940161012f565b916001600160a01b0391821691821580156100f6575b6100e45760209485936080521660a05280516000550151600155805160025501516003556040516109fc9081610168823960805181818160d7015281816105910152610714015260a051818181610118015281816105cd01526107900152f35b6040516362b7353760e11b8152600490fd5b5080851615610084565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361010057565b919082604091031261010057604080519081016001600160401b0381118282101761010557604052602080829480518452015191015256fe6080604081815260048036101561001557600080fd5b600092833560e01c9081631e10e31d1461077c575080632ecac6fc1461075f578063313ce56714610743578063409fec04146106ff57806354fd4d50146106e35780637284e416146105605780639235f1971461053b578063928efc62146105195780639a6fc8f5146104615780639a999d4514610443578063eae06eec146104205763feaf968c146100a757600080fd5b3461041c578260031936011261041c578151633fabe5a360e21b8082526001600160a01b039260a09286929091907f0000000000000000000000000000000000000000000000000000000000000000861685848481845afa958615610412578597869587918891899a6103e5575b507f000000000000000000000000000000000000000000000000000000000000000016948b5190815283818881895afa9081156103db5789948a926103a0575b5050620151808083018084116103795762015f909081850180911161038c57421091821592610348575b5050610338578c959493929190808211156103305750975b808211156103285750955b8481131561032057905b8481131561031857915b8a5194859263313ce56760e01b9283855284896020998a935afa90811561030e5787946101e993926102f6575b50610943565b958b518095819382525afa9182156102ec579261021d8b936305f5e10096936102379661026b9c9d9e926102bd5750610943565b925480610297575b50600254908161026f575b5050610909565b965169ffffffffffffffffffff968716815296046020870152604086015260608501529091166080830152819060a0820190565b0390f35b9261028f92938c5192610281846107e2565b8352600354908301526109b0565b903880610230565b6102b691928c51916102a8836107e2565b8252600154848301526109b0565b9038610225565b6102de919250843d86116102e5575b6102d68183610814565b8101906108f0565b90386101e3565b503d6102cc565b89513d8c823e3d90fd5b6102de919250853d87116102e5576102d68183610814565b8d513d84823e3d90fd5b5083916101b6565b5083906101ac565b9050956101a2565b905097610197565b8b516342bc305b60e11b81528790fd5b8301915081831161037957820180911161036657421015388061017f565b634e487b7160e01b8e526011885260248efd5b634e487b7160e01b8f526011895260248ffd5b50634e487b7160e01b8f526011895260248ffd5b91509193506103c5929850803d106103d4575b6103bd8183610814565b8101906108be565b50989250929092973880610155565b503d6103b3565b8c513d8b823e3d90fd5b939a5098505050610404919450873d89116103d4576103bd8183610814565b939993989296939238610115565b88513d87823e3d90fd5b8280fd5b50503461043f578160031936011261043f57602090516305f5e1008152f35b5080fd5b50503461043f578160031936011261043f5760209051620151808152f35b50913461051657602036600319011261051657823569ffffffffffffffffffff8116036105165760a082518094633fabe5a360e21b825281305afa801561050a57818093819082936104dd575b5169ffffffffffffffffffff948516815260208101959095526040850152606084015216608082015260a09150f35b9450505050506104fd61026b9260a03d81116103d4576103bd8183610814565b92955085949091906104ae565b509051903d90823e3d90fd5b80fd5b8284346105165780600319360112610516575460015482519182526020820152f35b8284346105165780600319360112610516575060025460035482519182526020820152f35b503461041c578260031936011261041c578151633942720b60e11b80825290916001600160a01b03918591828582817f000000000000000000000000000000000000000000000000000000000000000088165afa9485156106d95783956106bd575b5085518094819382527f0000000000000000000000000000000000000000000000000000000000000000165afa9384156106b257809461068d575b5050815190610663602f836020968761061f81840196878151938492016107bf565b8201620103c160ed1b8982015261063f825180938b6023850191016107bf565b016b2028436f6d706f736974652960a01b602382015203600f810185520183610814565b61067f83519485938185525192838092860152858501906107bf565b601f01601f19168101030190f35b6106aa9294503d8091833e6106a28183610814565b810190610836565b9138806105fd565b8351903d90823e3d90fd5b6106d29195503d8085833e6106a28183610814565b93386105c2565b86513d85823e3d90fd5b50503461043f578160031936011261043f576020905160018152f35b50503461043f578160031936011261043f57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461043f578160031936011261043f576020905160088152f35b50503461043f578160031936011261043f5760209051610e108152f35b84903461043f578160031936011261043f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60005b8381106107d25750506000910152565b81810151838201526020016107c2565b6040810190811067ffffffffffffffff8211176107fe57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176107fe57604052565b6020818303126108a257805167ffffffffffffffff918282116108a257019082601f830112156108a25781519081116107fe5760405192610881601f8301601f191660200185610814565b818452602082840101116108a25761089f91602080850191016107bf565b90565b600080fd5b519069ffffffffffffffffffff821682036108a257565b908160a09103126108a2576108d2816108a7565b9160208201519160408101519161089f6080606084015193016108a7565b908160209103126108a2575160ff811681036108a25790565b8181029291811591840414171561091c57565b634e487b7160e01b600052601160045260246000fd5b60ff16604d811161091c57600a0a90565b9060ff166008811115610986576007190160ff811161091c5761096590610932565b908115610970570490565b634e487b7160e01b600052601260045260246000fd5b60088110610992575090565b6008039060ff821161091c576109aa61089f92610932565b90610909565b90805182116109bd575090565b6020915001519056fea2646970667358221220d8ebf492c6435e56cea1fea13d6d11a371b1627707e3d8cfb525d724c6cb188f64736f6c63430008140033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c9081631e10e31d1461077c575080632ecac6fc1461075f578063313ce56714610743578063409fec04146106ff57806354fd4d50146106e35780637284e416146105605780639235f1971461053b578063928efc62146105195780639a6fc8f5146104615780639a999d4514610443578063eae06eec146104205763feaf968c146100a757600080fd5b3461041c578260031936011261041c578151633fabe5a360e21b8082526001600160a01b039260a09286929091907f0000000000000000000000000000000000000000000000000000000000000000861685848481845afa958615610412578597869587918891899a6103e5575b507f000000000000000000000000000000000000000000000000000000000000000016948b5190815283818881895afa9081156103db5789948a926103a0575b5050620151808083018084116103795762015f909081850180911161038c57421091821592610348575b5050610338578c959493929190808211156103305750975b808211156103285750955b8481131561032057905b8481131561031857915b8a5194859263313ce56760e01b9283855284896020998a935afa90811561030e5787946101e993926102f6575b50610943565b958b518095819382525afa9182156102ec579261021d8b936305f5e10096936102379661026b9c9d9e926102bd5750610943565b925480610297575b50600254908161026f575b5050610909565b965169ffffffffffffffffffff968716815296046020870152604086015260608501529091166080830152819060a0820190565b0390f35b9261028f92938c5192610281846107e2565b8352600354908301526109b0565b903880610230565b6102b691928c51916102a8836107e2565b8252600154848301526109b0565b9038610225565b6102de919250843d86116102e5575b6102d68183610814565b8101906108f0565b90386101e3565b503d6102cc565b89513d8c823e3d90fd5b6102de919250853d87116102e5576102d68183610814565b8d513d84823e3d90fd5b5083916101b6565b5083906101ac565b9050956101a2565b905097610197565b8b516342bc305b60e11b81528790fd5b8301915081831161037957820180911161036657421015388061017f565b634e487b7160e01b8e526011885260248efd5b634e487b7160e01b8f526011895260248ffd5b50634e487b7160e01b8f526011895260248ffd5b91509193506103c5929850803d106103d4575b6103bd8183610814565b8101906108be565b50989250929092973880610155565b503d6103b3565b8c513d8b823e3d90fd5b939a5098505050610404919450873d89116103d4576103bd8183610814565b939993989296939238610115565b88513d87823e3d90fd5b8280fd5b50503461043f578160031936011261043f57602090516305f5e1008152f35b5080fd5b50503461043f578160031936011261043f5760209051620151808152f35b50913461051657602036600319011261051657823569ffffffffffffffffffff8116036105165760a082518094633fabe5a360e21b825281305afa801561050a57818093819082936104dd575b5169ffffffffffffffffffff948516815260208101959095526040850152606084015216608082015260a09150f35b9450505050506104fd61026b9260a03d81116103d4576103bd8183610814565b92955085949091906104ae565b509051903d90823e3d90fd5b80fd5b8284346105165780600319360112610516575460015482519182526020820152f35b8284346105165780600319360112610516575060025460035482519182526020820152f35b503461041c578260031936011261041c578151633942720b60e11b80825290916001600160a01b03918591828582817f000000000000000000000000000000000000000000000000000000000000000088165afa9485156106d95783956106bd575b5085518094819382527f0000000000000000000000000000000000000000000000000000000000000000165afa9384156106b257809461068d575b5050815190610663602f836020968761061f81840196878151938492016107bf565b8201620103c160ed1b8982015261063f825180938b6023850191016107bf565b016b2028436f6d706f736974652960a01b602382015203600f810185520183610814565b61067f83519485938185525192838092860152858501906107bf565b601f01601f19168101030190f35b6106aa9294503d8091833e6106a28183610814565b810190610836565b9138806105fd565b8351903d90823e3d90fd5b6106d29195503d8085833e6106a28183610814565b93386105c2565b86513d85823e3d90fd5b50503461043f578160031936011261043f576020905160018152f35b50503461043f578160031936011261043f57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461043f578160031936011261043f576020905160088152f35b50503461043f578160031936011261043f5760209051610e108152f35b84903461043f578160031936011261043f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60005b8381106107d25750506000910152565b81810151838201526020016107c2565b6040810190811067ffffffffffffffff8211176107fe57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176107fe57604052565b6020818303126108a257805167ffffffffffffffff918282116108a257019082601f830112156108a25781519081116107fe5760405192610881601f8301601f191660200185610814565b818452602082840101116108a25761089f91602080850191016107bf565b90565b600080fd5b519069ffffffffffffffffffff821682036108a257565b908160a09103126108a2576108d2816108a7565b9160208201519160408101519161089f6080606084015193016108a7565b908160209103126108a2575160ff811681036108a25790565b8181029291811591840414171561091c57565b634e487b7160e01b600052601160045260246000fd5b60ff16604d811161091c57600a0a90565b9060ff166008811115610986576007190160ff811161091c5761096590610932565b908115610970570490565b634e487b7160e01b600052601260045260246000fd5b60088110610992575090565b6008039060ff821161091c576109aa61089f92610932565b90610909565b90805182116109bd575090565b6020915001519056fea2646970667358221220d8ebf492c6435e56cea1fea13d6d11a371b1627707e3d8cfb525d724c6cb188f64736f6c63430008140033",
  "devdoc": {
    "details": "Implements AggregatorV3Interface to mimic being a Chainlink price feed      Uses the same composition logic as RedstoneChainlinkCompositeWrapperWithThresholding",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_primaryThreshold": "Primary threshold configuration for feed1",
          "_secondaryThreshold": "Secondary threshold configuration for feed2",
          "_sourceFeed1": "Address of the first source Chainlink price feed",
          "_sourceFeed2": "Address of the second source Chainlink price feed"
        }
      },
      "description()": {
        "returns": {
          "_0": "Description string"
        }
      },
      "getRoundData(uint80)": {
        "details": "IMPORTANT: Due to Chainlink round ID divergence between feeds, this aggregator only supports latest data.      Historical round queries are not supported and will always return the latest available data.      Use latestRoundData() for the most recent price information.",
        "params": {
          "roundId": "(ignored, always returns latest data)"
        },
        "returns": {
          "answer": "The composite price with target decimals",
          "answeredInRound": "The round in which the answer was computed",
          "roundId": "The round ID",
          "startedAt": "The timestamp when the round started",
          "updatedAt": "The timestamp when the round was updated"
        }
      },
      "latestRoundData()": {
        "returns": {
          "answer": "The composite price with target decimals",
          "answeredInRound": "The round in which the answer was computed",
          "roundId": "The round ID",
          "startedAt": "The timestamp when the round started",
          "updatedAt": "The timestamp when the round was updated"
        }
      },
      "version()": {
        "returns": {
          "_0": "Version number"
        }
      }
    },
    "title": "ChainlinkCompositeAggregator",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PriceIsStale()": [
        {
          "notice": "Error thrown when price is stale"
        }
      ],
      "ZeroFeedAddress()": [
        {
          "notice": "Error thrown when a feed address is zero"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "CHAINLINK_BASE_CURRENCY_UNIT()": {
        "notice": "Base currency unit for price normalization (10^8)"
      },
      "CHAINLINK_HEARTBEAT()": {
        "notice": "Chainlink heartbeat period (24 hours)"
      },
      "constructor": {
        "notice": "Constructor to initialize the composite wrapper"
      },
      "decimals()": {
        "notice": "Target decimals for composite price (Chainlink standard: 8)"
      },
      "description()": {
        "notice": "Returns the description of the composite feed"
      },
      "getRoundData(uint80)": {
        "notice": "Gets data for a specific round"
      },
      "heartbeatStaleTimeLimit()": {
        "notice": "Heartbeat stale time limit (additional buffer)"
      },
      "latestRoundData()": {
        "notice": "Gets data for the latest round"
      },
      "primaryThreshold()": {
        "notice": "Primary threshold configuration for sourceFeed1"
      },
      "secondaryThreshold()": {
        "notice": "Secondary threshold configuration for sourceFeed2"
      },
      "sourceFeed1()": {
        "notice": "First source Chainlink price feed"
      },
      "sourceFeed2()": {
        "notice": "Second source Chainlink price feed"
      },
      "version()": {
        "notice": "Returns the version of the original feed"
      }
    },
    "notice": "Composes prices from two Chainlink price feeds with thresholding",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31,
        "contract": "contracts/oracle_aggregator/chainlink/ChainlinkCompositeAggregator.sol:ChainlinkCompositeAggregator",
        "label": "primaryThreshold",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(ThresholdConfig)438_storage"
      },
      {
        "astId": 35,
        "contract": "contracts/oracle_aggregator/chainlink/ChainlinkCompositeAggregator.sol:ChainlinkCompositeAggregator",
        "label": "secondaryThreshold",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(ThresholdConfig)438_storage"
      }
    ],
    "types": {
      "t_struct(ThresholdConfig)438_storage": {
        "encoding": "inplace",
        "label": "struct ThresholdingUtils.ThresholdConfig",
        "members": [
          {
            "astId": 435,
            "contract": "contracts/oracle_aggregator/chainlink/ChainlinkCompositeAggregator.sol:ChainlinkCompositeAggregator",
            "label": "lowerThresholdInBase",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 437,
            "contract": "contracts/oracle_aggregator/chainlink/ChainlinkCompositeAggregator.sol:ChainlinkCompositeAggregator",
            "label": "fixedPriceInBase",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}